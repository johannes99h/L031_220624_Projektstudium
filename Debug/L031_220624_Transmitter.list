
L031_220624_Transmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000418c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  0800424c  0800424c  0001424c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004430  08004430  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08004430  08004430  00014430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004438  08004438  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004438  08004438  00014438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800443c  0800443c  0001443c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08004440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000084  080044c4  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  080044c4  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcb9  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020e3  00000000  00000000  0002dd65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000898  00000000  00000000  0002fe48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c0  00000000  00000000  000306e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012484  00000000  00000000  00030ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c532  00000000  00000000  00043324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006afb4  00000000  00000000  0004f856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ba80a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020cc  00000000  00000000  000ba860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000084 	.word	0x20000084
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004234 	.word	0x08004234

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000088 	.word	0x20000088
 8000104:	08004234 	.word	0x08004234

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_uldivmod>:
 8000408:	2b00      	cmp	r3, #0
 800040a:	d111      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 800040c:	2a00      	cmp	r2, #0
 800040e:	d10f      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 8000410:	2900      	cmp	r1, #0
 8000412:	d100      	bne.n	8000416 <__aeabi_uldivmod+0xe>
 8000414:	2800      	cmp	r0, #0
 8000416:	d002      	beq.n	800041e <__aeabi_uldivmod+0x16>
 8000418:	2100      	movs	r1, #0
 800041a:	43c9      	mvns	r1, r1
 800041c:	1c08      	adds	r0, r1, #0
 800041e:	b407      	push	{r0, r1, r2}
 8000420:	4802      	ldr	r0, [pc, #8]	; (800042c <__aeabi_uldivmod+0x24>)
 8000422:	a102      	add	r1, pc, #8	; (adr r1, 800042c <__aeabi_uldivmod+0x24>)
 8000424:	1840      	adds	r0, r0, r1
 8000426:	9002      	str	r0, [sp, #8]
 8000428:	bd03      	pop	{r0, r1, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	ffffffd9 	.word	0xffffffd9
 8000430:	b403      	push	{r0, r1}
 8000432:	4668      	mov	r0, sp
 8000434:	b501      	push	{r0, lr}
 8000436:	9802      	ldr	r0, [sp, #8]
 8000438:	f000 f82e 	bl	8000498 <__udivmoddi4>
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	469e      	mov	lr, r3
 8000440:	b002      	add	sp, #8
 8000442:	bc0c      	pop	{r2, r3}
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_lmul>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	0415      	lsls	r5, r2, #16
 800044c:	0c2d      	lsrs	r5, r5, #16
 800044e:	000f      	movs	r7, r1
 8000450:	0001      	movs	r1, r0
 8000452:	002e      	movs	r6, r5
 8000454:	46c6      	mov	lr, r8
 8000456:	4684      	mov	ip, r0
 8000458:	0400      	lsls	r0, r0, #16
 800045a:	0c14      	lsrs	r4, r2, #16
 800045c:	0c00      	lsrs	r0, r0, #16
 800045e:	0c09      	lsrs	r1, r1, #16
 8000460:	4346      	muls	r6, r0
 8000462:	434d      	muls	r5, r1
 8000464:	4360      	muls	r0, r4
 8000466:	4361      	muls	r1, r4
 8000468:	1940      	adds	r0, r0, r5
 800046a:	0c34      	lsrs	r4, r6, #16
 800046c:	1824      	adds	r4, r4, r0
 800046e:	b500      	push	{lr}
 8000470:	42a5      	cmp	r5, r4
 8000472:	d903      	bls.n	800047c <__aeabi_lmul+0x34>
 8000474:	2080      	movs	r0, #128	; 0x80
 8000476:	0240      	lsls	r0, r0, #9
 8000478:	4680      	mov	r8, r0
 800047a:	4441      	add	r1, r8
 800047c:	0c25      	lsrs	r5, r4, #16
 800047e:	186d      	adds	r5, r5, r1
 8000480:	4661      	mov	r1, ip
 8000482:	4359      	muls	r1, r3
 8000484:	437a      	muls	r2, r7
 8000486:	0430      	lsls	r0, r6, #16
 8000488:	1949      	adds	r1, r1, r5
 800048a:	0424      	lsls	r4, r4, #16
 800048c:	0c00      	lsrs	r0, r0, #16
 800048e:	1820      	adds	r0, r4, r0
 8000490:	1889      	adds	r1, r1, r2
 8000492:	bc80      	pop	{r7}
 8000494:	46b8      	mov	r8, r7
 8000496:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000498 <__udivmoddi4>:
 8000498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049a:	4657      	mov	r7, sl
 800049c:	464e      	mov	r6, r9
 800049e:	4645      	mov	r5, r8
 80004a0:	46de      	mov	lr, fp
 80004a2:	b5e0      	push	{r5, r6, r7, lr}
 80004a4:	0004      	movs	r4, r0
 80004a6:	000d      	movs	r5, r1
 80004a8:	4692      	mov	sl, r2
 80004aa:	4699      	mov	r9, r3
 80004ac:	b083      	sub	sp, #12
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d830      	bhi.n	8000514 <__udivmoddi4+0x7c>
 80004b2:	d02d      	beq.n	8000510 <__udivmoddi4+0x78>
 80004b4:	4649      	mov	r1, r9
 80004b6:	4650      	mov	r0, sl
 80004b8:	f000 f8ba 	bl	8000630 <__clzdi2>
 80004bc:	0029      	movs	r1, r5
 80004be:	0006      	movs	r6, r0
 80004c0:	0020      	movs	r0, r4
 80004c2:	f000 f8b5 	bl	8000630 <__clzdi2>
 80004c6:	1a33      	subs	r3, r6, r0
 80004c8:	4698      	mov	r8, r3
 80004ca:	3b20      	subs	r3, #32
 80004cc:	469b      	mov	fp, r3
 80004ce:	d433      	bmi.n	8000538 <__udivmoddi4+0xa0>
 80004d0:	465a      	mov	r2, fp
 80004d2:	4653      	mov	r3, sl
 80004d4:	4093      	lsls	r3, r2
 80004d6:	4642      	mov	r2, r8
 80004d8:	001f      	movs	r7, r3
 80004da:	4653      	mov	r3, sl
 80004dc:	4093      	lsls	r3, r2
 80004de:	001e      	movs	r6, r3
 80004e0:	42af      	cmp	r7, r5
 80004e2:	d83a      	bhi.n	800055a <__udivmoddi4+0xc2>
 80004e4:	42af      	cmp	r7, r5
 80004e6:	d100      	bne.n	80004ea <__udivmoddi4+0x52>
 80004e8:	e078      	b.n	80005dc <__udivmoddi4+0x144>
 80004ea:	465b      	mov	r3, fp
 80004ec:	1ba4      	subs	r4, r4, r6
 80004ee:	41bd      	sbcs	r5, r7
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	da00      	bge.n	80004f6 <__udivmoddi4+0x5e>
 80004f4:	e075      	b.n	80005e2 <__udivmoddi4+0x14a>
 80004f6:	2200      	movs	r2, #0
 80004f8:	2300      	movs	r3, #0
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2301      	movs	r3, #1
 8000500:	465a      	mov	r2, fp
 8000502:	4093      	lsls	r3, r2
 8000504:	9301      	str	r3, [sp, #4]
 8000506:	2301      	movs	r3, #1
 8000508:	4642      	mov	r2, r8
 800050a:	4093      	lsls	r3, r2
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	e028      	b.n	8000562 <__udivmoddi4+0xca>
 8000510:	4282      	cmp	r2, r0
 8000512:	d9cf      	bls.n	80004b4 <__udivmoddi4+0x1c>
 8000514:	2200      	movs	r2, #0
 8000516:	2300      	movs	r3, #0
 8000518:	9200      	str	r2, [sp, #0]
 800051a:	9301      	str	r3, [sp, #4]
 800051c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <__udivmoddi4+0x8e>
 8000522:	601c      	str	r4, [r3, #0]
 8000524:	605d      	str	r5, [r3, #4]
 8000526:	9800      	ldr	r0, [sp, #0]
 8000528:	9901      	ldr	r1, [sp, #4]
 800052a:	b003      	add	sp, #12
 800052c:	bcf0      	pop	{r4, r5, r6, r7}
 800052e:	46bb      	mov	fp, r7
 8000530:	46b2      	mov	sl, r6
 8000532:	46a9      	mov	r9, r5
 8000534:	46a0      	mov	r8, r4
 8000536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000538:	4642      	mov	r2, r8
 800053a:	2320      	movs	r3, #32
 800053c:	1a9b      	subs	r3, r3, r2
 800053e:	4652      	mov	r2, sl
 8000540:	40da      	lsrs	r2, r3
 8000542:	4641      	mov	r1, r8
 8000544:	0013      	movs	r3, r2
 8000546:	464a      	mov	r2, r9
 8000548:	408a      	lsls	r2, r1
 800054a:	0017      	movs	r7, r2
 800054c:	4642      	mov	r2, r8
 800054e:	431f      	orrs	r7, r3
 8000550:	4653      	mov	r3, sl
 8000552:	4093      	lsls	r3, r2
 8000554:	001e      	movs	r6, r3
 8000556:	42af      	cmp	r7, r5
 8000558:	d9c4      	bls.n	80004e4 <__udivmoddi4+0x4c>
 800055a:	2200      	movs	r2, #0
 800055c:	2300      	movs	r3, #0
 800055e:	9200      	str	r2, [sp, #0]
 8000560:	9301      	str	r3, [sp, #4]
 8000562:	4643      	mov	r3, r8
 8000564:	2b00      	cmp	r3, #0
 8000566:	d0d9      	beq.n	800051c <__udivmoddi4+0x84>
 8000568:	07fb      	lsls	r3, r7, #31
 800056a:	0872      	lsrs	r2, r6, #1
 800056c:	431a      	orrs	r2, r3
 800056e:	4646      	mov	r6, r8
 8000570:	087b      	lsrs	r3, r7, #1
 8000572:	e00e      	b.n	8000592 <__udivmoddi4+0xfa>
 8000574:	42ab      	cmp	r3, r5
 8000576:	d101      	bne.n	800057c <__udivmoddi4+0xe4>
 8000578:	42a2      	cmp	r2, r4
 800057a:	d80c      	bhi.n	8000596 <__udivmoddi4+0xfe>
 800057c:	1aa4      	subs	r4, r4, r2
 800057e:	419d      	sbcs	r5, r3
 8000580:	2001      	movs	r0, #1
 8000582:	1924      	adds	r4, r4, r4
 8000584:	416d      	adcs	r5, r5
 8000586:	2100      	movs	r1, #0
 8000588:	3e01      	subs	r6, #1
 800058a:	1824      	adds	r4, r4, r0
 800058c:	414d      	adcs	r5, r1
 800058e:	2e00      	cmp	r6, #0
 8000590:	d006      	beq.n	80005a0 <__udivmoddi4+0x108>
 8000592:	42ab      	cmp	r3, r5
 8000594:	d9ee      	bls.n	8000574 <__udivmoddi4+0xdc>
 8000596:	3e01      	subs	r6, #1
 8000598:	1924      	adds	r4, r4, r4
 800059a:	416d      	adcs	r5, r5
 800059c:	2e00      	cmp	r6, #0
 800059e:	d1f8      	bne.n	8000592 <__udivmoddi4+0xfa>
 80005a0:	9800      	ldr	r0, [sp, #0]
 80005a2:	9901      	ldr	r1, [sp, #4]
 80005a4:	465b      	mov	r3, fp
 80005a6:	1900      	adds	r0, r0, r4
 80005a8:	4169      	adcs	r1, r5
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	db24      	blt.n	80005f8 <__udivmoddi4+0x160>
 80005ae:	002b      	movs	r3, r5
 80005b0:	465a      	mov	r2, fp
 80005b2:	4644      	mov	r4, r8
 80005b4:	40d3      	lsrs	r3, r2
 80005b6:	002a      	movs	r2, r5
 80005b8:	40e2      	lsrs	r2, r4
 80005ba:	001c      	movs	r4, r3
 80005bc:	465b      	mov	r3, fp
 80005be:	0015      	movs	r5, r2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	db2a      	blt.n	800061a <__udivmoddi4+0x182>
 80005c4:	0026      	movs	r6, r4
 80005c6:	409e      	lsls	r6, r3
 80005c8:	0033      	movs	r3, r6
 80005ca:	0026      	movs	r6, r4
 80005cc:	4647      	mov	r7, r8
 80005ce:	40be      	lsls	r6, r7
 80005d0:	0032      	movs	r2, r6
 80005d2:	1a80      	subs	r0, r0, r2
 80005d4:	4199      	sbcs	r1, r3
 80005d6:	9000      	str	r0, [sp, #0]
 80005d8:	9101      	str	r1, [sp, #4]
 80005da:	e79f      	b.n	800051c <__udivmoddi4+0x84>
 80005dc:	42a3      	cmp	r3, r4
 80005de:	d8bc      	bhi.n	800055a <__udivmoddi4+0xc2>
 80005e0:	e783      	b.n	80004ea <__udivmoddi4+0x52>
 80005e2:	4642      	mov	r2, r8
 80005e4:	2320      	movs	r3, #32
 80005e6:	2100      	movs	r1, #0
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	2200      	movs	r2, #0
 80005ec:	9100      	str	r1, [sp, #0]
 80005ee:	9201      	str	r2, [sp, #4]
 80005f0:	2201      	movs	r2, #1
 80005f2:	40da      	lsrs	r2, r3
 80005f4:	9201      	str	r2, [sp, #4]
 80005f6:	e786      	b.n	8000506 <__udivmoddi4+0x6e>
 80005f8:	4642      	mov	r2, r8
 80005fa:	2320      	movs	r3, #32
 80005fc:	1a9b      	subs	r3, r3, r2
 80005fe:	002a      	movs	r2, r5
 8000600:	4646      	mov	r6, r8
 8000602:	409a      	lsls	r2, r3
 8000604:	0023      	movs	r3, r4
 8000606:	40f3      	lsrs	r3, r6
 8000608:	4644      	mov	r4, r8
 800060a:	4313      	orrs	r3, r2
 800060c:	002a      	movs	r2, r5
 800060e:	40e2      	lsrs	r2, r4
 8000610:	001c      	movs	r4, r3
 8000612:	465b      	mov	r3, fp
 8000614:	0015      	movs	r5, r2
 8000616:	2b00      	cmp	r3, #0
 8000618:	dad4      	bge.n	80005c4 <__udivmoddi4+0x12c>
 800061a:	4642      	mov	r2, r8
 800061c:	002f      	movs	r7, r5
 800061e:	2320      	movs	r3, #32
 8000620:	0026      	movs	r6, r4
 8000622:	4097      	lsls	r7, r2
 8000624:	1a9b      	subs	r3, r3, r2
 8000626:	40de      	lsrs	r6, r3
 8000628:	003b      	movs	r3, r7
 800062a:	4333      	orrs	r3, r6
 800062c:	e7cd      	b.n	80005ca <__udivmoddi4+0x132>
 800062e:	46c0      	nop			; (mov r8, r8)

08000630 <__clzdi2>:
 8000630:	b510      	push	{r4, lr}
 8000632:	2900      	cmp	r1, #0
 8000634:	d103      	bne.n	800063e <__clzdi2+0xe>
 8000636:	f000 f807 	bl	8000648 <__clzsi2>
 800063a:	3020      	adds	r0, #32
 800063c:	e002      	b.n	8000644 <__clzdi2+0x14>
 800063e:	1c08      	adds	r0, r1, #0
 8000640:	f000 f802 	bl	8000648 <__clzsi2>
 8000644:	bd10      	pop	{r4, pc}
 8000646:	46c0      	nop			; (mov r8, r8)

08000648 <__clzsi2>:
 8000648:	211c      	movs	r1, #28
 800064a:	2301      	movs	r3, #1
 800064c:	041b      	lsls	r3, r3, #16
 800064e:	4298      	cmp	r0, r3
 8000650:	d301      	bcc.n	8000656 <__clzsi2+0xe>
 8000652:	0c00      	lsrs	r0, r0, #16
 8000654:	3910      	subs	r1, #16
 8000656:	0a1b      	lsrs	r3, r3, #8
 8000658:	4298      	cmp	r0, r3
 800065a:	d301      	bcc.n	8000660 <__clzsi2+0x18>
 800065c:	0a00      	lsrs	r0, r0, #8
 800065e:	3908      	subs	r1, #8
 8000660:	091b      	lsrs	r3, r3, #4
 8000662:	4298      	cmp	r0, r3
 8000664:	d301      	bcc.n	800066a <__clzsi2+0x22>
 8000666:	0900      	lsrs	r0, r0, #4
 8000668:	3904      	subs	r1, #4
 800066a:	a202      	add	r2, pc, #8	; (adr r2, 8000674 <__clzsi2+0x2c>)
 800066c:	5c10      	ldrb	r0, [r2, r0]
 800066e:	1840      	adds	r0, r0, r1
 8000670:	4770      	bx	lr
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	02020304 	.word	0x02020304
 8000678:	01010101 	.word	0x01010101
	...

08000684 <scheduler>:

/*
 * 		Funktionsdefinitionen
 */
void scheduler()
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af02      	add	r7, sp, #8
	ClearADCBuffer(adcBuffer);
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <scheduler+0x48>)
 800068c:	0018      	movs	r0, r3
 800068e:	f000 f82d 	bl	80006ec <ClearADCBuffer>

	GetADCMeanValue(adcVal, 5);
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <scheduler+0x4c>)
 8000694:	2105      	movs	r1, #5
 8000696:	0018      	movs	r0, r3
 8000698:	f000 f850 	bl	800073c <GetADCMeanValue>

	GetADCResistance(adcBufferMeanValue);
 800069c:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <scheduler+0x50>)
 800069e:	0018      	movs	r0, r3
 80006a0:	f000 f86c 	bl	800077c <GetADCResistance>

	GetTempCArray(tempC, adcChannel, LUT, ntcResistance, LUToldValues);
 80006a4:	490c      	ldr	r1, [pc, #48]	; (80006d8 <scheduler+0x54>)
 80006a6:	4a0d      	ldr	r2, [pc, #52]	; (80006dc <scheduler+0x58>)
 80006a8:	480d      	ldr	r0, [pc, #52]	; (80006e0 <scheduler+0x5c>)
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <scheduler+0x60>)
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	000b      	movs	r3, r1
 80006b0:	2109      	movs	r1, #9
 80006b2:	f000 faa2 	bl	8000bfa <GetTempCArray>

	TxUART(adcChannel, tempC, millis);
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <scheduler+0x64>)
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <scheduler+0x5c>)
 80006bc:	0019      	movs	r1, r3
 80006be:	2009      	movs	r0, #9
 80006c0:	f000 fc8e 	bl	8000fe0 <TxUART>
}
 80006c4:	46c0      	nop			; (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	200000d0 	.word	0x200000d0
 80006d0:	20000110 	.word	0x20000110
 80006d4:	200000e4 	.word	0x200000e4
 80006d8:	200000f8 	.word	0x200000f8
 80006dc:	08004260 	.word	0x08004260
 80006e0:	200000a0 	.word	0x200000a0
 80006e4:	200000ac 	.word	0x200000ac
 80006e8:	200000c4 	.word	0x200000c4

080006ec <ClearADCBuffer>:


uint16_t *ClearADCBuffer(uint16_t *adcBuffer)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < (adcChannel * adcSamples); i++)
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	e011      	b.n	800071e <ClearADCBuffer+0x32>
	{
		// Übertragung des Werts vom Buffer auf ein weiteres Array
		adcVal[i] = adcBuffer[i];
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	18d3      	adds	r3, r2, r3
 8000702:	8819      	ldrh	r1, [r3, #0]
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <ClearADCBuffer+0x4c>)
 8000706:	68fa      	ldr	r2, [r7, #12]
 8000708:	0052      	lsls	r2, r2, #1
 800070a:	52d1      	strh	r1, [r2, r3]

		// Nullsetzung der Position des übertragenen Buffereintrags
		adcBuffer[i] = 0;
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	18d3      	adds	r3, r2, r3
 8000714:	2200      	movs	r2, #0
 8000716:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < (adcChannel * adcSamples); i++)
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	3301      	adds	r3, #1
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	2301      	movs	r3, #1
 8000720:	001a      	movs	r2, r3
 8000722:	0013      	movs	r3, r2
 8000724:	00db      	lsls	r3, r3, #3
 8000726:	189b      	adds	r3, r3, r2
 8000728:	68fa      	ldr	r2, [r7, #12]
 800072a:	429a      	cmp	r2, r3
 800072c:	dbe5      	blt.n	80006fa <ClearADCBuffer+0xe>
	}

	return adcVal;
 800072e:	4b02      	ldr	r3, [pc, #8]	; (8000738 <ClearADCBuffer+0x4c>)
}
 8000730:	0018      	movs	r0, r3
 8000732:	46bd      	mov	sp, r7
 8000734:	b004      	add	sp, #16
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000110 	.word	0x20000110

0800073c <GetADCMeanValue>:


uint16_t *GetADCMeanValue(uint16_t *adcVal, uint8_t adcSamples)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	000a      	movs	r2, r1
 8000746:	1cfb      	adds	r3, r7, #3
 8000748:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < adcChannel; i++)
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	e00b      	b.n	8000768 <GetADCMeanValue+0x2c>
	{
		adcBufferMeanValue[i] = adcVal[i];
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	687a      	ldr	r2, [r7, #4]
 8000756:	18d3      	adds	r3, r2, r3
 8000758:	8819      	ldrh	r1, [r3, #0]
 800075a:	4b07      	ldr	r3, [pc, #28]	; (8000778 <GetADCMeanValue+0x3c>)
 800075c:	68fa      	ldr	r2, [r7, #12]
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	52d1      	strh	r1, [r2, r3]
	for(int i = 0; i < adcChannel; i++)
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	3301      	adds	r3, #1
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	2b08      	cmp	r3, #8
 800076c:	ddf0      	ble.n	8000750 <GetADCMeanValue+0x14>
		// Mittelwertbildung durch Teilen der Summe durch die Sample-Zahl
		adcBufferMeanValue[l] = adcBufferMeanValue[l] / adcSamples;
	}
	*/

	return adcBufferMeanValue;
 800076e:	4b02      	ldr	r3, [pc, #8]	; (8000778 <GetADCMeanValue+0x3c>)
}
 8000770:	0018      	movs	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	b004      	add	sp, #16
 8000776:	bd80      	pop	{r7, pc}
 8000778:	200000e4 	.word	0x200000e4

0800077c <GetADCResistance>:


uint16_t *GetADCResistance(uint16_t *adcBufferMeanValue)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	// Berechnung der Spannung an den NTCs
	for(int i = 0; i < adcChannel; i++)
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
 8000788:	e018      	b.n	80007bc <GetADCResistance+0x40>
	{
		adcVoltage[i] = 33 * (adcBufferMeanValue[i] * 10) / 4095;
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	18d3      	adds	r3, r2, r3
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	001a      	movs	r2, r3
 8000796:	0013      	movs	r3, r2
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	189b      	adds	r3, r3, r2
 800079c:	015a      	lsls	r2, r3, #5
 800079e:	189b      	adds	r3, r3, r2
 80007a0:	005b      	lsls	r3, r3, #1
 80007a2:	491e      	ldr	r1, [pc, #120]	; (800081c <GetADCResistance+0xa0>)
 80007a4:	0018      	movs	r0, r3
 80007a6:	f7ff fd43 	bl	8000230 <__divsi3>
 80007aa:	0003      	movs	r3, r0
 80007ac:	b299      	uxth	r1, r3
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <GetADCResistance+0xa4>)
 80007b0:	697a      	ldr	r2, [r7, #20]
 80007b2:	0052      	lsls	r2, r2, #1
 80007b4:	52d1      	strh	r1, [r2, r3]
	for(int i = 0; i < adcChannel; i++)
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	3301      	adds	r3, #1
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	2b08      	cmp	r3, #8
 80007c0:	dde3      	ble.n	800078a <GetADCResistance+0xe>
	}

	// Berechnung der einzelnen NTC-Widerstände
	for(int i = 0; i < adcChannel; i++)
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	e021      	b.n	800080c <GetADCResistance+0x90>
	{
		// Aufteilung der Berechnungsoperation notwendig, da keine FPU vorhanden
		uint32_t tmp = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
		tmp = (ntcResistance25[i] * (330 - adcVoltage[i]));
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <GetADCResistance+0xa8>)
 80007ce:	693a      	ldr	r2, [r7, #16]
 80007d0:	0052      	lsls	r2, r2, #1
 80007d2:	5ad3      	ldrh	r3, [r2, r3]
 80007d4:	0019      	movs	r1, r3
 80007d6:	4b12      	ldr	r3, [pc, #72]	; (8000820 <GetADCResistance+0xa4>)
 80007d8:	693a      	ldr	r2, [r7, #16]
 80007da:	0052      	lsls	r2, r2, #1
 80007dc:	5ad3      	ldrh	r3, [r2, r3]
 80007de:	001a      	movs	r2, r3
 80007e0:	23a5      	movs	r3, #165	; 0xa5
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	1a9b      	subs	r3, r3, r2
 80007e6:	434b      	muls	r3, r1
 80007e8:	60fb      	str	r3, [r7, #12]
		ntcResistance[i] = (tmp / adcVoltage[i]);
 80007ea:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <GetADCResistance+0xa4>)
 80007ec:	693a      	ldr	r2, [r7, #16]
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	5ad3      	ldrh	r3, [r2, r3]
 80007f2:	0019      	movs	r1, r3
 80007f4:	68f8      	ldr	r0, [r7, #12]
 80007f6:	f7ff fc91 	bl	800011c <__udivsi3>
 80007fa:	0003      	movs	r3, r0
 80007fc:	b299      	uxth	r1, r3
 80007fe:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <GetADCResistance+0xac>)
 8000800:	693a      	ldr	r2, [r7, #16]
 8000802:	0052      	lsls	r2, r2, #1
 8000804:	52d1      	strh	r1, [r2, r3]
	for(int i = 0; i < adcChannel; i++)
 8000806:	693b      	ldr	r3, [r7, #16]
 8000808:	3301      	adds	r3, #1
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
 800080e:	2b08      	cmp	r3, #8
 8000810:	ddda      	ble.n	80007c8 <GetADCResistance+0x4c>
	}

	return ntcResistance;
 8000812:	4b05      	ldr	r3, [pc, #20]	; (8000828 <GetADCResistance+0xac>)

}
 8000814:	0018      	movs	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	b006      	add	sp, #24
 800081a:	bd80      	pop	{r7, pc}
 800081c:	00000fff 	.word	0x00000fff
 8000820:	20000128 	.word	0x20000128
 8000824:	20000000 	.word	0x20000000
 8000828:	200000f8 	.word	0x200000f8

0800082c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000830:	f000 fcb6 	bl	80011a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000834:	f000 f814 	bl	8000860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000838:	f000 f9ae 	bl	8000b98 <MX_GPIO_Init>
  MX_DMA_Init();
 800083c:	f000 f98e 	bl	8000b5c <MX_DMA_Init>
  MX_ADC_Init();
 8000840:	f000 f876 	bl	8000930 <MX_ADC_Init>
  MX_USART2_UART_Init();
 8000844:	f000 f950 	bl	8000ae8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcBuffer, buffLength);
 8000848:	4903      	ldr	r1, [pc, #12]	; (8000858 <main+0x2c>)
 800084a:	4b04      	ldr	r3, [pc, #16]	; (800085c <main+0x30>)
 800084c:	2209      	movs	r2, #9
 800084e:	0018      	movs	r0, r3
 8000850:	f000 fe8a 	bl	8001568 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000854:	e7fe      	b.n	8000854 <main+0x28>
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	200000d0 	.word	0x200000d0
 800085c:	20000208 	.word	0x20000208

08000860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b099      	sub	sp, #100	; 0x64
 8000864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000866:	242c      	movs	r4, #44	; 0x2c
 8000868:	193b      	adds	r3, r7, r4
 800086a:	0018      	movs	r0, r3
 800086c:	2334      	movs	r3, #52	; 0x34
 800086e:	001a      	movs	r2, r3
 8000870:	2100      	movs	r1, #0
 8000872:	f003 f8b1 	bl	80039d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000876:	2318      	movs	r3, #24
 8000878:	18fb      	adds	r3, r7, r3
 800087a:	0018      	movs	r0, r3
 800087c:	2314      	movs	r3, #20
 800087e:	001a      	movs	r2, r3
 8000880:	2100      	movs	r1, #0
 8000882:	f003 f8a9 	bl	80039d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000886:	003b      	movs	r3, r7
 8000888:	0018      	movs	r0, r3
 800088a:	2318      	movs	r3, #24
 800088c:	001a      	movs	r2, r3
 800088e:	2100      	movs	r1, #0
 8000890:	f003 f8a2 	bl	80039d8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000894:	4b24      	ldr	r3, [pc, #144]	; (8000928 <SystemClock_Config+0xc8>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a24      	ldr	r2, [pc, #144]	; (800092c <SystemClock_Config+0xcc>)
 800089a:	401a      	ands	r2, r3
 800089c:	4b22      	ldr	r3, [pc, #136]	; (8000928 <SystemClock_Config+0xc8>)
 800089e:	2180      	movs	r1, #128	; 0x80
 80008a0:	0109      	lsls	r1, r1, #4
 80008a2:	430a      	orrs	r2, r1
 80008a4:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a6:	0021      	movs	r1, r4
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	2202      	movs	r2, #2
 80008ac:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2201      	movs	r2, #1
 80008b2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	2210      	movs	r2, #16
 80008b8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	2200      	movs	r2, #0
 80008be:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	0018      	movs	r0, r3
 80008c4:	f001 fc7a 	bl	80021bc <HAL_RCC_OscConfig>
 80008c8:	1e03      	subs	r3, r0, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80008cc:	f000 f990 	bl	8000bf0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d0:	2118      	movs	r1, #24
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	220f      	movs	r2, #15
 80008d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	2201      	movs	r2, #1
 80008dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	2100      	movs	r1, #0
 80008f4:	0018      	movs	r0, r3
 80008f6:	f001 ffdd 	bl	80028b4 <HAL_RCC_ClockConfig>
 80008fa:	1e03      	subs	r3, r0, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80008fe:	f000 f977 	bl	8000bf0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000902:	003b      	movs	r3, r7
 8000904:	2202      	movs	r2, #2
 8000906:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000908:	003b      	movs	r3, r7
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800090e:	003b      	movs	r3, r7
 8000910:	0018      	movs	r0, r3
 8000912:	f002 f9f3 	bl	8002cfc <HAL_RCCEx_PeriphCLKConfig>
 8000916:	1e03      	subs	r3, r0, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800091a:	f000 f969 	bl	8000bf0 <Error_Handler>
  }
}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	b019      	add	sp, #100	; 0x64
 8000924:	bd90      	pop	{r4, r7, pc}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	40007000 	.word	0x40007000
 800092c:	ffffe7ff 	.word	0xffffe7ff

08000930 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000936:	003b      	movs	r3, r7
 8000938:	0018      	movs	r0, r3
 800093a:	2308      	movs	r3, #8
 800093c:	001a      	movs	r2, r3
 800093e:	2100      	movs	r1, #0
 8000940:	f003 f84a 	bl	80039d8 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000944:	4b5e      	ldr	r3, [pc, #376]	; (8000ac0 <MX_ADC_Init+0x190>)
 8000946:	4a5f      	ldr	r2, [pc, #380]	; (8000ac4 <MX_ADC_Init+0x194>)
 8000948:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800094a:	4b5d      	ldr	r3, [pc, #372]	; (8000ac0 <MX_ADC_Init+0x190>)
 800094c:	2200      	movs	r2, #0
 800094e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000950:	4b5b      	ldr	r3, [pc, #364]	; (8000ac0 <MX_ADC_Init+0x190>)
 8000952:	2280      	movs	r2, #128	; 0x80
 8000954:	02d2      	lsls	r2, r2, #11
 8000956:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000958:	4b59      	ldr	r3, [pc, #356]	; (8000ac0 <MX_ADC_Init+0x190>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_79CYCLES_5;
 800095e:	4b58      	ldr	r3, [pc, #352]	; (8000ac0 <MX_ADC_Init+0x190>)
 8000960:	2206      	movs	r2, #6
 8000962:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000964:	4b56      	ldr	r3, [pc, #344]	; (8000ac0 <MX_ADC_Init+0x190>)
 8000966:	2201      	movs	r2, #1
 8000968:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800096a:	4b55      	ldr	r3, [pc, #340]	; (8000ac0 <MX_ADC_Init+0x190>)
 800096c:	2200      	movs	r2, #0
 800096e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000970:	4b53      	ldr	r3, [pc, #332]	; (8000ac0 <MX_ADC_Init+0x190>)
 8000972:	2220      	movs	r2, #32
 8000974:	2101      	movs	r1, #1
 8000976:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000978:	4b51      	ldr	r3, [pc, #324]	; (8000ac0 <MX_ADC_Init+0x190>)
 800097a:	2221      	movs	r2, #33	; 0x21
 800097c:	2100      	movs	r1, #0
 800097e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000980:	4b4f      	ldr	r3, [pc, #316]	; (8000ac0 <MX_ADC_Init+0x190>)
 8000982:	2200      	movs	r2, #0
 8000984:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000986:	4b4e      	ldr	r3, [pc, #312]	; (8000ac0 <MX_ADC_Init+0x190>)
 8000988:	22c2      	movs	r2, #194	; 0xc2
 800098a:	32ff      	adds	r2, #255	; 0xff
 800098c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 800098e:	4b4c      	ldr	r3, [pc, #304]	; (8000ac0 <MX_ADC_Init+0x190>)
 8000990:	222c      	movs	r2, #44	; 0x2c
 8000992:	2101      	movs	r1, #1
 8000994:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000996:	4b4a      	ldr	r3, [pc, #296]	; (8000ac0 <MX_ADC_Init+0x190>)
 8000998:	2208      	movs	r2, #8
 800099a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800099c:	4b48      	ldr	r3, [pc, #288]	; (8000ac0 <MX_ADC_Init+0x190>)
 800099e:	2280      	movs	r2, #128	; 0x80
 80009a0:	0152      	lsls	r2, r2, #5
 80009a2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80009a4:	4b46      	ldr	r3, [pc, #280]	; (8000ac0 <MX_ADC_Init+0x190>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80009aa:	4b45      	ldr	r3, [pc, #276]	; (8000ac0 <MX_ADC_Init+0x190>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80009b0:	4b43      	ldr	r3, [pc, #268]	; (8000ac0 <MX_ADC_Init+0x190>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80009b6:	4b42      	ldr	r3, [pc, #264]	; (8000ac0 <MX_ADC_Init+0x190>)
 80009b8:	0018      	movs	r0, r3
 80009ba:	f000 fc61 	bl	8001280 <HAL_ADC_Init>
 80009be:	1e03      	subs	r3, r0, #0
 80009c0:	d001      	beq.n	80009c6 <MX_ADC_Init+0x96>
  {
    Error_Handler();
 80009c2:	f000 f915 	bl	8000bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009c6:	003b      	movs	r3, r7
 80009c8:	2201      	movs	r2, #1
 80009ca:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80009cc:	003b      	movs	r3, r7
 80009ce:	2280      	movs	r2, #128	; 0x80
 80009d0:	0152      	lsls	r2, r2, #5
 80009d2:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80009d4:	003a      	movs	r2, r7
 80009d6:	4b3a      	ldr	r3, [pc, #232]	; (8000ac0 <MX_ADC_Init+0x190>)
 80009d8:	0011      	movs	r1, r2
 80009da:	0018      	movs	r0, r3
 80009dc:	f000 fe56 	bl	800168c <HAL_ADC_ConfigChannel>
 80009e0:	1e03      	subs	r3, r0, #0
 80009e2:	d001      	beq.n	80009e8 <MX_ADC_Init+0xb8>
  {
    Error_Handler();
 80009e4:	f000 f904 	bl	8000bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009e8:	003b      	movs	r3, r7
 80009ea:	4a37      	ldr	r2, [pc, #220]	; (8000ac8 <MX_ADC_Init+0x198>)
 80009ec:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80009ee:	003a      	movs	r2, r7
 80009f0:	4b33      	ldr	r3, [pc, #204]	; (8000ac0 <MX_ADC_Init+0x190>)
 80009f2:	0011      	movs	r1, r2
 80009f4:	0018      	movs	r0, r3
 80009f6:	f000 fe49 	bl	800168c <HAL_ADC_ConfigChannel>
 80009fa:	1e03      	subs	r3, r0, #0
 80009fc:	d001      	beq.n	8000a02 <MX_ADC_Init+0xd2>
  {
    Error_Handler();
 80009fe:	f000 f8f7 	bl	8000bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a02:	003b      	movs	r3, r7
 8000a04:	4a31      	ldr	r2, [pc, #196]	; (8000acc <MX_ADC_Init+0x19c>)
 8000a06:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a08:	003a      	movs	r2, r7
 8000a0a:	4b2d      	ldr	r3, [pc, #180]	; (8000ac0 <MX_ADC_Init+0x190>)
 8000a0c:	0011      	movs	r1, r2
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f000 fe3c 	bl	800168c <HAL_ADC_ConfigChannel>
 8000a14:	1e03      	subs	r3, r0, #0
 8000a16:	d001      	beq.n	8000a1c <MX_ADC_Init+0xec>
  {
    Error_Handler();
 8000a18:	f000 f8ea 	bl	8000bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a1c:	003b      	movs	r3, r7
 8000a1e:	4a2c      	ldr	r2, [pc, #176]	; (8000ad0 <MX_ADC_Init+0x1a0>)
 8000a20:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a22:	003a      	movs	r2, r7
 8000a24:	4b26      	ldr	r3, [pc, #152]	; (8000ac0 <MX_ADC_Init+0x190>)
 8000a26:	0011      	movs	r1, r2
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f000 fe2f 	bl	800168c <HAL_ADC_ConfigChannel>
 8000a2e:	1e03      	subs	r3, r0, #0
 8000a30:	d001      	beq.n	8000a36 <MX_ADC_Init+0x106>
  {
    Error_Handler();
 8000a32:	f000 f8dd 	bl	8000bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a36:	003b      	movs	r3, r7
 8000a38:	4a26      	ldr	r2, [pc, #152]	; (8000ad4 <MX_ADC_Init+0x1a4>)
 8000a3a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a3c:	003a      	movs	r2, r7
 8000a3e:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <MX_ADC_Init+0x190>)
 8000a40:	0011      	movs	r1, r2
 8000a42:	0018      	movs	r0, r3
 8000a44:	f000 fe22 	bl	800168c <HAL_ADC_ConfigChannel>
 8000a48:	1e03      	subs	r3, r0, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_ADC_Init+0x120>
  {
    Error_Handler();
 8000a4c:	f000 f8d0 	bl	8000bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a50:	003b      	movs	r3, r7
 8000a52:	4a21      	ldr	r2, [pc, #132]	; (8000ad8 <MX_ADC_Init+0x1a8>)
 8000a54:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a56:	003a      	movs	r2, r7
 8000a58:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <MX_ADC_Init+0x190>)
 8000a5a:	0011      	movs	r1, r2
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f000 fe15 	bl	800168c <HAL_ADC_ConfigChannel>
 8000a62:	1e03      	subs	r3, r0, #0
 8000a64:	d001      	beq.n	8000a6a <MX_ADC_Init+0x13a>
  {
    Error_Handler();
 8000a66:	f000 f8c3 	bl	8000bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000a6a:	003b      	movs	r3, r7
 8000a6c:	4a1b      	ldr	r2, [pc, #108]	; (8000adc <MX_ADC_Init+0x1ac>)
 8000a6e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a70:	003a      	movs	r2, r7
 8000a72:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <MX_ADC_Init+0x190>)
 8000a74:	0011      	movs	r1, r2
 8000a76:	0018      	movs	r0, r3
 8000a78:	f000 fe08 	bl	800168c <HAL_ADC_ConfigChannel>
 8000a7c:	1e03      	subs	r3, r0, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_ADC_Init+0x154>
  {
    Error_Handler();
 8000a80:	f000 f8b6 	bl	8000bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a84:	003b      	movs	r3, r7
 8000a86:	4a16      	ldr	r2, [pc, #88]	; (8000ae0 <MX_ADC_Init+0x1b0>)
 8000a88:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a8a:	003a      	movs	r2, r7
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <MX_ADC_Init+0x190>)
 8000a8e:	0011      	movs	r1, r2
 8000a90:	0018      	movs	r0, r3
 8000a92:	f000 fdfb 	bl	800168c <HAL_ADC_ConfigChannel>
 8000a96:	1e03      	subs	r3, r0, #0
 8000a98:	d001      	beq.n	8000a9e <MX_ADC_Init+0x16e>
  {
    Error_Handler();
 8000a9a:	f000 f8a9 	bl	8000bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000a9e:	003b      	movs	r3, r7
 8000aa0:	4a10      	ldr	r2, [pc, #64]	; (8000ae4 <MX_ADC_Init+0x1b4>)
 8000aa2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000aa4:	003a      	movs	r2, r7
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <MX_ADC_Init+0x190>)
 8000aa8:	0011      	movs	r1, r2
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f000 fdee 	bl	800168c <HAL_ADC_ConfigChannel>
 8000ab0:	1e03      	subs	r3, r0, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_ADC_Init+0x188>
  {
    Error_Handler();
 8000ab4:	f000 f89c 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000ab8:	46c0      	nop			; (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	b002      	add	sp, #8
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000208 	.word	0x20000208
 8000ac4:	40012400 	.word	0x40012400
 8000ac8:	04000002 	.word	0x04000002
 8000acc:	08000004 	.word	0x08000004
 8000ad0:	0c000008 	.word	0x0c000008
 8000ad4:	10000010 	.word	0x10000010
 8000ad8:	14000020 	.word	0x14000020
 8000adc:	18000040 	.word	0x18000040
 8000ae0:	1c000080 	.word	0x1c000080
 8000ae4:	24000200 	.word	0x24000200

08000ae8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aec:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <MX_USART2_UART_Init+0x6c>)
 8000aee:	4a1a      	ldr	r2, [pc, #104]	; (8000b58 <MX_USART2_UART_Init+0x70>)
 8000af0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2400;
 8000af2:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <MX_USART2_UART_Init+0x6c>)
 8000af4:	2296      	movs	r2, #150	; 0x96
 8000af6:	0112      	lsls	r2, r2, #4
 8000af8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000afa:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <MX_USART2_UART_Init+0x6c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_USART2_UART_Init+0x6c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000b06:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <MX_USART2_UART_Init+0x6c>)
 8000b08:	2280      	movs	r2, #128	; 0x80
 8000b0a:	00d2      	lsls	r2, r2, #3
 8000b0c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8000b0e:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_USART2_UART_Init+0x6c>)
 8000b10:	2208      	movs	r2, #8
 8000b12:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <MX_USART2_UART_Init+0x6c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <MX_USART2_UART_Init+0x6c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <MX_USART2_UART_Init+0x6c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <MX_USART2_UART_Init+0x6c>)
 8000b28:	2230      	movs	r2, #48	; 0x30
 8000b2a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_USART2_UART_Init+0x6c>)
 8000b2e:	2280      	movs	r2, #128	; 0x80
 8000b30:	0152      	lsls	r2, r2, #5
 8000b32:	639a      	str	r2, [r3, #56]	; 0x38
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <MX_USART2_UART_Init+0x6c>)
 8000b36:	2280      	movs	r2, #128	; 0x80
 8000b38:	0192      	lsls	r2, r2, #6
 8000b3a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <MX_USART2_UART_Init+0x6c>)
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f002 fa02 	bl	8002f48 <HAL_UART_Init>
 8000b44:	1e03      	subs	r3, r0, #0
 8000b46:	d001      	beq.n	8000b4c <MX_USART2_UART_Init+0x64>
  {
    Error_Handler();
 8000b48:	f000 f852 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	2000013c 	.word	0x2000013c
 8000b58:	40004400 	.word	0x40004400

08000b5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <MX_DMA_Init+0x38>)
 8000b64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <MX_DMA_Init+0x38>)
 8000b68:	2101      	movs	r1, #1
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	631a      	str	r2, [r3, #48]	; 0x30
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <MX_DMA_Init+0x38>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	2201      	movs	r2, #1
 8000b74:	4013      	ands	r3, r2
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	2009      	movs	r0, #9
 8000b80:	f000 ffc2 	bl	8001b08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b84:	2009      	movs	r0, #9
 8000b86:	f000 ffd4 	bl	8001b32 <HAL_NVIC_EnableIRQ>

}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	b002      	add	sp, #8
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	40021000 	.word	0x40021000

08000b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <MX_GPIO_Init+0x40>)
 8000ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <MX_GPIO_Init+0x40>)
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000baa:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <MX_GPIO_Init+0x40>)
 8000bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bae:	2201      	movs	r2, #1
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <MX_GPIO_Init+0x40>)
 8000bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bba:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <MX_GPIO_Init+0x40>)
 8000bbc:	2102      	movs	r1, #2
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bc2:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <MX_GPIO_Init+0x40>)
 8000bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc6:	2202      	movs	r2, #2
 8000bc8:	4013      	ands	r3, r2
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]

}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	b002      	add	sp, #8
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	40021000 	.word	0x40021000

08000bdc <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	scheduler();
 8000be4:	f7ff fd4e 	bl	8000684 <scheduler>
}
 8000be8:	46c0      	nop			; (mov r8, r8)
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b002      	add	sp, #8
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf4:	b672      	cpsid	i
}
 8000bf6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <Error_Handler+0x8>

08000bfa <GetTempCArray>:
 * 	@param	Pointer zum Array der im vorherigen Zyklus ermittelten Temperaturen
 * 	@ret	gesamtes Temperatur-Array
 */

uint8_t *GetTempCArray(uint8_t *tempC, uint8_t adcChannel, const uint16_t *LUT, uint16_t *ntcResistance, uint16_t *LUToldValues)
{
 8000bfa:	b590      	push	{r4, r7, lr}
 8000bfc:	b087      	sub	sp, #28
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	60f8      	str	r0, [r7, #12]
 8000c02:	607a      	str	r2, [r7, #4]
 8000c04:	603b      	str	r3, [r7, #0]
 8000c06:	230b      	movs	r3, #11
 8000c08:	18fb      	adds	r3, r7, r3
 8000c0a:	1c0a      	adds	r2, r1, #0
 8000c0c:	701a      	strb	r2, [r3, #0]
	uint16_t startIndex = 0;
 8000c0e:	2312      	movs	r3, #18
 8000c10:	18fb      	adds	r3, r7, r3
 8000c12:	2200      	movs	r2, #0
 8000c14:	801a      	strh	r2, [r3, #0]

	for(int i = 0; i < adcChannel; i++)
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	e026      	b.n	8000c6a <GetTempCArray+0x70>
	{
		// Zuweisung des Start-Indizes
		startIndex = LUToldValues[i];
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c22:	18d2      	adds	r2, r2, r3
 8000c24:	2012      	movs	r0, #18
 8000c26:	183b      	adds	r3, r7, r0
 8000c28:	8812      	ldrh	r2, [r2, #0]
 8000c2a:	801a      	strh	r2, [r3, #0]

		// Aufruf der Funktion, die den berechneten NTC-Widerstand mit dem LUT vergleicht
		tempC[i] = GetTempCfromLUT(LUT, ntcResistance[i], startIndex);
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	683a      	ldr	r2, [r7, #0]
 8000c32:	18d3      	adds	r3, r2, r3
 8000c34:	8819      	ldrh	r1, [r3, #0]
 8000c36:	183b      	adds	r3, r7, r0
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	b2d8      	uxtb	r0, r3
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	18d4      	adds	r4, r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	0002      	movs	r2, r0
 8000c46:	0018      	movs	r0, r3
 8000c48:	f000 f81a 	bl	8000c80 <GetTempCfromLUT>
 8000c4c:	0003      	movs	r3, r0
 8000c4e:	7023      	strb	r3, [r4, #0]

		// Speichern des LUT-Indizes (welcher zufällig auch der Temp. entspricht) als "Startwert" für den nächsten Zyklus
		LUToldValues[i] = tempC[i];
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	18d3      	adds	r3, r2, r3
 8000c56:	7819      	ldrb	r1, [r3, #0]
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c5e:	18d3      	adds	r3, r2, r3
 8000c60:	b28a      	uxth	r2, r1
 8000c62:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < adcChannel; i++)
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	3301      	adds	r3, #1
 8000c68:	617b      	str	r3, [r7, #20]
 8000c6a:	230b      	movs	r3, #11
 8000c6c:	18fb      	adds	r3, r7, r3
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	697a      	ldr	r2, [r7, #20]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	dbd2      	blt.n	8000c1c <GetTempCArray+0x22>
	}

	return tempC;
 8000c76:	68fb      	ldr	r3, [r7, #12]
}
 8000c78:	0018      	movs	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	b007      	add	sp, #28
 8000c7e:	bd90      	pop	{r4, r7, pc}

08000c80 <GetTempCfromLUT>:
 * 	@param	Übergabe des durch den ADC ermittelten Widerstands eines NTCs
 * 	@ret	ermittelte Temperatur in Grad Celsius
 */

uint8_t GetTempCfromLUT(const uint16_t *LUT, uint16_t ntcResistance, uint8_t startIndex)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	0008      	movs	r0, r1
 8000c8a:	0011      	movs	r1, r2
 8000c8c:	1cbb      	adds	r3, r7, #2
 8000c8e:	1c02      	adds	r2, r0, #0
 8000c90:	801a      	strh	r2, [r3, #0]
 8000c92:	1c7b      	adds	r3, r7, #1
 8000c94:	1c0a      	adds	r2, r1, #0
 8000c96:	701a      	strb	r2, [r3, #0]
	// int i = 0;
	uint8_t tempC;

	// zusätzl. Fkt. die den Wert "-1" im tempC-Array verbietet
	if(ntcResistance == 0)
 8000c98:	1cbb      	adds	r3, r7, #2
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d106      	bne.n	8000cae <GetTempCfromLUT+0x2e>
	{
		tempC = 0;
 8000ca0:	210f      	movs	r1, #15
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
		return tempC;
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	e052      	b.n	8000d54 <GetTempCfromLUT+0xd4>
	}
	else if(ntcResistance < LUT[0] && ntcResistance > LUT[151])
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	881b      	ldrh	r3, [r3, #0]
 8000cb2:	1cba      	adds	r2, r7, #2
 8000cb4:	8812      	ldrh	r2, [r2, #0]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d249      	bcs.n	8000d4e <GetTempCfromLUT+0xce>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	332f      	adds	r3, #47	; 0x2f
 8000cbe:	33ff      	adds	r3, #255	; 0xff
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	1cba      	adds	r2, r7, #2
 8000cc4:	8812      	ldrh	r2, [r2, #0]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d941      	bls.n	8000d4e <GetTempCfromLUT+0xce>
	{
		// "Suchalgorithmus"
		if(LUT[startIndex] > ntcResistance)
 8000cca:	1c7b      	adds	r3, r7, #1
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	18d3      	adds	r3, r2, r3
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	1cba      	adds	r2, r7, #2
 8000cd8:	8812      	ldrh	r2, [r2, #0]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d210      	bcs.n	8000d00 <GetTempCfromLUT+0x80>
		{
			while(ntcResistance < LUT[startIndex])
 8000cde:	e004      	b.n	8000cea <GetTempCfromLUT+0x6a>
			{
				startIndex++;
 8000ce0:	1c7b      	adds	r3, r7, #1
 8000ce2:	781a      	ldrb	r2, [r3, #0]
 8000ce4:	1c7b      	adds	r3, r7, #1
 8000ce6:	3201      	adds	r2, #1
 8000ce8:	701a      	strb	r2, [r3, #0]
			while(ntcResistance < LUT[startIndex])
 8000cea:	1c7b      	adds	r3, r7, #1
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	18d3      	adds	r3, r2, r3
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	1cba      	adds	r2, r7, #2
 8000cf8:	8812      	ldrh	r2, [r2, #0]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d3f0      	bcc.n	8000ce0 <GetTempCfromLUT+0x60>
 8000cfe:	e019      	b.n	8000d34 <GetTempCfromLUT+0xb4>
			}
		}
		else if(LUT[startIndex] < ntcResistance)
 8000d00:	1c7b      	adds	r3, r7, #1
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	18d3      	adds	r3, r2, r3
 8000d0a:	881b      	ldrh	r3, [r3, #0]
 8000d0c:	1cba      	adds	r2, r7, #2
 8000d0e:	8812      	ldrh	r2, [r2, #0]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d90f      	bls.n	8000d34 <GetTempCfromLUT+0xb4>
		{
			while(ntcResistance > LUT[startIndex])
 8000d14:	e004      	b.n	8000d20 <GetTempCfromLUT+0xa0>
			{
				startIndex--;
 8000d16:	1c7b      	adds	r3, r7, #1
 8000d18:	781a      	ldrb	r2, [r3, #0]
 8000d1a:	1c7b      	adds	r3, r7, #1
 8000d1c:	3a01      	subs	r2, #1
 8000d1e:	701a      	strb	r2, [r3, #0]
			while(ntcResistance > LUT[startIndex])
 8000d20:	1c7b      	adds	r3, r7, #1
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	18d3      	adds	r3, r2, r3
 8000d2a:	881b      	ldrh	r3, [r3, #0]
 8000d2c:	1cba      	adds	r2, r7, #2
 8000d2e:	8812      	ldrh	r2, [r2, #0]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d8f0      	bhi.n	8000d16 <GetTempCfromLUT+0x96>
			}
		}

		// Temperaturzuweisung
		tempC = startIndex;
 8000d34:	210f      	movs	r1, #15
 8000d36:	187b      	adds	r3, r7, r1
 8000d38:	1c7a      	adds	r2, r7, #1
 8000d3a:	7812      	ldrb	r2, [r2, #0]
 8000d3c:	701a      	strb	r2, [r3, #0]

		// Plausibilitätskontrolle
		if(tempC < 0 || tempC > 150)
 8000d3e:	000a      	movs	r2, r1
 8000d40:	18bb      	adds	r3, r7, r2
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b96      	cmp	r3, #150	; 0x96
 8000d46:	d902      	bls.n	8000d4e <GetTempCfromLUT+0xce>
		{
			tempC = 255;
 8000d48:	18bb      	adds	r3, r7, r2
 8000d4a:	22ff      	movs	r2, #255	; 0xff
 8000d4c:	701a      	strb	r2, [r3, #0]
		}
	}
	return tempC;
 8000d4e:	230f      	movs	r3, #15
 8000d50:	18fb      	adds	r3, r7, r3
 8000d52:	781b      	ldrb	r3, [r3, #0]
}
 8000d54:	0018      	movs	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	b004      	add	sp, #16
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <HAL_MspInit+0x24>)
 8000d62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_MspInit+0x24>)
 8000d66:	2101      	movs	r1, #1
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <HAL_MspInit+0x24>)
 8000d6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d70:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <HAL_MspInit+0x24>)
 8000d72:	2180      	movs	r1, #128	; 0x80
 8000d74:	0549      	lsls	r1, r1, #21
 8000d76:	430a      	orrs	r2, r1
 8000d78:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40021000 	.word	0x40021000

08000d84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d84:	b590      	push	{r4, r7, lr}
 8000d86:	b08b      	sub	sp, #44	; 0x2c
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	2414      	movs	r4, #20
 8000d8e:	193b      	adds	r3, r7, r4
 8000d90:	0018      	movs	r0, r3
 8000d92:	2314      	movs	r3, #20
 8000d94:	001a      	movs	r2, r3
 8000d96:	2100      	movs	r1, #0
 8000d98:	f002 fe1e 	bl	80039d8 <memset>
  if(hadc->Instance==ADC1)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a38      	ldr	r2, [pc, #224]	; (8000e84 <HAL_ADC_MspInit+0x100>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d169      	bne.n	8000e7a <HAL_ADC_MspInit+0xf6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000da6:	4b38      	ldr	r3, [pc, #224]	; (8000e88 <HAL_ADC_MspInit+0x104>)
 8000da8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000daa:	4b37      	ldr	r3, [pc, #220]	; (8000e88 <HAL_ADC_MspInit+0x104>)
 8000dac:	2180      	movs	r1, #128	; 0x80
 8000dae:	0089      	lsls	r1, r1, #2
 8000db0:	430a      	orrs	r2, r1
 8000db2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db4:	4b34      	ldr	r3, [pc, #208]	; (8000e88 <HAL_ADC_MspInit+0x104>)
 8000db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000db8:	4b33      	ldr	r3, [pc, #204]	; (8000e88 <HAL_ADC_MspInit+0x104>)
 8000dba:	2101      	movs	r1, #1
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dc0:	4b31      	ldr	r3, [pc, #196]	; (8000e88 <HAL_ADC_MspInit+0x104>)
 8000dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dcc:	4b2e      	ldr	r3, [pc, #184]	; (8000e88 <HAL_ADC_MspInit+0x104>)
 8000dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dd0:	4b2d      	ldr	r3, [pc, #180]	; (8000e88 <HAL_ADC_MspInit+0x104>)
 8000dd2:	2102      	movs	r1, #2
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dd8:	4b2b      	ldr	r3, [pc, #172]	; (8000e88 <HAL_ADC_MspInit+0x104>)
 8000dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ddc:	2202      	movs	r2, #2
 8000dde:	4013      	ands	r3, r2
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000de4:	193b      	adds	r3, r7, r4
 8000de6:	22ff      	movs	r2, #255	; 0xff
 8000de8:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dea:	193b      	adds	r3, r7, r4
 8000dec:	2203      	movs	r2, #3
 8000dee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	193b      	adds	r3, r7, r4
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	193a      	adds	r2, r7, r4
 8000df8:	23a0      	movs	r3, #160	; 0xa0
 8000dfa:	05db      	lsls	r3, r3, #23
 8000dfc:	0011      	movs	r1, r2
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f001 f86e 	bl	8001ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e04:	193b      	adds	r3, r7, r4
 8000e06:	2202      	movs	r2, #2
 8000e08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e0a:	193b      	adds	r3, r7, r4
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	193b      	adds	r3, r7, r4
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e16:	193b      	adds	r3, r7, r4
 8000e18:	4a1c      	ldr	r2, [pc, #112]	; (8000e8c <HAL_ADC_MspInit+0x108>)
 8000e1a:	0019      	movs	r1, r3
 8000e1c:	0010      	movs	r0, r2
 8000e1e:	f001 f85f 	bl	8001ee0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000e22:	4b1b      	ldr	r3, [pc, #108]	; (8000e90 <HAL_ADC_MspInit+0x10c>)
 8000e24:	4a1b      	ldr	r2, [pc, #108]	; (8000e94 <HAL_ADC_MspInit+0x110>)
 8000e26:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8000e28:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <HAL_ADC_MspInit+0x10c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e2e:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <HAL_ADC_MspInit+0x10c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e34:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <HAL_ADC_MspInit+0x10c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000e3a:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <HAL_ADC_MspInit+0x10c>)
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e40:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <HAL_ADC_MspInit+0x10c>)
 8000e42:	2280      	movs	r2, #128	; 0x80
 8000e44:	0052      	lsls	r2, r2, #1
 8000e46:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <HAL_ADC_MspInit+0x10c>)
 8000e4a:	2280      	movs	r2, #128	; 0x80
 8000e4c:	00d2      	lsls	r2, r2, #3
 8000e4e:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000e50:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <HAL_ADC_MspInit+0x10c>)
 8000e52:	2220      	movs	r2, #32
 8000e54:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <HAL_ADC_MspInit+0x10c>)
 8000e58:	22c0      	movs	r2, #192	; 0xc0
 8000e5a:	0192      	lsls	r2, r2, #6
 8000e5c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <HAL_ADC_MspInit+0x10c>)
 8000e60:	0018      	movs	r0, r3
 8000e62:	f000 fe83 	bl	8001b6c <HAL_DMA_Init>
 8000e66:	1e03      	subs	r3, r0, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_ADC_MspInit+0xea>
    {
      Error_Handler();
 8000e6a:	f7ff fec1 	bl	8000bf0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a07      	ldr	r2, [pc, #28]	; (8000e90 <HAL_ADC_MspInit+0x10c>)
 8000e72:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_ADC_MspInit+0x10c>)
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b00b      	add	sp, #44	; 0x2c
 8000e80:	bd90      	pop	{r4, r7, pc}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	40012400 	.word	0x40012400
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	50000400 	.word	0x50000400
 8000e90:	200001c0 	.word	0x200001c0
 8000e94:	40020008 	.word	0x40020008

08000e98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e98:	b590      	push	{r4, r7, lr}
 8000e9a:	b089      	sub	sp, #36	; 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	240c      	movs	r4, #12
 8000ea2:	193b      	adds	r3, r7, r4
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	2314      	movs	r3, #20
 8000ea8:	001a      	movs	r2, r3
 8000eaa:	2100      	movs	r1, #0
 8000eac:	f002 fd94 	bl	80039d8 <memset>
  if(huart->Instance==USART2)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a18      	ldr	r2, [pc, #96]	; (8000f18 <HAL_UART_MspInit+0x80>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d12a      	bne.n	8000f10 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eba:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <HAL_UART_MspInit+0x84>)
 8000ebc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ebe:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <HAL_UART_MspInit+0x84>)
 8000ec0:	2180      	movs	r1, #128	; 0x80
 8000ec2:	0289      	lsls	r1, r1, #10
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec8:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <HAL_UART_MspInit+0x84>)
 8000eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ecc:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <HAL_UART_MspInit+0x84>)
 8000ece:	2101      	movs	r1, #1
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ed4:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <HAL_UART_MspInit+0x84>)
 8000ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed8:	2201      	movs	r2, #1
 8000eda:	4013      	ands	r3, r2
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA9     ------> USART2_TX
    PA10     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ee0:	193b      	adds	r3, r7, r4
 8000ee2:	22c0      	movs	r2, #192	; 0xc0
 8000ee4:	00d2      	lsls	r2, r2, #3
 8000ee6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	0021      	movs	r1, r4
 8000eea:	187b      	adds	r3, r7, r1
 8000eec:	2202      	movs	r2, #2
 8000eee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	187b      	adds	r3, r7, r1
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef6:	187b      	adds	r3, r7, r1
 8000ef8:	2203      	movs	r2, #3
 8000efa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000efc:	187b      	adds	r3, r7, r1
 8000efe:	2204      	movs	r2, #4
 8000f00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f02:	187a      	adds	r2, r7, r1
 8000f04:	23a0      	movs	r3, #160	; 0xa0
 8000f06:	05db      	lsls	r3, r3, #23
 8000f08:	0011      	movs	r1, r2
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f000 ffe8 	bl	8001ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f10:	46c0      	nop			; (mov r8, r8)
 8000f12:	46bd      	mov	sp, r7
 8000f14:	b009      	add	sp, #36	; 0x24
 8000f16:	bd90      	pop	{r4, r7, pc}
 8000f18:	40004400 	.word	0x40004400
 8000f1c:	40021000 	.word	0x40021000

08000f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <NMI_Handler+0x4>

08000f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <HardFault_Handler+0x4>

08000f2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f30:	46c0      	nop			; (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f44:	f000 f980 	bl	8001248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f48:	46c0      	nop			; (mov r8, r8)
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000f54:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <DMA1_Channel1_IRQHandler+0x14>)
 8000f56:	0018      	movs	r0, r3
 8000f58:	f000 fee6 	bl	8001d28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f5c:	46c0      	nop			; (mov r8, r8)
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	200001c0 	.word	0x200001c0

08000f68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f70:	4a14      	ldr	r2, [pc, #80]	; (8000fc4 <_sbrk+0x5c>)
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <_sbrk+0x60>)
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f7c:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <_sbrk+0x64>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d102      	bne.n	8000f8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f84:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <_sbrk+0x64>)
 8000f86:	4a12      	ldr	r2, [pc, #72]	; (8000fd0 <_sbrk+0x68>)
 8000f88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f8a:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <_sbrk+0x64>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	18d3      	adds	r3, r2, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d207      	bcs.n	8000fa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f98:	f002 fcf4 	bl	8003984 <__errno>
 8000f9c:	0003      	movs	r3, r0
 8000f9e:	220c      	movs	r2, #12
 8000fa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	425b      	negs	r3, r3
 8000fa6:	e009      	b.n	8000fbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <_sbrk+0x64>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fae:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <_sbrk+0x64>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	18d2      	adds	r2, r2, r3
 8000fb6:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <_sbrk+0x64>)
 8000fb8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000fba:	68fb      	ldr	r3, [r7, #12]
}
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	b006      	add	sp, #24
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20002000 	.word	0x20002000
 8000fc8:	00000400 	.word	0x00000400
 8000fcc:	200000c0 	.word	0x200000c0
 8000fd0:	20000278 	.word	0x20000278

08000fd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd8:	46c0      	nop			; (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <TxUART>:
 * 	@brief Senden der NTC-Nummer, der Temperatur, des zugehörigen CRCs & mehrerer "Stop"-Zeichen
 * 		***** NTC1 * 25°C * CRC1 ** NTC2 * 30°C * CRC2 ** ... **********
 */

void TxUART(uint8_t adcChannels, uint8_t *tempC, uint32_t millis)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	230f      	movs	r3, #15
 8000fec:	18fb      	adds	r3, r7, r3
 8000fee:	1c02      	adds	r2, r0, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
	uint8_t ntcNumber = 0;
 8000ff2:	231b      	movs	r3, #27
 8000ff4:	18fb      	adds	r3, r7, r3
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]

	// "Header" -> sollte von auswertender Software erkannt werden
	blankTxUART(5);
 8000ffa:	2005      	movs	r0, #5
 8000ffc:	f000 f860 	bl	80010c0 <blankTxUART>

	// "Timer-Information"
	millis = HAL_GetTick();
 8001000:	f000 f934 	bl	800126c <HAL_GetTick>
 8001004:	0003      	movs	r3, r0
 8001006:	607b      	str	r3, [r7, #4]
	timeTxUART(millis);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	0018      	movs	r0, r3
 800100c:	f000 f87e 	bl	800110c <timeTxUART>
	blankTxUART(2);
 8001010:	2002      	movs	r0, #2
 8001012:	f000 f855 	bl	80010c0 <blankTxUART>


	for(int j = 0; j < adcChannels; j++)
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
 800101a:	e011      	b.n	8001040 <TxUART+0x60>

		// ntcNumberTxUART(ntcNumber);
		// blankTxUART(1);

		// Übergabe der Temperatur aus dem Array an temp. Integer
		uint8_t *tmpTempC = &tempC[j];
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	18d3      	adds	r3, r2, r3
 8001022:	617b      	str	r3, [r7, #20]

		// Aufruf der eigentlichen Übertragungsfkt.
		singleTempTxUART(ntcNumber, tmpTempC);
 8001024:	697a      	ldr	r2, [r7, #20]
 8001026:	231b      	movs	r3, #27
 8001028:	18fb      	adds	r3, r7, r3
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	0011      	movs	r1, r2
 800102e:	0018      	movs	r0, r3
 8001030:	f000 f81e 	bl	8001070 <singleTempTxUART>

		blankTxUART(2);
 8001034:	2002      	movs	r0, #2
 8001036:	f000 f843 	bl	80010c0 <blankTxUART>
	for(int j = 0; j < adcChannels; j++)
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3301      	adds	r3, #1
 800103e:	61fb      	str	r3, [r7, #28]
 8001040:	230f      	movs	r3, #15
 8001042:	18fb      	adds	r3, r7, r3
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	69fa      	ldr	r2, [r7, #28]
 8001048:	429a      	cmp	r2, r3
 800104a:	dbe7      	blt.n	800101c <TxUART+0x3c>
	}

	// Ende der Nachricht -> NewLine um in Matlab mit den Daten besser umgehen zu können
	uint8_t endLine[2] = "\n\r";			// evtl. auch CR/ASCII-13 notw. um an Zeilenanfang zu gelangen
 800104c:	2110      	movs	r1, #16
 800104e:	187b      	adds	r3, r7, r1
 8001050:	4a05      	ldr	r2, [pc, #20]	; (8001068 <TxUART+0x88>)
 8001052:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, endLine, sizeof(endLine), 10);
 8001054:	1879      	adds	r1, r7, r1
 8001056:	4805      	ldr	r0, [pc, #20]	; (800106c <TxUART+0x8c>)
 8001058:	230a      	movs	r3, #10
 800105a:	2202      	movs	r2, #2
 800105c:	f001 ffc8 	bl	8002ff0 <HAL_UART_Transmit>

}
 8001060:	46c0      	nop			; (mov r8, r8)
 8001062:	46bd      	mov	sp, r7
 8001064:	b008      	add	sp, #32
 8001066:	bd80      	pop	{r7, pc}
 8001068:	00000d0a 	.word	0x00000d0a
 800106c:	2000013c 	.word	0x2000013c

08001070 <singleTempTxUART>:


void singleTempTxUART(uint8_t ntcNumber, uint8_t *tempC)
{
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	0002      	movs	r2, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	1dfb      	adds	r3, r7, #7
 800107c:	701a      	strb	r2, [r3, #0]
	uint8_t bufferTempSize;
	char bufferTemp[3];

	bufferTempSize = sprintf(bufferTemp, "%d", tempC[ntcNumber]);
 800107e:	1dfb      	adds	r3, r7, #7
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	683a      	ldr	r2, [r7, #0]
 8001084:	18d3      	adds	r3, r2, r3
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	001a      	movs	r2, r3
 800108a:	490b      	ldr	r1, [pc, #44]	; (80010b8 <singleTempTxUART+0x48>)
 800108c:	240c      	movs	r4, #12
 800108e:	193b      	adds	r3, r7, r4
 8001090:	0018      	movs	r0, r3
 8001092:	f002 fca9 	bl	80039e8 <siprintf>
 8001096:	0002      	movs	r2, r0
 8001098:	210f      	movs	r1, #15
 800109a:	187b      	adds	r3, r7, r1
 800109c:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart2, (uint8_t *) bufferTemp, bufferTempSize, 10);
 800109e:	187b      	adds	r3, r7, r1
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	1939      	adds	r1, r7, r4
 80010a6:	4805      	ldr	r0, [pc, #20]	; (80010bc <singleTempTxUART+0x4c>)
 80010a8:	230a      	movs	r3, #10
 80010aa:	f001 ffa1 	bl	8002ff0 <HAL_UART_Transmit>
}
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	46bd      	mov	sp, r7
 80010b2:	b005      	add	sp, #20
 80010b4:	bd90      	pop	{r4, r7, pc}
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	0800424c 	.word	0x0800424c
 80010bc:	2000013c 	.word	0x2000013c

080010c0 <blankTxUART>:
 * 	@brief "Zwischenframe", Häufigkeit des Vorkommens ermöglicht Schluss auf Fortschritt der Nachricht
 * 	@param	Anzahl der Zwischenframes (Stern in ASCII-Codierung)
 */

void blankTxUART(uint8_t howmany)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	0002      	movs	r2, r0
 80010c8:	1dfb      	adds	r3, r7, #7
 80010ca:	701a      	strb	r2, [r3, #0]
	uint8_t divider[1] = " ";
 80010cc:	2308      	movs	r3, #8
 80010ce:	18fb      	adds	r3, r7, r3
 80010d0:	4a0c      	ldr	r2, [pc, #48]	; (8001104 <blankTxUART+0x44>)
 80010d2:	7812      	ldrb	r2, [r2, #0]
 80010d4:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < howmany; i++)
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	e009      	b.n	80010f0 <blankTxUART+0x30>
	{
		HAL_UART_Transmit(&huart2, divider, sizeof(divider), 10);
 80010dc:	2308      	movs	r3, #8
 80010de:	18f9      	adds	r1, r7, r3
 80010e0:	4809      	ldr	r0, [pc, #36]	; (8001108 <blankTxUART+0x48>)
 80010e2:	230a      	movs	r3, #10
 80010e4:	2201      	movs	r2, #1
 80010e6:	f001 ff83 	bl	8002ff0 <HAL_UART_Transmit>
	for(int i = 0; i < howmany; i++)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	3301      	adds	r3, #1
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	1dfb      	adds	r3, r7, #7
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	68fa      	ldr	r2, [r7, #12]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	dbf0      	blt.n	80010dc <blankTxUART+0x1c>
	}
}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	46c0      	nop			; (mov r8, r8)
 80010fe:	46bd      	mov	sp, r7
 8001100:	b004      	add	sp, #16
 8001102:	bd80      	pop	{r7, pc}
 8001104:	08004258 	.word	0x08004258
 8001108:	2000013c 	.word	0x2000013c

0800110c <timeTxUART>:
 * 	@param	Nummer des entsprechenden NTCs (ganzes Array wird übergeben)
 * 	@param	Array mit generierten CRC-Werten
 */

void timeTxUART(uint32_t millis)
{
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b087      	sub	sp, #28
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	uint8_t bufferTimeSize;
	char bufferTime[8];

	bufferTimeSize = sprintf(bufferTime, "%ld", millis);
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	490b      	ldr	r1, [pc, #44]	; (8001144 <timeTxUART+0x38>)
 8001118:	240c      	movs	r4, #12
 800111a:	193b      	adds	r3, r7, r4
 800111c:	0018      	movs	r0, r3
 800111e:	f002 fc63 	bl	80039e8 <siprintf>
 8001122:	0002      	movs	r2, r0
 8001124:	2117      	movs	r1, #23
 8001126:	187b      	adds	r3, r7, r1
 8001128:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart2, (uint8_t *)bufferTime, bufferTimeSize, 10);
 800112a:	187b      	adds	r3, r7, r1
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	b29a      	uxth	r2, r3
 8001130:	1939      	adds	r1, r7, r4
 8001132:	4805      	ldr	r0, [pc, #20]	; (8001148 <timeTxUART+0x3c>)
 8001134:	230a      	movs	r3, #10
 8001136:	f001 ff5b 	bl	8002ff0 <HAL_UART_Transmit>
}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	46bd      	mov	sp, r7
 800113e:	b007      	add	sp, #28
 8001140:	bd90      	pop	{r4, r7, pc}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	0800425c 	.word	0x0800425c
 8001148:	2000013c 	.word	0x2000013c

0800114c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800114c:	480d      	ldr	r0, [pc, #52]	; (8001184 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800114e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001150:	480d      	ldr	r0, [pc, #52]	; (8001188 <LoopForever+0x6>)
  ldr r1, =_edata
 8001152:	490e      	ldr	r1, [pc, #56]	; (800118c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001154:	4a0e      	ldr	r2, [pc, #56]	; (8001190 <LoopForever+0xe>)
  movs r3, #0
 8001156:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001158:	e002      	b.n	8001160 <LoopCopyDataInit>

0800115a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800115c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115e:	3304      	adds	r3, #4

08001160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001164:	d3f9      	bcc.n	800115a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001166:	4a0b      	ldr	r2, [pc, #44]	; (8001194 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001168:	4c0b      	ldr	r4, [pc, #44]	; (8001198 <LoopForever+0x16>)
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800116c:	e001      	b.n	8001172 <LoopFillZerobss>

0800116e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001170:	3204      	adds	r2, #4

08001172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001174:	d3fb      	bcc.n	800116e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001176:	f7ff ff2d 	bl	8000fd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800117a:	f002 fc09 	bl	8003990 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800117e:	f7ff fb55 	bl	800082c <main>

08001182 <LoopForever>:

LoopForever:
    b LoopForever
 8001182:	e7fe      	b.n	8001182 <LoopForever>
   ldr   r0, =_estack
 8001184:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800118c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001190:	08004440 	.word	0x08004440
  ldr r2, =_sbss
 8001194:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001198:	20000278 	.word	0x20000278

0800119c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800119c:	e7fe      	b.n	800119c <ADC1_COMP_IRQHandler>
	...

080011a0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011a6:	1dfb      	adds	r3, r7, #7
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80011ac:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <HAL_Init+0x3c>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <HAL_Init+0x3c>)
 80011b2:	2140      	movs	r1, #64	; 0x40
 80011b4:	430a      	orrs	r2, r1
 80011b6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011b8:	2000      	movs	r0, #0
 80011ba:	f000 f811 	bl	80011e0 <HAL_InitTick>
 80011be:	1e03      	subs	r3, r0, #0
 80011c0:	d003      	beq.n	80011ca <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80011c2:	1dfb      	adds	r3, r7, #7
 80011c4:	2201      	movs	r2, #1
 80011c6:	701a      	strb	r2, [r3, #0]
 80011c8:	e001      	b.n	80011ce <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011ca:	f7ff fdc7 	bl	8000d5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011ce:	1dfb      	adds	r3, r7, #7
 80011d0:	781b      	ldrb	r3, [r3, #0]
}
 80011d2:	0018      	movs	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	b002      	add	sp, #8
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	40022000 	.word	0x40022000

080011e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <HAL_InitTick+0x5c>)
 80011ea:	681c      	ldr	r4, [r3, #0]
 80011ec:	4b14      	ldr	r3, [pc, #80]	; (8001240 <HAL_InitTick+0x60>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	0019      	movs	r1, r3
 80011f2:	23fa      	movs	r3, #250	; 0xfa
 80011f4:	0098      	lsls	r0, r3, #2
 80011f6:	f7fe ff91 	bl	800011c <__udivsi3>
 80011fa:	0003      	movs	r3, r0
 80011fc:	0019      	movs	r1, r3
 80011fe:	0020      	movs	r0, r4
 8001200:	f7fe ff8c 	bl	800011c <__udivsi3>
 8001204:	0003      	movs	r3, r0
 8001206:	0018      	movs	r0, r3
 8001208:	f000 fca3 	bl	8001b52 <HAL_SYSTICK_Config>
 800120c:	1e03      	subs	r3, r0, #0
 800120e:	d001      	beq.n	8001214 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e00f      	b.n	8001234 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b03      	cmp	r3, #3
 8001218:	d80b      	bhi.n	8001232 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	2301      	movs	r3, #1
 800121e:	425b      	negs	r3, r3
 8001220:	2200      	movs	r2, #0
 8001222:	0018      	movs	r0, r3
 8001224:	f000 fc70 	bl	8001b08 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_InitTick+0x64>)
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	e000      	b.n	8001234 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
}
 8001234:	0018      	movs	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	b003      	add	sp, #12
 800123a:	bd90      	pop	{r4, r7, pc}
 800123c:	20000014 	.word	0x20000014
 8001240:	2000001c 	.word	0x2000001c
 8001244:	20000018 	.word	0x20000018

08001248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <HAL_IncTick+0x1c>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	001a      	movs	r2, r3
 8001252:	4b05      	ldr	r3, [pc, #20]	; (8001268 <HAL_IncTick+0x20>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	18d2      	adds	r2, r2, r3
 8001258:	4b03      	ldr	r3, [pc, #12]	; (8001268 <HAL_IncTick+0x20>)
 800125a:	601a      	str	r2, [r3, #0]
}
 800125c:	46c0      	nop			; (mov r8, r8)
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	2000001c 	.word	0x2000001c
 8001268:	20000264 	.word	0x20000264

0800126c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  return uwTick;
 8001270:	4b02      	ldr	r3, [pc, #8]	; (800127c <HAL_GetTick+0x10>)
 8001272:	681b      	ldr	r3, [r3, #0]
}
 8001274:	0018      	movs	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	20000264 	.word	0x20000264

08001280 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e159      	b.n	8001546 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001296:	2b00      	cmp	r3, #0
 8001298:	d10a      	bne.n	80012b0 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2250      	movs	r2, #80	; 0x50
 80012a4:	2100      	movs	r1, #0
 80012a6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	0018      	movs	r0, r3
 80012ac:	f7ff fd6a 	bl	8000d84 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012b4:	2210      	movs	r2, #16
 80012b6:	4013      	ands	r3, r2
 80012b8:	2b10      	cmp	r3, #16
 80012ba:	d005      	beq.n	80012c8 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	2204      	movs	r2, #4
 80012c4:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80012c6:	d00b      	beq.n	80012e0 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012cc:	2210      	movs	r2, #16
 80012ce:	431a      	orrs	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2250      	movs	r2, #80	; 0x50
 80012d8:	2100      	movs	r1, #0
 80012da:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e132      	b.n	8001546 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e4:	4a9a      	ldr	r2, [pc, #616]	; (8001550 <HAL_ADC_Init+0x2d0>)
 80012e6:	4013      	ands	r3, r2
 80012e8:	2202      	movs	r2, #2
 80012ea:	431a      	orrs	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	2203      	movs	r2, #3
 80012f8:	4013      	ands	r3, r2
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d108      	bne.n	8001310 <HAL_ADC_Init+0x90>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2201      	movs	r2, #1
 8001306:	4013      	ands	r3, r2
 8001308:	2b01      	cmp	r3, #1
 800130a:	d101      	bne.n	8001310 <HAL_ADC_Init+0x90>
 800130c:	2301      	movs	r3, #1
 800130e:	e000      	b.n	8001312 <HAL_ADC_Init+0x92>
 8001310:	2300      	movs	r3, #0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d149      	bne.n	80013aa <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685a      	ldr	r2, [r3, #4]
 800131a:	23c0      	movs	r3, #192	; 0xc0
 800131c:	061b      	lsls	r3, r3, #24
 800131e:	429a      	cmp	r2, r3
 8001320:	d00b      	beq.n	800133a <HAL_ADC_Init+0xba>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685a      	ldr	r2, [r3, #4]
 8001326:	2380      	movs	r3, #128	; 0x80
 8001328:	05db      	lsls	r3, r3, #23
 800132a:	429a      	cmp	r2, r3
 800132c:	d005      	beq.n	800133a <HAL_ADC_Init+0xba>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	2380      	movs	r3, #128	; 0x80
 8001334:	061b      	lsls	r3, r3, #24
 8001336:	429a      	cmp	r2, r3
 8001338:	d111      	bne.n	800135e <HAL_ADC_Init+0xde>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	691a      	ldr	r2, [r3, #16]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	0092      	lsls	r2, r2, #2
 8001346:	0892      	lsrs	r2, r2, #2
 8001348:	611a      	str	r2, [r3, #16]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6919      	ldr	r1, [r3, #16]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	430a      	orrs	r2, r1
 800135a:	611a      	str	r2, [r3, #16]
 800135c:	e014      	b.n	8001388 <HAL_ADC_Init+0x108>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	691a      	ldr	r2, [r3, #16]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	0092      	lsls	r2, r2, #2
 800136a:	0892      	lsrs	r2, r2, #2
 800136c:	611a      	str	r2, [r3, #16]
 800136e:	4b79      	ldr	r3, [pc, #484]	; (8001554 <HAL_ADC_Init+0x2d4>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	4b78      	ldr	r3, [pc, #480]	; (8001554 <HAL_ADC_Init+0x2d4>)
 8001374:	4978      	ldr	r1, [pc, #480]	; (8001558 <HAL_ADC_Init+0x2d8>)
 8001376:	400a      	ands	r2, r1
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	4b76      	ldr	r3, [pc, #472]	; (8001554 <HAL_ADC_Init+0x2d4>)
 800137c:	6819      	ldr	r1, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	4b74      	ldr	r3, [pc, #464]	; (8001554 <HAL_ADC_Init+0x2d4>)
 8001384:	430a      	orrs	r2, r1
 8001386:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68da      	ldr	r2, [r3, #12]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2118      	movs	r1, #24
 8001394:	438a      	bics	r2, r1
 8001396:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	68d9      	ldr	r1, [r3, #12]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	430a      	orrs	r2, r1
 80013a8:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80013aa:	4b6a      	ldr	r3, [pc, #424]	; (8001554 <HAL_ADC_Init+0x2d4>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	4b69      	ldr	r3, [pc, #420]	; (8001554 <HAL_ADC_Init+0x2d4>)
 80013b0:	496a      	ldr	r1, [pc, #424]	; (800155c <HAL_ADC_Init+0x2dc>)
 80013b2:	400a      	ands	r2, r1
 80013b4:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80013b6:	4b67      	ldr	r3, [pc, #412]	; (8001554 <HAL_ADC_Init+0x2d4>)
 80013b8:	6819      	ldr	r1, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013be:	065a      	lsls	r2, r3, #25
 80013c0:	4b64      	ldr	r3, [pc, #400]	; (8001554 <HAL_ADC_Init+0x2d4>)
 80013c2:	430a      	orrs	r2, r1
 80013c4:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	2380      	movs	r3, #128	; 0x80
 80013ce:	055b      	lsls	r3, r3, #21
 80013d0:	4013      	ands	r3, r2
 80013d2:	d108      	bne.n	80013e6 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2180      	movs	r1, #128	; 0x80
 80013e0:	0549      	lsls	r1, r1, #21
 80013e2:	430a      	orrs	r2, r1
 80013e4:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	68da      	ldr	r2, [r3, #12]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	495b      	ldr	r1, [pc, #364]	; (8001560 <HAL_ADC_Init+0x2e0>)
 80013f2:	400a      	ands	r2, r1
 80013f4:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	68d9      	ldr	r1, [r3, #12]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	2b02      	cmp	r3, #2
 8001406:	d101      	bne.n	800140c <HAL_ADC_Init+0x18c>
 8001408:	2304      	movs	r3, #4
 800140a:	e000      	b.n	800140e <HAL_ADC_Init+0x18e>
 800140c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800140e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2020      	movs	r0, #32
 8001414:	5c1b      	ldrb	r3, [r3, r0]
 8001416:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001418:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	202c      	movs	r0, #44	; 0x2c
 800141e:	5c1b      	ldrb	r3, [r3, r0]
 8001420:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001422:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001428:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001430:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001438:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	430a      	orrs	r2, r1
 8001440:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001446:	23c2      	movs	r3, #194	; 0xc2
 8001448:	33ff      	adds	r3, #255	; 0xff
 800144a:	429a      	cmp	r2, r3
 800144c:	d00b      	beq.n	8001466 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	68d9      	ldr	r1, [r3, #12]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800145c:	431a      	orrs	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	430a      	orrs	r2, r1
 8001464:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2221      	movs	r2, #33	; 0x21
 800146a:	5c9b      	ldrb	r3, [r3, r2]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d11a      	bne.n	80014a6 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2220      	movs	r2, #32
 8001474:	5c9b      	ldrb	r3, [r3, r2]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d109      	bne.n	800148e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68da      	ldr	r2, [r3, #12]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2180      	movs	r1, #128	; 0x80
 8001486:	0249      	lsls	r1, r1, #9
 8001488:	430a      	orrs	r2, r1
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	e00b      	b.n	80014a6 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001492:	2220      	movs	r2, #32
 8001494:	431a      	orrs	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149e:	2201      	movs	r2, #1
 80014a0:	431a      	orrs	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d11f      	bne.n	80014ee <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	691a      	ldr	r2, [r3, #16]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	492a      	ldr	r1, [pc, #168]	; (8001564 <HAL_ADC_Init+0x2e4>)
 80014ba:	400a      	ands	r2, r1
 80014bc:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6919      	ldr	r1, [r3, #16]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80014cc:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80014d2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	430a      	orrs	r2, r1
 80014da:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	691a      	ldr	r2, [r3, #16]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2101      	movs	r1, #1
 80014e8:	430a      	orrs	r2, r1
 80014ea:	611a      	str	r2, [r3, #16]
 80014ec:	e00e      	b.n	800150c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	2201      	movs	r2, #1
 80014f6:	4013      	ands	r3, r2
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d107      	bne.n	800150c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	691a      	ldr	r2, [r3, #16]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2101      	movs	r1, #1
 8001508:	438a      	bics	r2, r1
 800150a:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	695a      	ldr	r2, [r3, #20]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2107      	movs	r1, #7
 8001518:	438a      	bics	r2, r1
 800151a:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6959      	ldr	r1, [r3, #20]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	430a      	orrs	r2, r1
 800152c:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001538:	2203      	movs	r2, #3
 800153a:	4393      	bics	r3, r2
 800153c:	2201      	movs	r2, #1
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	0018      	movs	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	b002      	add	sp, #8
 800154c:	bd80      	pop	{r7, pc}
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	fffffefd 	.word	0xfffffefd
 8001554:	40012708 	.word	0x40012708
 8001558:	ffc3ffff 	.word	0xffc3ffff
 800155c:	fdffffff 	.word	0xfdffffff
 8001560:	fffe0219 	.word	0xfffe0219
 8001564:	fffffc03 	.word	0xfffffc03

08001568 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001568:	b590      	push	{r4, r7, lr}
 800156a:	b087      	sub	sp, #28
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001574:	2317      	movs	r3, #23
 8001576:	18fb      	adds	r3, r7, r3
 8001578:	2200      	movs	r2, #0
 800157a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	2204      	movs	r2, #4
 8001584:	4013      	ands	r3, r2
 8001586:	d15e      	bne.n	8001646 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2250      	movs	r2, #80	; 0x50
 800158c:	5c9b      	ldrb	r3, [r3, r2]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d101      	bne.n	8001596 <HAL_ADC_Start_DMA+0x2e>
 8001592:	2302      	movs	r3, #2
 8001594:	e05e      	b.n	8001654 <HAL_ADC_Start_DMA+0xec>
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2250      	movs	r2, #80	; 0x50
 800159a:	2101      	movs	r1, #1
 800159c:	5499      	strb	r1, [r3, r2]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68da      	ldr	r2, [r3, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2101      	movs	r1, #1
 80015aa:	430a      	orrs	r2, r1
 80015ac:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d007      	beq.n	80015c6 <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80015b6:	2317      	movs	r3, #23
 80015b8:	18fc      	adds	r4, r7, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	0018      	movs	r0, r3
 80015be:	f000 f8eb 	bl	8001798 <ADC_Enable>
 80015c2:	0003      	movs	r3, r0
 80015c4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80015c6:	2317      	movs	r3, #23
 80015c8:	18fb      	adds	r3, r7, r3
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d13e      	bne.n	800164e <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d4:	4a21      	ldr	r2, [pc, #132]	; (800165c <HAL_ADC_Start_DMA+0xf4>)
 80015d6:	4013      	ands	r3, r2
 80015d8:	2280      	movs	r2, #128	; 0x80
 80015da:	0052      	lsls	r2, r2, #1
 80015dc:	431a      	orrs	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2200      	movs	r2, #0
 80015e6:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2250      	movs	r2, #80	; 0x50
 80015ec:	2100      	movs	r1, #0
 80015ee:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f4:	4a1a      	ldr	r2, [pc, #104]	; (8001660 <HAL_ADC_Start_DMA+0xf8>)
 80015f6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fc:	4a19      	ldr	r2, [pc, #100]	; (8001664 <HAL_ADC_Start_DMA+0xfc>)
 80015fe:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001604:	4a18      	ldr	r2, [pc, #96]	; (8001668 <HAL_ADC_Start_DMA+0x100>)
 8001606:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	221c      	movs	r2, #28
 800160e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2110      	movs	r1, #16
 800161c:	430a      	orrs	r2, r1
 800161e:	605a      	str	r2, [r3, #4]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	3340      	adds	r3, #64	; 0x40
 800162a:	0019      	movs	r1, r3
 800162c:	68ba      	ldr	r2, [r7, #8]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f000 fb14 	bl	8001c5c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689a      	ldr	r2, [r3, #8]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2104      	movs	r1, #4
 8001640:	430a      	orrs	r2, r1
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	e003      	b.n	800164e <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001646:	2317      	movs	r3, #23
 8001648:	18fb      	adds	r3, r7, r3
 800164a:	2202      	movs	r2, #2
 800164c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800164e:	2317      	movs	r3, #23
 8001650:	18fb      	adds	r3, r7, r3
 8001652:	781b      	ldrb	r3, [r3, #0]
}
 8001654:	0018      	movs	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	b007      	add	sp, #28
 800165a:	bd90      	pop	{r4, r7, pc}
 800165c:	fffff0fe 	.word	0xfffff0fe
 8001660:	08001869 	.word	0x08001869
 8001664:	0800191d 	.word	0x0800191d
 8001668:	0800193b 	.word	0x0800193b

0800166c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001674:	46c0      	nop			; (mov r8, r8)
 8001676:	46bd      	mov	sp, r7
 8001678:	b002      	add	sp, #8
 800167a:	bd80      	pop	{r7, pc}

0800167c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001684:	46c0      	nop			; (mov r8, r8)
 8001686:	46bd      	mov	sp, r7
 8001688:	b002      	add	sp, #8
 800168a:	bd80      	pop	{r7, pc}

0800168c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2250      	movs	r2, #80	; 0x50
 800169a:	5c9b      	ldrb	r3, [r3, r2]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d101      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x18>
 80016a0:	2302      	movs	r3, #2
 80016a2:	e06c      	b.n	800177e <HAL_ADC_ConfigChannel+0xf2>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2250      	movs	r2, #80	; 0x50
 80016a8:	2101      	movs	r1, #1
 80016aa:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2204      	movs	r2, #4
 80016b4:	4013      	ands	r3, r2
 80016b6:	d00b      	beq.n	80016d0 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016bc:	2220      	movs	r2, #32
 80016be:	431a      	orrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2250      	movs	r2, #80	; 0x50
 80016c8:	2100      	movs	r1, #0
 80016ca:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e056      	b.n	800177e <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	4a2c      	ldr	r2, [pc, #176]	; (8001788 <HAL_ADC_ConfigChannel+0xfc>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d028      	beq.n	800172c <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	035b      	lsls	r3, r3, #13
 80016e6:	0b5a      	lsrs	r2, r3, #13
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	2380      	movs	r3, #128	; 0x80
 80016f6:	02db      	lsls	r3, r3, #11
 80016f8:	4013      	ands	r3, r2
 80016fa:	d009      	beq.n	8001710 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80016fc:	4b23      	ldr	r3, [pc, #140]	; (800178c <HAL_ADC_ConfigChannel+0x100>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b22      	ldr	r3, [pc, #136]	; (800178c <HAL_ADC_ConfigChannel+0x100>)
 8001702:	2180      	movs	r1, #128	; 0x80
 8001704:	0409      	lsls	r1, r1, #16
 8001706:	430a      	orrs	r2, r1
 8001708:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800170a:	200a      	movs	r0, #10
 800170c:	f000 f930 	bl	8001970 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	029b      	lsls	r3, r3, #10
 8001718:	4013      	ands	r3, r2
 800171a:	d02b      	beq.n	8001774 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 800171c:	4b1b      	ldr	r3, [pc, #108]	; (800178c <HAL_ADC_ConfigChannel+0x100>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b1a      	ldr	r3, [pc, #104]	; (800178c <HAL_ADC_ConfigChannel+0x100>)
 8001722:	2180      	movs	r1, #128	; 0x80
 8001724:	03c9      	lsls	r1, r1, #15
 8001726:	430a      	orrs	r2, r1
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	e023      	b.n	8001774 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	035b      	lsls	r3, r3, #13
 8001738:	0b5b      	lsrs	r3, r3, #13
 800173a:	43d9      	mvns	r1, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	400a      	ands	r2, r1
 8001742:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	02db      	lsls	r3, r3, #11
 800174c:	4013      	ands	r3, r2
 800174e:	d005      	beq.n	800175c <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8001750:	4b0e      	ldr	r3, [pc, #56]	; (800178c <HAL_ADC_ConfigChannel+0x100>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4b0d      	ldr	r3, [pc, #52]	; (800178c <HAL_ADC_ConfigChannel+0x100>)
 8001756:	490e      	ldr	r1, [pc, #56]	; (8001790 <HAL_ADC_ConfigChannel+0x104>)
 8001758:	400a      	ands	r2, r1
 800175a:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	029b      	lsls	r3, r3, #10
 8001764:	4013      	ands	r3, r2
 8001766:	d005      	beq.n	8001774 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <HAL_ADC_ConfigChannel+0x100>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	4b07      	ldr	r3, [pc, #28]	; (800178c <HAL_ADC_ConfigChannel+0x100>)
 800176e:	4909      	ldr	r1, [pc, #36]	; (8001794 <HAL_ADC_ConfigChannel+0x108>)
 8001770:	400a      	ands	r2, r1
 8001772:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2250      	movs	r2, #80	; 0x50
 8001778:	2100      	movs	r1, #0
 800177a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	0018      	movs	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	b002      	add	sp, #8
 8001784:	bd80      	pop	{r7, pc}
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	00001001 	.word	0x00001001
 800178c:	40012708 	.word	0x40012708
 8001790:	ff7fffff 	.word	0xff7fffff
 8001794:	ffbfffff 	.word	0xffbfffff

08001798 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	2203      	movs	r2, #3
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d108      	bne.n	80017c4 <ADC_Enable+0x2c>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2201      	movs	r2, #1
 80017ba:	4013      	ands	r3, r2
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d101      	bne.n	80017c4 <ADC_Enable+0x2c>
 80017c0:	2301      	movs	r3, #1
 80017c2:	e000      	b.n	80017c6 <ADC_Enable+0x2e>
 80017c4:	2300      	movs	r3, #0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d146      	bne.n	8001858 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	4a24      	ldr	r2, [pc, #144]	; (8001864 <ADC_Enable+0xcc>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	d00d      	beq.n	80017f2 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017da:	2210      	movs	r2, #16
 80017dc:	431a      	orrs	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e6:	2201      	movs	r2, #1
 80017e8:	431a      	orrs	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e033      	b.n	800185a <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2101      	movs	r1, #1
 80017fe:	430a      	orrs	r2, r1
 8001800:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8001802:	2001      	movs	r0, #1
 8001804:	f000 f8b4 	bl	8001970 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001808:	f7ff fd30 	bl	800126c <HAL_GetTick>
 800180c:	0003      	movs	r3, r0
 800180e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001810:	e01b      	b.n	800184a <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001812:	f7ff fd2b 	bl	800126c <HAL_GetTick>
 8001816:	0002      	movs	r2, r0
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b0a      	cmp	r3, #10
 800181e:	d914      	bls.n	800184a <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2201      	movs	r2, #1
 8001828:	4013      	ands	r3, r2
 800182a:	2b01      	cmp	r3, #1
 800182c:	d00d      	beq.n	800184a <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001832:	2210      	movs	r2, #16
 8001834:	431a      	orrs	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183e:	2201      	movs	r2, #1
 8001840:	431a      	orrs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e007      	b.n	800185a <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2201      	movs	r2, #1
 8001852:	4013      	ands	r3, r2
 8001854:	2b01      	cmp	r3, #1
 8001856:	d1dc      	bne.n	8001812 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	0018      	movs	r0, r3
 800185c:	46bd      	mov	sp, r7
 800185e:	b004      	add	sp, #16
 8001860:	bd80      	pop	{r7, pc}
 8001862:	46c0      	nop			; (mov r8, r8)
 8001864:	80000017 	.word	0x80000017

08001868 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001874:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800187a:	2250      	movs	r2, #80	; 0x50
 800187c:	4013      	ands	r3, r2
 800187e:	d141      	bne.n	8001904 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001884:	2280      	movs	r2, #128	; 0x80
 8001886:	0092      	lsls	r2, r2, #2
 8001888:	431a      	orrs	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68da      	ldr	r2, [r3, #12]
 8001894:	23c0      	movs	r3, #192	; 0xc0
 8001896:	011b      	lsls	r3, r3, #4
 8001898:	4013      	ands	r3, r2
 800189a:	d12e      	bne.n	80018fa <ADC_DMAConvCplt+0x92>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2220      	movs	r2, #32
 80018a0:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d129      	bne.n	80018fa <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2208      	movs	r2, #8
 80018ae:	4013      	ands	r3, r2
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	d122      	bne.n	80018fa <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	2204      	movs	r2, #4
 80018bc:	4013      	ands	r3, r2
 80018be:	d110      	bne.n	80018e2 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	210c      	movs	r1, #12
 80018cc:	438a      	bics	r2, r1
 80018ce:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d4:	4a10      	ldr	r2, [pc, #64]	; (8001918 <ADC_DMAConvCplt+0xb0>)
 80018d6:	4013      	ands	r3, r2
 80018d8:	2201      	movs	r2, #1
 80018da:	431a      	orrs	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	655a      	str	r2, [r3, #84]	; 0x54
 80018e0:	e00b      	b.n	80018fa <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e6:	2220      	movs	r2, #32
 80018e8:	431a      	orrs	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f2:	2201      	movs	r2, #1
 80018f4:	431a      	orrs	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	0018      	movs	r0, r3
 80018fe:	f7ff f96d 	bl	8000bdc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001902:	e005      	b.n	8001910 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	0010      	movs	r0, r2
 800190e:	4798      	blx	r3
}
 8001910:	46c0      	nop			; (mov r8, r8)
 8001912:	46bd      	mov	sp, r7
 8001914:	b004      	add	sp, #16
 8001916:	bd80      	pop	{r7, pc}
 8001918:	fffffefe 	.word	0xfffffefe

0800191c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001928:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	0018      	movs	r0, r3
 800192e:	f7ff fe9d 	bl	800166c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	46bd      	mov	sp, r7
 8001936:	b004      	add	sp, #16
 8001938:	bd80      	pop	{r7, pc}

0800193a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b084      	sub	sp, #16
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001946:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194c:	2240      	movs	r2, #64	; 0x40
 800194e:	431a      	orrs	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001958:	2204      	movs	r2, #4
 800195a:	431a      	orrs	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	0018      	movs	r0, r3
 8001964:	f7ff fe8a 	bl	800167c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001968:	46c0      	nop			; (mov r8, r8)
 800196a:	46bd      	mov	sp, r7
 800196c:	b004      	add	sp, #16
 800196e:	bd80      	pop	{r7, pc}

08001970 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001978:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <ADC_DelayMicroSecond+0x38>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	490b      	ldr	r1, [pc, #44]	; (80019ac <ADC_DelayMicroSecond+0x3c>)
 800197e:	0018      	movs	r0, r3
 8001980:	f7fe fbcc 	bl	800011c <__udivsi3>
 8001984:	0003      	movs	r3, r0
 8001986:	001a      	movs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4353      	muls	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800198e:	e002      	b.n	8001996 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	3b01      	subs	r3, #1
 8001994:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1f9      	bne.n	8001990 <ADC_DelayMicroSecond+0x20>
  } 
}
 800199c:	46c0      	nop			; (mov r8, r8)
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	46bd      	mov	sp, r7
 80019a2:	b004      	add	sp, #16
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	20000014 	.word	0x20000014
 80019ac:	000f4240 	.word	0x000f4240

080019b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	0002      	movs	r2, r0
 80019b8:	1dfb      	adds	r3, r7, #7
 80019ba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80019bc:	1dfb      	adds	r3, r7, #7
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b7f      	cmp	r3, #127	; 0x7f
 80019c2:	d809      	bhi.n	80019d8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019c4:	1dfb      	adds	r3, r7, #7
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	001a      	movs	r2, r3
 80019ca:	231f      	movs	r3, #31
 80019cc:	401a      	ands	r2, r3
 80019ce:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <__NVIC_EnableIRQ+0x30>)
 80019d0:	2101      	movs	r1, #1
 80019d2:	4091      	lsls	r1, r2
 80019d4:	000a      	movs	r2, r1
 80019d6:	601a      	str	r2, [r3, #0]
  }
}
 80019d8:	46c0      	nop			; (mov r8, r8)
 80019da:	46bd      	mov	sp, r7
 80019dc:	b002      	add	sp, #8
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	e000e100 	.word	0xe000e100

080019e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e4:	b590      	push	{r4, r7, lr}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	0002      	movs	r2, r0
 80019ec:	6039      	str	r1, [r7, #0]
 80019ee:	1dfb      	adds	r3, r7, #7
 80019f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80019f2:	1dfb      	adds	r3, r7, #7
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b7f      	cmp	r3, #127	; 0x7f
 80019f8:	d828      	bhi.n	8001a4c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019fa:	4a2f      	ldr	r2, [pc, #188]	; (8001ab8 <__NVIC_SetPriority+0xd4>)
 80019fc:	1dfb      	adds	r3, r7, #7
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	b25b      	sxtb	r3, r3
 8001a02:	089b      	lsrs	r3, r3, #2
 8001a04:	33c0      	adds	r3, #192	; 0xc0
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	589b      	ldr	r3, [r3, r2]
 8001a0a:	1dfa      	adds	r2, r7, #7
 8001a0c:	7812      	ldrb	r2, [r2, #0]
 8001a0e:	0011      	movs	r1, r2
 8001a10:	2203      	movs	r2, #3
 8001a12:	400a      	ands	r2, r1
 8001a14:	00d2      	lsls	r2, r2, #3
 8001a16:	21ff      	movs	r1, #255	; 0xff
 8001a18:	4091      	lsls	r1, r2
 8001a1a:	000a      	movs	r2, r1
 8001a1c:	43d2      	mvns	r2, r2
 8001a1e:	401a      	ands	r2, r3
 8001a20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	019b      	lsls	r3, r3, #6
 8001a26:	22ff      	movs	r2, #255	; 0xff
 8001a28:	401a      	ands	r2, r3
 8001a2a:	1dfb      	adds	r3, r7, #7
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	0018      	movs	r0, r3
 8001a30:	2303      	movs	r3, #3
 8001a32:	4003      	ands	r3, r0
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a38:	481f      	ldr	r0, [pc, #124]	; (8001ab8 <__NVIC_SetPriority+0xd4>)
 8001a3a:	1dfb      	adds	r3, r7, #7
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	b25b      	sxtb	r3, r3
 8001a40:	089b      	lsrs	r3, r3, #2
 8001a42:	430a      	orrs	r2, r1
 8001a44:	33c0      	adds	r3, #192	; 0xc0
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001a4a:	e031      	b.n	8001ab0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a4c:	4a1b      	ldr	r2, [pc, #108]	; (8001abc <__NVIC_SetPriority+0xd8>)
 8001a4e:	1dfb      	adds	r3, r7, #7
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	0019      	movs	r1, r3
 8001a54:	230f      	movs	r3, #15
 8001a56:	400b      	ands	r3, r1
 8001a58:	3b08      	subs	r3, #8
 8001a5a:	089b      	lsrs	r3, r3, #2
 8001a5c:	3306      	adds	r3, #6
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	18d3      	adds	r3, r2, r3
 8001a62:	3304      	adds	r3, #4
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	1dfa      	adds	r2, r7, #7
 8001a68:	7812      	ldrb	r2, [r2, #0]
 8001a6a:	0011      	movs	r1, r2
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	400a      	ands	r2, r1
 8001a70:	00d2      	lsls	r2, r2, #3
 8001a72:	21ff      	movs	r1, #255	; 0xff
 8001a74:	4091      	lsls	r1, r2
 8001a76:	000a      	movs	r2, r1
 8001a78:	43d2      	mvns	r2, r2
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	019b      	lsls	r3, r3, #6
 8001a82:	22ff      	movs	r2, #255	; 0xff
 8001a84:	401a      	ands	r2, r3
 8001a86:	1dfb      	adds	r3, r7, #7
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	4003      	ands	r3, r0
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a94:	4809      	ldr	r0, [pc, #36]	; (8001abc <__NVIC_SetPriority+0xd8>)
 8001a96:	1dfb      	adds	r3, r7, #7
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	001c      	movs	r4, r3
 8001a9c:	230f      	movs	r3, #15
 8001a9e:	4023      	ands	r3, r4
 8001aa0:	3b08      	subs	r3, #8
 8001aa2:	089b      	lsrs	r3, r3, #2
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	3306      	adds	r3, #6
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	18c3      	adds	r3, r0, r3
 8001aac:	3304      	adds	r3, #4
 8001aae:	601a      	str	r2, [r3, #0]
}
 8001ab0:	46c0      	nop			; (mov r8, r8)
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	b003      	add	sp, #12
 8001ab6:	bd90      	pop	{r4, r7, pc}
 8001ab8:	e000e100 	.word	0xe000e100
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	1e5a      	subs	r2, r3, #1
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	045b      	lsls	r3, r3, #17
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d301      	bcc.n	8001ad8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e010      	b.n	8001afa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ad8:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <SysTick_Config+0x44>)
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	3a01      	subs	r2, #1
 8001ade:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	425b      	negs	r3, r3
 8001ae4:	2103      	movs	r1, #3
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	f7ff ff7c 	bl	80019e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aec:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <SysTick_Config+0x44>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001af2:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <SysTick_Config+0x44>)
 8001af4:	2207      	movs	r2, #7
 8001af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	0018      	movs	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	b002      	add	sp, #8
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	e000e010 	.word	0xe000e010

08001b08 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60b9      	str	r1, [r7, #8]
 8001b10:	607a      	str	r2, [r7, #4]
 8001b12:	210f      	movs	r1, #15
 8001b14:	187b      	adds	r3, r7, r1
 8001b16:	1c02      	adds	r2, r0, #0
 8001b18:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	187b      	adds	r3, r7, r1
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	b25b      	sxtb	r3, r3
 8001b22:	0011      	movs	r1, r2
 8001b24:	0018      	movs	r0, r3
 8001b26:	f7ff ff5d 	bl	80019e4 <__NVIC_SetPriority>
}
 8001b2a:	46c0      	nop			; (mov r8, r8)
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	b004      	add	sp, #16
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	0002      	movs	r2, r0
 8001b3a:	1dfb      	adds	r3, r7, #7
 8001b3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b3e:	1dfb      	adds	r3, r7, #7
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	b25b      	sxtb	r3, r3
 8001b44:	0018      	movs	r0, r3
 8001b46:	f7ff ff33 	bl	80019b0 <__NVIC_EnableIRQ>
}
 8001b4a:	46c0      	nop			; (mov r8, r8)
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	b002      	add	sp, #8
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	f7ff ffaf 	bl	8001ac0 <SysTick_Config>
 8001b62:	0003      	movs	r3, r0
}
 8001b64:	0018      	movs	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	b002      	add	sp, #8
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e061      	b.n	8001c42 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a32      	ldr	r2, [pc, #200]	; (8001c4c <HAL_DMA_Init+0xe0>)
 8001b84:	4694      	mov	ip, r2
 8001b86:	4463      	add	r3, ip
 8001b88:	2114      	movs	r1, #20
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	f7fe fac6 	bl	800011c <__udivsi3>
 8001b90:	0003      	movs	r3, r0
 8001b92:	009a      	lsls	r2, r3, #2
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a2d      	ldr	r2, [pc, #180]	; (8001c50 <HAL_DMA_Init+0xe4>)
 8001b9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2225      	movs	r2, #37	; 0x25
 8001ba2:	2102      	movs	r1, #2
 8001ba4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	4a28      	ldr	r2, [pc, #160]	; (8001c54 <HAL_DMA_Init+0xe8>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001bbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	2380      	movs	r3, #128	; 0x80
 8001bf2:	01db      	lsls	r3, r3, #7
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d018      	beq.n	8001c2a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001bf8:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <HAL_DMA_Init+0xec>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c00:	211c      	movs	r1, #28
 8001c02:	400b      	ands	r3, r1
 8001c04:	210f      	movs	r1, #15
 8001c06:	4099      	lsls	r1, r3
 8001c08:	000b      	movs	r3, r1
 8001c0a:	43d9      	mvns	r1, r3
 8001c0c:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_DMA_Init+0xec>)
 8001c0e:	400a      	ands	r2, r1
 8001c10:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001c12:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <HAL_DMA_Init+0xec>)
 8001c14:	6819      	ldr	r1, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	201c      	movs	r0, #28
 8001c20:	4003      	ands	r3, r0
 8001c22:	409a      	lsls	r2, r3
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <HAL_DMA_Init+0xec>)
 8001c26:	430a      	orrs	r2, r1
 8001c28:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2225      	movs	r2, #37	; 0x25
 8001c34:	2101      	movs	r1, #1
 8001c36:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2224      	movs	r2, #36	; 0x24
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	0018      	movs	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	b004      	add	sp, #16
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	bffdfff8 	.word	0xbffdfff8
 8001c50:	40020000 	.word	0x40020000
 8001c54:	ffff800f 	.word	0xffff800f
 8001c58:	400200a8 	.word	0x400200a8

08001c5c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
 8001c68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c6a:	2317      	movs	r3, #23
 8001c6c:	18fb      	adds	r3, r7, r3
 8001c6e:	2200      	movs	r2, #0
 8001c70:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2224      	movs	r2, #36	; 0x24
 8001c76:	5c9b      	ldrb	r3, [r3, r2]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d101      	bne.n	8001c80 <HAL_DMA_Start_IT+0x24>
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	e04f      	b.n	8001d20 <HAL_DMA_Start_IT+0xc4>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2224      	movs	r2, #36	; 0x24
 8001c84:	2101      	movs	r1, #1
 8001c86:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2225      	movs	r2, #37	; 0x25
 8001c8c:	5c9b      	ldrb	r3, [r3, r2]
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d13a      	bne.n	8001d0a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2225      	movs	r2, #37	; 0x25
 8001c98:	2102      	movs	r1, #2
 8001c9a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2101      	movs	r1, #1
 8001cae:	438a      	bics	r2, r1
 8001cb0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	68b9      	ldr	r1, [r7, #8]
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f000 f8e3 	bl	8001e84 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d008      	beq.n	8001cd8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	210e      	movs	r1, #14
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	e00f      	b.n	8001cf8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2104      	movs	r1, #4
 8001ce4:	438a      	bics	r2, r1
 8001ce6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	210a      	movs	r1, #10
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2101      	movs	r1, #1
 8001d04:	430a      	orrs	r2, r1
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	e007      	b.n	8001d1a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2224      	movs	r2, #36	; 0x24
 8001d0e:	2100      	movs	r1, #0
 8001d10:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001d12:	2317      	movs	r3, #23
 8001d14:	18fb      	adds	r3, r7, r3
 8001d16:	2202      	movs	r2, #2
 8001d18:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001d1a:	2317      	movs	r3, #23
 8001d1c:	18fb      	adds	r3, r7, r3
 8001d1e:	781b      	ldrb	r3, [r3, #0]
}
 8001d20:	0018      	movs	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	b006      	add	sp, #24
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d44:	221c      	movs	r2, #28
 8001d46:	4013      	ands	r3, r2
 8001d48:	2204      	movs	r2, #4
 8001d4a:	409a      	lsls	r2, r3
 8001d4c:	0013      	movs	r3, r2
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	4013      	ands	r3, r2
 8001d52:	d026      	beq.n	8001da2 <HAL_DMA_IRQHandler+0x7a>
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	2204      	movs	r2, #4
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d022      	beq.n	8001da2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2220      	movs	r2, #32
 8001d64:	4013      	ands	r3, r2
 8001d66:	d107      	bne.n	8001d78 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2104      	movs	r1, #4
 8001d74:	438a      	bics	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7c:	221c      	movs	r2, #28
 8001d7e:	401a      	ands	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	2104      	movs	r1, #4
 8001d86:	4091      	lsls	r1, r2
 8001d88:	000a      	movs	r2, r1
 8001d8a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d100      	bne.n	8001d96 <HAL_DMA_IRQHandler+0x6e>
 8001d94:	e071      	b.n	8001e7a <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	0010      	movs	r0, r2
 8001d9e:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001da0:	e06b      	b.n	8001e7a <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	221c      	movs	r2, #28
 8001da8:	4013      	ands	r3, r2
 8001daa:	2202      	movs	r2, #2
 8001dac:	409a      	lsls	r2, r3
 8001dae:	0013      	movs	r3, r2
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	4013      	ands	r3, r2
 8001db4:	d02d      	beq.n	8001e12 <HAL_DMA_IRQHandler+0xea>
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	2202      	movs	r2, #2
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d029      	beq.n	8001e12 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d10b      	bne.n	8001de2 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	210a      	movs	r1, #10
 8001dd6:	438a      	bics	r2, r1
 8001dd8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2225      	movs	r2, #37	; 0x25
 8001dde:	2101      	movs	r1, #1
 8001de0:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	221c      	movs	r2, #28
 8001de8:	401a      	ands	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	2102      	movs	r1, #2
 8001df0:	4091      	lsls	r1, r2
 8001df2:	000a      	movs	r2, r1
 8001df4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2224      	movs	r2, #36	; 0x24
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d039      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	0010      	movs	r0, r2
 8001e0e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001e10:	e033      	b.n	8001e7a <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	221c      	movs	r2, #28
 8001e18:	4013      	ands	r3, r2
 8001e1a:	2208      	movs	r2, #8
 8001e1c:	409a      	lsls	r2, r3
 8001e1e:	0013      	movs	r3, r2
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	4013      	ands	r3, r2
 8001e24:	d02a      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x154>
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	2208      	movs	r2, #8
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d026      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	210e      	movs	r1, #14
 8001e3a:	438a      	bics	r2, r1
 8001e3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	221c      	movs	r2, #28
 8001e44:	401a      	ands	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	4091      	lsls	r1, r2
 8001e4e:	000a      	movs	r2, r1
 8001e50:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2225      	movs	r2, #37	; 0x25
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2224      	movs	r2, #36	; 0x24
 8001e64:	2100      	movs	r1, #0
 8001e66:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d005      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	0010      	movs	r0, r2
 8001e78:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	46c0      	nop			; (mov r8, r8)
}
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	b004      	add	sp, #16
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
 8001e90:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	221c      	movs	r2, #28
 8001e98:	401a      	ands	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	4091      	lsls	r1, r2
 8001ea2:	000a      	movs	r2, r1
 8001ea4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2b10      	cmp	r3, #16
 8001eb4:	d108      	bne.n	8001ec8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ec6:	e007      	b.n	8001ed8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68ba      	ldr	r2, [r7, #8]
 8001ece:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	60da      	str	r2, [r3, #12]
}
 8001ed8:	46c0      	nop			; (mov r8, r8)
 8001eda:	46bd      	mov	sp, r7
 8001edc:	b004      	add	sp, #16
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001ef6:	e149      	b.n	800218c <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2101      	movs	r1, #1
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	4091      	lsls	r1, r2
 8001f02:	000a      	movs	r2, r1
 8001f04:	4013      	ands	r3, r2
 8001f06:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d100      	bne.n	8001f10 <HAL_GPIO_Init+0x30>
 8001f0e:	e13a      	b.n	8002186 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2203      	movs	r2, #3
 8001f16:	4013      	ands	r3, r2
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d005      	beq.n	8001f28 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2203      	movs	r2, #3
 8001f22:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d130      	bne.n	8001f8a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	2203      	movs	r2, #3
 8001f34:	409a      	lsls	r2, r3
 8001f36:	0013      	movs	r3, r2
 8001f38:	43da      	mvns	r2, r3
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	0013      	movs	r3, r2
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f5e:	2201      	movs	r2, #1
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	409a      	lsls	r2, r3
 8001f64:	0013      	movs	r3, r2
 8001f66:	43da      	mvns	r2, r3
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	091b      	lsrs	r3, r3, #4
 8001f74:	2201      	movs	r2, #1
 8001f76:	401a      	ands	r2, r3
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	409a      	lsls	r2, r3
 8001f7c:	0013      	movs	r3, r2
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2203      	movs	r2, #3
 8001f90:	4013      	ands	r3, r2
 8001f92:	2b03      	cmp	r3, #3
 8001f94:	d017      	beq.n	8001fc6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	409a      	lsls	r2, r3
 8001fa4:	0013      	movs	r3, r2
 8001fa6:	43da      	mvns	r2, r3
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	4013      	ands	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	0013      	movs	r3, r2
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2203      	movs	r2, #3
 8001fcc:	4013      	ands	r3, r2
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d123      	bne.n	800201a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	08da      	lsrs	r2, r3, #3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3208      	adds	r2, #8
 8001fda:	0092      	lsls	r2, r2, #2
 8001fdc:	58d3      	ldr	r3, [r2, r3]
 8001fde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	2207      	movs	r2, #7
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	220f      	movs	r2, #15
 8001fea:	409a      	lsls	r2, r3
 8001fec:	0013      	movs	r3, r2
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	691a      	ldr	r2, [r3, #16]
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	2107      	movs	r1, #7
 8001ffe:	400b      	ands	r3, r1
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	409a      	lsls	r2, r3
 8002004:	0013      	movs	r3, r2
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	08da      	lsrs	r2, r3, #3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3208      	adds	r2, #8
 8002014:	0092      	lsls	r2, r2, #2
 8002016:	6939      	ldr	r1, [r7, #16]
 8002018:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	2203      	movs	r2, #3
 8002026:	409a      	lsls	r2, r3
 8002028:	0013      	movs	r3, r2
 800202a:	43da      	mvns	r2, r3
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4013      	ands	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2203      	movs	r2, #3
 8002038:	401a      	ands	r2, r3
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	409a      	lsls	r2, r3
 8002040:	0013      	movs	r3, r2
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	4313      	orrs	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	23c0      	movs	r3, #192	; 0xc0
 8002054:	029b      	lsls	r3, r3, #10
 8002056:	4013      	ands	r3, r2
 8002058:	d100      	bne.n	800205c <HAL_GPIO_Init+0x17c>
 800205a:	e094      	b.n	8002186 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205c:	4b51      	ldr	r3, [pc, #324]	; (80021a4 <HAL_GPIO_Init+0x2c4>)
 800205e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002060:	4b50      	ldr	r3, [pc, #320]	; (80021a4 <HAL_GPIO_Init+0x2c4>)
 8002062:	2101      	movs	r1, #1
 8002064:	430a      	orrs	r2, r1
 8002066:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002068:	4a4f      	ldr	r2, [pc, #316]	; (80021a8 <HAL_GPIO_Init+0x2c8>)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	089b      	lsrs	r3, r3, #2
 800206e:	3302      	adds	r3, #2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	589b      	ldr	r3, [r3, r2]
 8002074:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	2203      	movs	r2, #3
 800207a:	4013      	ands	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	220f      	movs	r2, #15
 8002080:	409a      	lsls	r2, r3
 8002082:	0013      	movs	r3, r2
 8002084:	43da      	mvns	r2, r3
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4013      	ands	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	23a0      	movs	r3, #160	; 0xa0
 8002090:	05db      	lsls	r3, r3, #23
 8002092:	429a      	cmp	r2, r3
 8002094:	d013      	beq.n	80020be <HAL_GPIO_Init+0x1de>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a44      	ldr	r2, [pc, #272]	; (80021ac <HAL_GPIO_Init+0x2cc>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d00d      	beq.n	80020ba <HAL_GPIO_Init+0x1da>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a43      	ldr	r2, [pc, #268]	; (80021b0 <HAL_GPIO_Init+0x2d0>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d007      	beq.n	80020b6 <HAL_GPIO_Init+0x1d6>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a42      	ldr	r2, [pc, #264]	; (80021b4 <HAL_GPIO_Init+0x2d4>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d101      	bne.n	80020b2 <HAL_GPIO_Init+0x1d2>
 80020ae:	2305      	movs	r3, #5
 80020b0:	e006      	b.n	80020c0 <HAL_GPIO_Init+0x1e0>
 80020b2:	2306      	movs	r3, #6
 80020b4:	e004      	b.n	80020c0 <HAL_GPIO_Init+0x1e0>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e002      	b.n	80020c0 <HAL_GPIO_Init+0x1e0>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <HAL_GPIO_Init+0x1e0>
 80020be:	2300      	movs	r3, #0
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	2103      	movs	r1, #3
 80020c4:	400a      	ands	r2, r1
 80020c6:	0092      	lsls	r2, r2, #2
 80020c8:	4093      	lsls	r3, r2
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020d0:	4935      	ldr	r1, [pc, #212]	; (80021a8 <HAL_GPIO_Init+0x2c8>)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	089b      	lsrs	r3, r3, #2
 80020d6:	3302      	adds	r3, #2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020de:	4b36      	ldr	r3, [pc, #216]	; (80021b8 <HAL_GPIO_Init+0x2d8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	43da      	mvns	r2, r3
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4013      	ands	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	2380      	movs	r3, #128	; 0x80
 80020f4:	025b      	lsls	r3, r3, #9
 80020f6:	4013      	ands	r3, r2
 80020f8:	d003      	beq.n	8002102 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4313      	orrs	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002102:	4b2d      	ldr	r3, [pc, #180]	; (80021b8 <HAL_GPIO_Init+0x2d8>)
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002108:	4b2b      	ldr	r3, [pc, #172]	; (80021b8 <HAL_GPIO_Init+0x2d8>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	43da      	mvns	r2, r3
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	4013      	ands	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	2380      	movs	r3, #128	; 0x80
 800211e:	029b      	lsls	r3, r3, #10
 8002120:	4013      	ands	r3, r2
 8002122:	d003      	beq.n	800212c <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	4313      	orrs	r3, r2
 800212a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800212c:	4b22      	ldr	r3, [pc, #136]	; (80021b8 <HAL_GPIO_Init+0x2d8>)
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002132:	4b21      	ldr	r3, [pc, #132]	; (80021b8 <HAL_GPIO_Init+0x2d8>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	43da      	mvns	r2, r3
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	4013      	ands	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	2380      	movs	r3, #128	; 0x80
 8002148:	035b      	lsls	r3, r3, #13
 800214a:	4013      	ands	r3, r2
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4313      	orrs	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002156:	4b18      	ldr	r3, [pc, #96]	; (80021b8 <HAL_GPIO_Init+0x2d8>)
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800215c:	4b16      	ldr	r3, [pc, #88]	; (80021b8 <HAL_GPIO_Init+0x2d8>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	43da      	mvns	r2, r3
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4013      	ands	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	2380      	movs	r3, #128	; 0x80
 8002172:	039b      	lsls	r3, r3, #14
 8002174:	4013      	ands	r3, r2
 8002176:	d003      	beq.n	8002180 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	4313      	orrs	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002180:	4b0d      	ldr	r3, [pc, #52]	; (80021b8 <HAL_GPIO_Init+0x2d8>)
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	3301      	adds	r3, #1
 800218a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	40da      	lsrs	r2, r3
 8002194:	1e13      	subs	r3, r2, #0
 8002196:	d000      	beq.n	800219a <HAL_GPIO_Init+0x2ba>
 8002198:	e6ae      	b.n	8001ef8 <HAL_GPIO_Init+0x18>
  }
}
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	46c0      	nop			; (mov r8, r8)
 800219e:	46bd      	mov	sp, r7
 80021a0:	b006      	add	sp, #24
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40010000 	.word	0x40010000
 80021ac:	50000400 	.word	0x50000400
 80021b0:	50000800 	.word	0x50000800
 80021b4:	50001c00 	.word	0x50001c00
 80021b8:	40010400 	.word	0x40010400

080021bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021bc:	b5b0      	push	{r4, r5, r7, lr}
 80021be:	b08a      	sub	sp, #40	; 0x28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d102      	bne.n	80021d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	f000 fb6c 	bl	80028a8 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021d0:	4bc8      	ldr	r3, [pc, #800]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	220c      	movs	r2, #12
 80021d6:	4013      	ands	r3, r2
 80021d8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021da:	4bc6      	ldr	r3, [pc, #792]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	2380      	movs	r3, #128	; 0x80
 80021e0:	025b      	lsls	r3, r3, #9
 80021e2:	4013      	ands	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2201      	movs	r2, #1
 80021ec:	4013      	ands	r3, r2
 80021ee:	d100      	bne.n	80021f2 <HAL_RCC_OscConfig+0x36>
 80021f0:	e07d      	b.n	80022ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	d007      	beq.n	8002208 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	2b0c      	cmp	r3, #12
 80021fc:	d112      	bne.n	8002224 <HAL_RCC_OscConfig+0x68>
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	2380      	movs	r3, #128	; 0x80
 8002202:	025b      	lsls	r3, r3, #9
 8002204:	429a      	cmp	r2, r3
 8002206:	d10d      	bne.n	8002224 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002208:	4bba      	ldr	r3, [pc, #744]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	2380      	movs	r3, #128	; 0x80
 800220e:	029b      	lsls	r3, r3, #10
 8002210:	4013      	ands	r3, r2
 8002212:	d100      	bne.n	8002216 <HAL_RCC_OscConfig+0x5a>
 8002214:	e06a      	b.n	80022ec <HAL_RCC_OscConfig+0x130>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d166      	bne.n	80022ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	f000 fb42 	bl	80028a8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	2380      	movs	r3, #128	; 0x80
 800222a:	025b      	lsls	r3, r3, #9
 800222c:	429a      	cmp	r2, r3
 800222e:	d107      	bne.n	8002240 <HAL_RCC_OscConfig+0x84>
 8002230:	4bb0      	ldr	r3, [pc, #704]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4baf      	ldr	r3, [pc, #700]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 8002236:	2180      	movs	r1, #128	; 0x80
 8002238:	0249      	lsls	r1, r1, #9
 800223a:	430a      	orrs	r2, r1
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	e027      	b.n	8002290 <HAL_RCC_OscConfig+0xd4>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	23a0      	movs	r3, #160	; 0xa0
 8002246:	02db      	lsls	r3, r3, #11
 8002248:	429a      	cmp	r2, r3
 800224a:	d10e      	bne.n	800226a <HAL_RCC_OscConfig+0xae>
 800224c:	4ba9      	ldr	r3, [pc, #676]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4ba8      	ldr	r3, [pc, #672]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 8002252:	2180      	movs	r1, #128	; 0x80
 8002254:	02c9      	lsls	r1, r1, #11
 8002256:	430a      	orrs	r2, r1
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	4ba6      	ldr	r3, [pc, #664]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	4ba5      	ldr	r3, [pc, #660]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 8002260:	2180      	movs	r1, #128	; 0x80
 8002262:	0249      	lsls	r1, r1, #9
 8002264:	430a      	orrs	r2, r1
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	e012      	b.n	8002290 <HAL_RCC_OscConfig+0xd4>
 800226a:	4ba2      	ldr	r3, [pc, #648]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	4ba1      	ldr	r3, [pc, #644]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 8002270:	49a1      	ldr	r1, [pc, #644]	; (80024f8 <HAL_RCC_OscConfig+0x33c>)
 8002272:	400a      	ands	r2, r1
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	4b9f      	ldr	r3, [pc, #636]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	2380      	movs	r3, #128	; 0x80
 800227c:	025b      	lsls	r3, r3, #9
 800227e:	4013      	ands	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	4b9b      	ldr	r3, [pc, #620]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b9a      	ldr	r3, [pc, #616]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 800228a:	499c      	ldr	r1, [pc, #624]	; (80024fc <HAL_RCC_OscConfig+0x340>)
 800228c:	400a      	ands	r2, r1
 800228e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d014      	beq.n	80022c2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002298:	f7fe ffe8 	bl	800126c <HAL_GetTick>
 800229c:	0003      	movs	r3, r0
 800229e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022a2:	f7fe ffe3 	bl	800126c <HAL_GetTick>
 80022a6:	0002      	movs	r2, r0
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b64      	cmp	r3, #100	; 0x64
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e2f9      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022b4:	4b8f      	ldr	r3, [pc, #572]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	2380      	movs	r3, #128	; 0x80
 80022ba:	029b      	lsls	r3, r3, #10
 80022bc:	4013      	ands	r3, r2
 80022be:	d0f0      	beq.n	80022a2 <HAL_RCC_OscConfig+0xe6>
 80022c0:	e015      	b.n	80022ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c2:	f7fe ffd3 	bl	800126c <HAL_GetTick>
 80022c6:	0003      	movs	r3, r0
 80022c8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022cc:	f7fe ffce 	bl	800126c <HAL_GetTick>
 80022d0:	0002      	movs	r2, r0
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b64      	cmp	r3, #100	; 0x64
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e2e4      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022de:	4b85      	ldr	r3, [pc, #532]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	2380      	movs	r3, #128	; 0x80
 80022e4:	029b      	lsls	r3, r3, #10
 80022e6:	4013      	ands	r3, r2
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x110>
 80022ea:	e000      	b.n	80022ee <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ec:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2202      	movs	r2, #2
 80022f4:	4013      	ands	r3, r2
 80022f6:	d100      	bne.n	80022fa <HAL_RCC_OscConfig+0x13e>
 80022f8:	e099      	b.n	800242e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	2220      	movs	r2, #32
 8002304:	4013      	ands	r3, r2
 8002306:	d009      	beq.n	800231c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002308:	4b7a      	ldr	r3, [pc, #488]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4b79      	ldr	r3, [pc, #484]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 800230e:	2120      	movs	r1, #32
 8002310:	430a      	orrs	r2, r1
 8002312:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	2220      	movs	r2, #32
 8002318:	4393      	bics	r3, r2
 800231a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	2b04      	cmp	r3, #4
 8002320:	d005      	beq.n	800232e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	2b0c      	cmp	r3, #12
 8002326:	d13e      	bne.n	80023a6 <HAL_RCC_OscConfig+0x1ea>
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d13b      	bne.n	80023a6 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800232e:	4b71      	ldr	r3, [pc, #452]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2204      	movs	r2, #4
 8002334:	4013      	ands	r3, r2
 8002336:	d004      	beq.n	8002342 <HAL_RCC_OscConfig+0x186>
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e2b2      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002342:	4b6c      	ldr	r3, [pc, #432]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	4a6e      	ldr	r2, [pc, #440]	; (8002500 <HAL_RCC_OscConfig+0x344>)
 8002348:	4013      	ands	r3, r2
 800234a:	0019      	movs	r1, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	021a      	lsls	r2, r3, #8
 8002352:	4b68      	ldr	r3, [pc, #416]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 8002354:	430a      	orrs	r2, r1
 8002356:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002358:	4b66      	ldr	r3, [pc, #408]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2209      	movs	r2, #9
 800235e:	4393      	bics	r3, r2
 8002360:	0019      	movs	r1, r3
 8002362:	4b64      	ldr	r3, [pc, #400]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 8002364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002366:	430a      	orrs	r2, r1
 8002368:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800236a:	f000 fbeb 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 800236e:	0001      	movs	r1, r0
 8002370:	4b60      	ldr	r3, [pc, #384]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	091b      	lsrs	r3, r3, #4
 8002376:	220f      	movs	r2, #15
 8002378:	4013      	ands	r3, r2
 800237a:	4a62      	ldr	r2, [pc, #392]	; (8002504 <HAL_RCC_OscConfig+0x348>)
 800237c:	5cd3      	ldrb	r3, [r2, r3]
 800237e:	000a      	movs	r2, r1
 8002380:	40da      	lsrs	r2, r3
 8002382:	4b61      	ldr	r3, [pc, #388]	; (8002508 <HAL_RCC_OscConfig+0x34c>)
 8002384:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002386:	4b61      	ldr	r3, [pc, #388]	; (800250c <HAL_RCC_OscConfig+0x350>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2513      	movs	r5, #19
 800238c:	197c      	adds	r4, r7, r5
 800238e:	0018      	movs	r0, r3
 8002390:	f7fe ff26 	bl	80011e0 <HAL_InitTick>
 8002394:	0003      	movs	r3, r0
 8002396:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002398:	197b      	adds	r3, r7, r5
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d046      	beq.n	800242e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80023a0:	197b      	adds	r3, r7, r5
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	e280      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d027      	beq.n	80023fc <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80023ac:	4b51      	ldr	r3, [pc, #324]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2209      	movs	r2, #9
 80023b2:	4393      	bics	r3, r2
 80023b4:	0019      	movs	r1, r3
 80023b6:	4b4f      	ldr	r3, [pc, #316]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 80023b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ba:	430a      	orrs	r2, r1
 80023bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023be:	f7fe ff55 	bl	800126c <HAL_GetTick>
 80023c2:	0003      	movs	r3, r0
 80023c4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023c8:	f7fe ff50 	bl	800126c <HAL_GetTick>
 80023cc:	0002      	movs	r2, r0
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e266      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023da:	4b46      	ldr	r3, [pc, #280]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2204      	movs	r2, #4
 80023e0:	4013      	ands	r3, r2
 80023e2:	d0f1      	beq.n	80023c8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e4:	4b43      	ldr	r3, [pc, #268]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	4a45      	ldr	r2, [pc, #276]	; (8002500 <HAL_RCC_OscConfig+0x344>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	0019      	movs	r1, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	021a      	lsls	r2, r3, #8
 80023f4:	4b3f      	ldr	r3, [pc, #252]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 80023f6:	430a      	orrs	r2, r1
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	e018      	b.n	800242e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023fc:	4b3d      	ldr	r3, [pc, #244]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	4b3c      	ldr	r3, [pc, #240]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 8002402:	2101      	movs	r1, #1
 8002404:	438a      	bics	r2, r1
 8002406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002408:	f7fe ff30 	bl	800126c <HAL_GetTick>
 800240c:	0003      	movs	r3, r0
 800240e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002412:	f7fe ff2b 	bl	800126c <HAL_GetTick>
 8002416:	0002      	movs	r2, r0
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e241      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002424:	4b33      	ldr	r3, [pc, #204]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2204      	movs	r2, #4
 800242a:	4013      	ands	r3, r2
 800242c:	d1f1      	bne.n	8002412 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2210      	movs	r2, #16
 8002434:	4013      	ands	r3, r2
 8002436:	d100      	bne.n	800243a <HAL_RCC_OscConfig+0x27e>
 8002438:	e0a1      	b.n	800257e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d140      	bne.n	80024c2 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002440:	4b2c      	ldr	r3, [pc, #176]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	2380      	movs	r3, #128	; 0x80
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4013      	ands	r3, r2
 800244a:	d005      	beq.n	8002458 <HAL_RCC_OscConfig+0x29c>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e227      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002458:	4b26      	ldr	r3, [pc, #152]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	4a2c      	ldr	r2, [pc, #176]	; (8002510 <HAL_RCC_OscConfig+0x354>)
 800245e:	4013      	ands	r3, r2
 8002460:	0019      	movs	r1, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a1a      	ldr	r2, [r3, #32]
 8002466:	4b23      	ldr	r3, [pc, #140]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 8002468:	430a      	orrs	r2, r1
 800246a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800246c:	4b21      	ldr	r3, [pc, #132]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	021b      	lsls	r3, r3, #8
 8002472:	0a19      	lsrs	r1, r3, #8
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	061a      	lsls	r2, r3, #24
 800247a:	4b1e      	ldr	r3, [pc, #120]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 800247c:	430a      	orrs	r2, r1
 800247e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	0b5b      	lsrs	r3, r3, #13
 8002486:	3301      	adds	r3, #1
 8002488:	2280      	movs	r2, #128	; 0x80
 800248a:	0212      	lsls	r2, r2, #8
 800248c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800248e:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	091b      	lsrs	r3, r3, #4
 8002494:	210f      	movs	r1, #15
 8002496:	400b      	ands	r3, r1
 8002498:	491a      	ldr	r1, [pc, #104]	; (8002504 <HAL_RCC_OscConfig+0x348>)
 800249a:	5ccb      	ldrb	r3, [r1, r3]
 800249c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800249e:	4b1a      	ldr	r3, [pc, #104]	; (8002508 <HAL_RCC_OscConfig+0x34c>)
 80024a0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80024a2:	4b1a      	ldr	r3, [pc, #104]	; (800250c <HAL_RCC_OscConfig+0x350>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2513      	movs	r5, #19
 80024a8:	197c      	adds	r4, r7, r5
 80024aa:	0018      	movs	r0, r3
 80024ac:	f7fe fe98 	bl	80011e0 <HAL_InitTick>
 80024b0:	0003      	movs	r3, r0
 80024b2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80024b4:	197b      	adds	r3, r7, r5
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d060      	beq.n	800257e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80024bc:	197b      	adds	r3, r7, r5
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	e1f2      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d03f      	beq.n	800254a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024ca:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 80024d0:	2180      	movs	r1, #128	; 0x80
 80024d2:	0049      	lsls	r1, r1, #1
 80024d4:	430a      	orrs	r2, r1
 80024d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d8:	f7fe fec8 	bl	800126c <HAL_GetTick>
 80024dc:	0003      	movs	r3, r0
 80024de:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80024e0:	e018      	b.n	8002514 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024e2:	f7fe fec3 	bl	800126c <HAL_GetTick>
 80024e6:	0002      	movs	r2, r0
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d911      	bls.n	8002514 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e1d9      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
 80024f4:	40021000 	.word	0x40021000
 80024f8:	fffeffff 	.word	0xfffeffff
 80024fc:	fffbffff 	.word	0xfffbffff
 8002500:	ffffe0ff 	.word	0xffffe0ff
 8002504:	08004390 	.word	0x08004390
 8002508:	20000014 	.word	0x20000014
 800250c:	20000018 	.word	0x20000018
 8002510:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002514:	4bc9      	ldr	r3, [pc, #804]	; (800283c <HAL_RCC_OscConfig+0x680>)
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	2380      	movs	r3, #128	; 0x80
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4013      	ands	r3, r2
 800251e:	d0e0      	beq.n	80024e2 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002520:	4bc6      	ldr	r3, [pc, #792]	; (800283c <HAL_RCC_OscConfig+0x680>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	4ac6      	ldr	r2, [pc, #792]	; (8002840 <HAL_RCC_OscConfig+0x684>)
 8002526:	4013      	ands	r3, r2
 8002528:	0019      	movs	r1, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a1a      	ldr	r2, [r3, #32]
 800252e:	4bc3      	ldr	r3, [pc, #780]	; (800283c <HAL_RCC_OscConfig+0x680>)
 8002530:	430a      	orrs	r2, r1
 8002532:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002534:	4bc1      	ldr	r3, [pc, #772]	; (800283c <HAL_RCC_OscConfig+0x680>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	021b      	lsls	r3, r3, #8
 800253a:	0a19      	lsrs	r1, r3, #8
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	061a      	lsls	r2, r3, #24
 8002542:	4bbe      	ldr	r3, [pc, #760]	; (800283c <HAL_RCC_OscConfig+0x680>)
 8002544:	430a      	orrs	r2, r1
 8002546:	605a      	str	r2, [r3, #4]
 8002548:	e019      	b.n	800257e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800254a:	4bbc      	ldr	r3, [pc, #752]	; (800283c <HAL_RCC_OscConfig+0x680>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	4bbb      	ldr	r3, [pc, #748]	; (800283c <HAL_RCC_OscConfig+0x680>)
 8002550:	49bc      	ldr	r1, [pc, #752]	; (8002844 <HAL_RCC_OscConfig+0x688>)
 8002552:	400a      	ands	r2, r1
 8002554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002556:	f7fe fe89 	bl	800126c <HAL_GetTick>
 800255a:	0003      	movs	r3, r0
 800255c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002560:	f7fe fe84 	bl	800126c <HAL_GetTick>
 8002564:	0002      	movs	r2, r0
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e19a      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002572:	4bb2      	ldr	r3, [pc, #712]	; (800283c <HAL_RCC_OscConfig+0x680>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	2380      	movs	r3, #128	; 0x80
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4013      	ands	r3, r2
 800257c:	d1f0      	bne.n	8002560 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2208      	movs	r2, #8
 8002584:	4013      	ands	r3, r2
 8002586:	d036      	beq.n	80025f6 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d019      	beq.n	80025c4 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002590:	4baa      	ldr	r3, [pc, #680]	; (800283c <HAL_RCC_OscConfig+0x680>)
 8002592:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002594:	4ba9      	ldr	r3, [pc, #676]	; (800283c <HAL_RCC_OscConfig+0x680>)
 8002596:	2101      	movs	r1, #1
 8002598:	430a      	orrs	r2, r1
 800259a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259c:	f7fe fe66 	bl	800126c <HAL_GetTick>
 80025a0:	0003      	movs	r3, r0
 80025a2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025a6:	f7fe fe61 	bl	800126c <HAL_GetTick>
 80025aa:	0002      	movs	r2, r0
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e177      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025b8:	4ba0      	ldr	r3, [pc, #640]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80025ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025bc:	2202      	movs	r2, #2
 80025be:	4013      	ands	r3, r2
 80025c0:	d0f1      	beq.n	80025a6 <HAL_RCC_OscConfig+0x3ea>
 80025c2:	e018      	b.n	80025f6 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025c4:	4b9d      	ldr	r3, [pc, #628]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80025c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025c8:	4b9c      	ldr	r3, [pc, #624]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80025ca:	2101      	movs	r1, #1
 80025cc:	438a      	bics	r2, r1
 80025ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d0:	f7fe fe4c 	bl	800126c <HAL_GetTick>
 80025d4:	0003      	movs	r3, r0
 80025d6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025da:	f7fe fe47 	bl	800126c <HAL_GetTick>
 80025de:	0002      	movs	r2, r0
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e15d      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025ec:	4b93      	ldr	r3, [pc, #588]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80025ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f0:	2202      	movs	r2, #2
 80025f2:	4013      	ands	r3, r2
 80025f4:	d1f1      	bne.n	80025da <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2204      	movs	r2, #4
 80025fc:	4013      	ands	r3, r2
 80025fe:	d100      	bne.n	8002602 <HAL_RCC_OscConfig+0x446>
 8002600:	e0ae      	b.n	8002760 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002602:	2023      	movs	r0, #35	; 0x23
 8002604:	183b      	adds	r3, r7, r0
 8002606:	2200      	movs	r2, #0
 8002608:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800260a:	4b8c      	ldr	r3, [pc, #560]	; (800283c <HAL_RCC_OscConfig+0x680>)
 800260c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800260e:	2380      	movs	r3, #128	; 0x80
 8002610:	055b      	lsls	r3, r3, #21
 8002612:	4013      	ands	r3, r2
 8002614:	d109      	bne.n	800262a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002616:	4b89      	ldr	r3, [pc, #548]	; (800283c <HAL_RCC_OscConfig+0x680>)
 8002618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800261a:	4b88      	ldr	r3, [pc, #544]	; (800283c <HAL_RCC_OscConfig+0x680>)
 800261c:	2180      	movs	r1, #128	; 0x80
 800261e:	0549      	lsls	r1, r1, #21
 8002620:	430a      	orrs	r2, r1
 8002622:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002624:	183b      	adds	r3, r7, r0
 8002626:	2201      	movs	r2, #1
 8002628:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262a:	4b87      	ldr	r3, [pc, #540]	; (8002848 <HAL_RCC_OscConfig+0x68c>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	2380      	movs	r3, #128	; 0x80
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	4013      	ands	r3, r2
 8002634:	d11a      	bne.n	800266c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002636:	4b84      	ldr	r3, [pc, #528]	; (8002848 <HAL_RCC_OscConfig+0x68c>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	4b83      	ldr	r3, [pc, #524]	; (8002848 <HAL_RCC_OscConfig+0x68c>)
 800263c:	2180      	movs	r1, #128	; 0x80
 800263e:	0049      	lsls	r1, r1, #1
 8002640:	430a      	orrs	r2, r1
 8002642:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002644:	f7fe fe12 	bl	800126c <HAL_GetTick>
 8002648:	0003      	movs	r3, r0
 800264a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800264e:	f7fe fe0d 	bl	800126c <HAL_GetTick>
 8002652:	0002      	movs	r2, r0
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b64      	cmp	r3, #100	; 0x64
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e123      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002660:	4b79      	ldr	r3, [pc, #484]	; (8002848 <HAL_RCC_OscConfig+0x68c>)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	2380      	movs	r3, #128	; 0x80
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	4013      	ands	r3, r2
 800266a:	d0f0      	beq.n	800264e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	2380      	movs	r3, #128	; 0x80
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	429a      	cmp	r2, r3
 8002676:	d107      	bne.n	8002688 <HAL_RCC_OscConfig+0x4cc>
 8002678:	4b70      	ldr	r3, [pc, #448]	; (800283c <HAL_RCC_OscConfig+0x680>)
 800267a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800267c:	4b6f      	ldr	r3, [pc, #444]	; (800283c <HAL_RCC_OscConfig+0x680>)
 800267e:	2180      	movs	r1, #128	; 0x80
 8002680:	0049      	lsls	r1, r1, #1
 8002682:	430a      	orrs	r2, r1
 8002684:	651a      	str	r2, [r3, #80]	; 0x50
 8002686:	e031      	b.n	80026ec <HAL_RCC_OscConfig+0x530>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10c      	bne.n	80026aa <HAL_RCC_OscConfig+0x4ee>
 8002690:	4b6a      	ldr	r3, [pc, #424]	; (800283c <HAL_RCC_OscConfig+0x680>)
 8002692:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002694:	4b69      	ldr	r3, [pc, #420]	; (800283c <HAL_RCC_OscConfig+0x680>)
 8002696:	496b      	ldr	r1, [pc, #428]	; (8002844 <HAL_RCC_OscConfig+0x688>)
 8002698:	400a      	ands	r2, r1
 800269a:	651a      	str	r2, [r3, #80]	; 0x50
 800269c:	4b67      	ldr	r3, [pc, #412]	; (800283c <HAL_RCC_OscConfig+0x680>)
 800269e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026a0:	4b66      	ldr	r3, [pc, #408]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80026a2:	496a      	ldr	r1, [pc, #424]	; (800284c <HAL_RCC_OscConfig+0x690>)
 80026a4:	400a      	ands	r2, r1
 80026a6:	651a      	str	r2, [r3, #80]	; 0x50
 80026a8:	e020      	b.n	80026ec <HAL_RCC_OscConfig+0x530>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	23a0      	movs	r3, #160	; 0xa0
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d10e      	bne.n	80026d4 <HAL_RCC_OscConfig+0x518>
 80026b6:	4b61      	ldr	r3, [pc, #388]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80026b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026ba:	4b60      	ldr	r3, [pc, #384]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80026bc:	2180      	movs	r1, #128	; 0x80
 80026be:	00c9      	lsls	r1, r1, #3
 80026c0:	430a      	orrs	r2, r1
 80026c2:	651a      	str	r2, [r3, #80]	; 0x50
 80026c4:	4b5d      	ldr	r3, [pc, #372]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80026c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026c8:	4b5c      	ldr	r3, [pc, #368]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80026ca:	2180      	movs	r1, #128	; 0x80
 80026cc:	0049      	lsls	r1, r1, #1
 80026ce:	430a      	orrs	r2, r1
 80026d0:	651a      	str	r2, [r3, #80]	; 0x50
 80026d2:	e00b      	b.n	80026ec <HAL_RCC_OscConfig+0x530>
 80026d4:	4b59      	ldr	r3, [pc, #356]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80026d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026d8:	4b58      	ldr	r3, [pc, #352]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80026da:	495a      	ldr	r1, [pc, #360]	; (8002844 <HAL_RCC_OscConfig+0x688>)
 80026dc:	400a      	ands	r2, r1
 80026de:	651a      	str	r2, [r3, #80]	; 0x50
 80026e0:	4b56      	ldr	r3, [pc, #344]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80026e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026e4:	4b55      	ldr	r3, [pc, #340]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80026e6:	4959      	ldr	r1, [pc, #356]	; (800284c <HAL_RCC_OscConfig+0x690>)
 80026e8:	400a      	ands	r2, r1
 80026ea:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d015      	beq.n	8002720 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f4:	f7fe fdba 	bl	800126c <HAL_GetTick>
 80026f8:	0003      	movs	r3, r0
 80026fa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026fc:	e009      	b.n	8002712 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026fe:	f7fe fdb5 	bl	800126c <HAL_GetTick>
 8002702:	0002      	movs	r2, r0
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	4a51      	ldr	r2, [pc, #324]	; (8002850 <HAL_RCC_OscConfig+0x694>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e0ca      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002712:	4b4a      	ldr	r3, [pc, #296]	; (800283c <HAL_RCC_OscConfig+0x680>)
 8002714:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002716:	2380      	movs	r3, #128	; 0x80
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4013      	ands	r3, r2
 800271c:	d0ef      	beq.n	80026fe <HAL_RCC_OscConfig+0x542>
 800271e:	e014      	b.n	800274a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002720:	f7fe fda4 	bl	800126c <HAL_GetTick>
 8002724:	0003      	movs	r3, r0
 8002726:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002728:	e009      	b.n	800273e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800272a:	f7fe fd9f 	bl	800126c <HAL_GetTick>
 800272e:	0002      	movs	r2, r0
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	4a46      	ldr	r2, [pc, #280]	; (8002850 <HAL_RCC_OscConfig+0x694>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e0b4      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800273e:	4b3f      	ldr	r3, [pc, #252]	; (800283c <HAL_RCC_OscConfig+0x680>)
 8002740:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002742:	2380      	movs	r3, #128	; 0x80
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4013      	ands	r3, r2
 8002748:	d1ef      	bne.n	800272a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800274a:	2323      	movs	r3, #35	; 0x23
 800274c:	18fb      	adds	r3, r7, r3
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d105      	bne.n	8002760 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002754:	4b39      	ldr	r3, [pc, #228]	; (800283c <HAL_RCC_OscConfig+0x680>)
 8002756:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002758:	4b38      	ldr	r3, [pc, #224]	; (800283c <HAL_RCC_OscConfig+0x680>)
 800275a:	493e      	ldr	r1, [pc, #248]	; (8002854 <HAL_RCC_OscConfig+0x698>)
 800275c:	400a      	ands	r2, r1
 800275e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	2b00      	cmp	r3, #0
 8002766:	d100      	bne.n	800276a <HAL_RCC_OscConfig+0x5ae>
 8002768:	e09d      	b.n	80028a6 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	2b0c      	cmp	r3, #12
 800276e:	d100      	bne.n	8002772 <HAL_RCC_OscConfig+0x5b6>
 8002770:	e076      	b.n	8002860 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	2b02      	cmp	r3, #2
 8002778:	d145      	bne.n	8002806 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800277a:	4b30      	ldr	r3, [pc, #192]	; (800283c <HAL_RCC_OscConfig+0x680>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	4b2f      	ldr	r3, [pc, #188]	; (800283c <HAL_RCC_OscConfig+0x680>)
 8002780:	4935      	ldr	r1, [pc, #212]	; (8002858 <HAL_RCC_OscConfig+0x69c>)
 8002782:	400a      	ands	r2, r1
 8002784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002786:	f7fe fd71 	bl	800126c <HAL_GetTick>
 800278a:	0003      	movs	r3, r0
 800278c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002790:	f7fe fd6c 	bl	800126c <HAL_GetTick>
 8002794:	0002      	movs	r2, r0
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e082      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80027a2:	4b26      	ldr	r3, [pc, #152]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	2380      	movs	r3, #128	; 0x80
 80027a8:	049b      	lsls	r3, r3, #18
 80027aa:	4013      	ands	r3, r2
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027ae:	4b23      	ldr	r3, [pc, #140]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	4a2a      	ldr	r2, [pc, #168]	; (800285c <HAL_RCC_OscConfig+0x6a0>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	0019      	movs	r1, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c0:	431a      	orrs	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	431a      	orrs	r2, r3
 80027c8:	4b1c      	ldr	r3, [pc, #112]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80027ca:	430a      	orrs	r2, r1
 80027cc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ce:	4b1b      	ldr	r3, [pc, #108]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	4b1a      	ldr	r3, [pc, #104]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80027d4:	2180      	movs	r1, #128	; 0x80
 80027d6:	0449      	lsls	r1, r1, #17
 80027d8:	430a      	orrs	r2, r1
 80027da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027dc:	f7fe fd46 	bl	800126c <HAL_GetTick>
 80027e0:	0003      	movs	r3, r0
 80027e2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e6:	f7fe fd41 	bl	800126c <HAL_GetTick>
 80027ea:	0002      	movs	r2, r0
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e057      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80027f8:	4b10      	ldr	r3, [pc, #64]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	2380      	movs	r3, #128	; 0x80
 80027fe:	049b      	lsls	r3, r3, #18
 8002800:	4013      	ands	r3, r2
 8002802:	d0f0      	beq.n	80027e6 <HAL_RCC_OscConfig+0x62a>
 8002804:	e04f      	b.n	80028a6 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002806:	4b0d      	ldr	r3, [pc, #52]	; (800283c <HAL_RCC_OscConfig+0x680>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	4b0c      	ldr	r3, [pc, #48]	; (800283c <HAL_RCC_OscConfig+0x680>)
 800280c:	4912      	ldr	r1, [pc, #72]	; (8002858 <HAL_RCC_OscConfig+0x69c>)
 800280e:	400a      	ands	r2, r1
 8002810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002812:	f7fe fd2b 	bl	800126c <HAL_GetTick>
 8002816:	0003      	movs	r3, r0
 8002818:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800281c:	f7fe fd26 	bl	800126c <HAL_GetTick>
 8002820:	0002      	movs	r2, r0
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e03c      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800282e:	4b03      	ldr	r3, [pc, #12]	; (800283c <HAL_RCC_OscConfig+0x680>)
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	2380      	movs	r3, #128	; 0x80
 8002834:	049b      	lsls	r3, r3, #18
 8002836:	4013      	ands	r3, r2
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0x660>
 800283a:	e034      	b.n	80028a6 <HAL_RCC_OscConfig+0x6ea>
 800283c:	40021000 	.word	0x40021000
 8002840:	ffff1fff 	.word	0xffff1fff
 8002844:	fffffeff 	.word	0xfffffeff
 8002848:	40007000 	.word	0x40007000
 800284c:	fffffbff 	.word	0xfffffbff
 8002850:	00001388 	.word	0x00001388
 8002854:	efffffff 	.word	0xefffffff
 8002858:	feffffff 	.word	0xfeffffff
 800285c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	2b01      	cmp	r3, #1
 8002866:	d101      	bne.n	800286c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e01d      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800286c:	4b10      	ldr	r3, [pc, #64]	; (80028b0 <HAL_RCC_OscConfig+0x6f4>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	2380      	movs	r3, #128	; 0x80
 8002876:	025b      	lsls	r3, r3, #9
 8002878:	401a      	ands	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287e:	429a      	cmp	r2, r3
 8002880:	d10f      	bne.n	80028a2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	23f0      	movs	r3, #240	; 0xf0
 8002886:	039b      	lsls	r3, r3, #14
 8002888:	401a      	ands	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800288e:	429a      	cmp	r2, r3
 8002890:	d107      	bne.n	80028a2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	23c0      	movs	r3, #192	; 0xc0
 8002896:	041b      	lsls	r3, r3, #16
 8002898:	401a      	ands	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800289e:	429a      	cmp	r2, r3
 80028a0:	d001      	beq.n	80028a6 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	0018      	movs	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	b00a      	add	sp, #40	; 0x28
 80028ae:	bdb0      	pop	{r4, r5, r7, pc}
 80028b0:	40021000 	.word	0x40021000

080028b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028b4:	b5b0      	push	{r4, r5, r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e128      	b.n	8002b1a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028c8:	4b96      	ldr	r3, [pc, #600]	; (8002b24 <HAL_RCC_ClockConfig+0x270>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2201      	movs	r2, #1
 80028ce:	4013      	ands	r3, r2
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d91e      	bls.n	8002914 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d6:	4b93      	ldr	r3, [pc, #588]	; (8002b24 <HAL_RCC_ClockConfig+0x270>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2201      	movs	r2, #1
 80028dc:	4393      	bics	r3, r2
 80028de:	0019      	movs	r1, r3
 80028e0:	4b90      	ldr	r3, [pc, #576]	; (8002b24 <HAL_RCC_ClockConfig+0x270>)
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028e8:	f7fe fcc0 	bl	800126c <HAL_GetTick>
 80028ec:	0003      	movs	r3, r0
 80028ee:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f0:	e009      	b.n	8002906 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f2:	f7fe fcbb 	bl	800126c <HAL_GetTick>
 80028f6:	0002      	movs	r2, r0
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	4a8a      	ldr	r2, [pc, #552]	; (8002b28 <HAL_RCC_ClockConfig+0x274>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e109      	b.n	8002b1a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002906:	4b87      	ldr	r3, [pc, #540]	; (8002b24 <HAL_RCC_ClockConfig+0x270>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2201      	movs	r2, #1
 800290c:	4013      	ands	r3, r2
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d1ee      	bne.n	80028f2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2202      	movs	r2, #2
 800291a:	4013      	ands	r3, r2
 800291c:	d009      	beq.n	8002932 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800291e:	4b83      	ldr	r3, [pc, #524]	; (8002b2c <HAL_RCC_ClockConfig+0x278>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	22f0      	movs	r2, #240	; 0xf0
 8002924:	4393      	bics	r3, r2
 8002926:	0019      	movs	r1, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	4b7f      	ldr	r3, [pc, #508]	; (8002b2c <HAL_RCC_ClockConfig+0x278>)
 800292e:	430a      	orrs	r2, r1
 8002930:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2201      	movs	r2, #1
 8002938:	4013      	ands	r3, r2
 800293a:	d100      	bne.n	800293e <HAL_RCC_ClockConfig+0x8a>
 800293c:	e089      	b.n	8002a52 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b02      	cmp	r3, #2
 8002944:	d107      	bne.n	8002956 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002946:	4b79      	ldr	r3, [pc, #484]	; (8002b2c <HAL_RCC_ClockConfig+0x278>)
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	2380      	movs	r3, #128	; 0x80
 800294c:	029b      	lsls	r3, r3, #10
 800294e:	4013      	ands	r3, r2
 8002950:	d120      	bne.n	8002994 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e0e1      	b.n	8002b1a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b03      	cmp	r3, #3
 800295c:	d107      	bne.n	800296e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800295e:	4b73      	ldr	r3, [pc, #460]	; (8002b2c <HAL_RCC_ClockConfig+0x278>)
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	2380      	movs	r3, #128	; 0x80
 8002964:	049b      	lsls	r3, r3, #18
 8002966:	4013      	ands	r3, r2
 8002968:	d114      	bne.n	8002994 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e0d5      	b.n	8002b1a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d106      	bne.n	8002984 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002976:	4b6d      	ldr	r3, [pc, #436]	; (8002b2c <HAL_RCC_ClockConfig+0x278>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2204      	movs	r2, #4
 800297c:	4013      	ands	r3, r2
 800297e:	d109      	bne.n	8002994 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e0ca      	b.n	8002b1a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002984:	4b69      	ldr	r3, [pc, #420]	; (8002b2c <HAL_RCC_ClockConfig+0x278>)
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	2380      	movs	r3, #128	; 0x80
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4013      	ands	r3, r2
 800298e:	d101      	bne.n	8002994 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0c2      	b.n	8002b1a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002994:	4b65      	ldr	r3, [pc, #404]	; (8002b2c <HAL_RCC_ClockConfig+0x278>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	2203      	movs	r2, #3
 800299a:	4393      	bics	r3, r2
 800299c:	0019      	movs	r1, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	4b62      	ldr	r3, [pc, #392]	; (8002b2c <HAL_RCC_ClockConfig+0x278>)
 80029a4:	430a      	orrs	r2, r1
 80029a6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029a8:	f7fe fc60 	bl	800126c <HAL_GetTick>
 80029ac:	0003      	movs	r3, r0
 80029ae:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d111      	bne.n	80029dc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80029b8:	e009      	b.n	80029ce <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ba:	f7fe fc57 	bl	800126c <HAL_GetTick>
 80029be:	0002      	movs	r2, r0
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	4a58      	ldr	r2, [pc, #352]	; (8002b28 <HAL_RCC_ClockConfig+0x274>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e0a5      	b.n	8002b1a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80029ce:	4b57      	ldr	r3, [pc, #348]	; (8002b2c <HAL_RCC_ClockConfig+0x278>)
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	220c      	movs	r2, #12
 80029d4:	4013      	ands	r3, r2
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d1ef      	bne.n	80029ba <HAL_RCC_ClockConfig+0x106>
 80029da:	e03a      	b.n	8002a52 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b03      	cmp	r3, #3
 80029e2:	d111      	bne.n	8002a08 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029e4:	e009      	b.n	80029fa <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e6:	f7fe fc41 	bl	800126c <HAL_GetTick>
 80029ea:	0002      	movs	r2, r0
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	4a4d      	ldr	r2, [pc, #308]	; (8002b28 <HAL_RCC_ClockConfig+0x274>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e08f      	b.n	8002b1a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029fa:	4b4c      	ldr	r3, [pc, #304]	; (8002b2c <HAL_RCC_ClockConfig+0x278>)
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	220c      	movs	r2, #12
 8002a00:	4013      	ands	r3, r2
 8002a02:	2b0c      	cmp	r3, #12
 8002a04:	d1ef      	bne.n	80029e6 <HAL_RCC_ClockConfig+0x132>
 8002a06:	e024      	b.n	8002a52 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d11b      	bne.n	8002a48 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a10:	e009      	b.n	8002a26 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a12:	f7fe fc2b 	bl	800126c <HAL_GetTick>
 8002a16:	0002      	movs	r2, r0
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	4a42      	ldr	r2, [pc, #264]	; (8002b28 <HAL_RCC_ClockConfig+0x274>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e079      	b.n	8002b1a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a26:	4b41      	ldr	r3, [pc, #260]	; (8002b2c <HAL_RCC_ClockConfig+0x278>)
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	220c      	movs	r2, #12
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d1ef      	bne.n	8002a12 <HAL_RCC_ClockConfig+0x15e>
 8002a32:	e00e      	b.n	8002a52 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a34:	f7fe fc1a 	bl	800126c <HAL_GetTick>
 8002a38:	0002      	movs	r2, r0
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	4a3a      	ldr	r2, [pc, #232]	; (8002b28 <HAL_RCC_ClockConfig+0x274>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e068      	b.n	8002b1a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a48:	4b38      	ldr	r3, [pc, #224]	; (8002b2c <HAL_RCC_ClockConfig+0x278>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	220c      	movs	r2, #12
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a52:	4b34      	ldr	r3, [pc, #208]	; (8002b24 <HAL_RCC_ClockConfig+0x270>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2201      	movs	r2, #1
 8002a58:	4013      	ands	r3, r2
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d21e      	bcs.n	8002a9e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a60:	4b30      	ldr	r3, [pc, #192]	; (8002b24 <HAL_RCC_ClockConfig+0x270>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2201      	movs	r2, #1
 8002a66:	4393      	bics	r3, r2
 8002a68:	0019      	movs	r1, r3
 8002a6a:	4b2e      	ldr	r3, [pc, #184]	; (8002b24 <HAL_RCC_ClockConfig+0x270>)
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a72:	f7fe fbfb 	bl	800126c <HAL_GetTick>
 8002a76:	0003      	movs	r3, r0
 8002a78:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7a:	e009      	b.n	8002a90 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a7c:	f7fe fbf6 	bl	800126c <HAL_GetTick>
 8002a80:	0002      	movs	r2, r0
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	4a28      	ldr	r2, [pc, #160]	; (8002b28 <HAL_RCC_ClockConfig+0x274>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e044      	b.n	8002b1a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a90:	4b24      	ldr	r3, [pc, #144]	; (8002b24 <HAL_RCC_ClockConfig+0x270>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2201      	movs	r2, #1
 8002a96:	4013      	ands	r3, r2
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d1ee      	bne.n	8002a7c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2204      	movs	r2, #4
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d009      	beq.n	8002abc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aa8:	4b20      	ldr	r3, [pc, #128]	; (8002b2c <HAL_RCC_ClockConfig+0x278>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4a20      	ldr	r2, [pc, #128]	; (8002b30 <HAL_RCC_ClockConfig+0x27c>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	0019      	movs	r1, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	4b1d      	ldr	r3, [pc, #116]	; (8002b2c <HAL_RCC_ClockConfig+0x278>)
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2208      	movs	r2, #8
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	d00a      	beq.n	8002adc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ac6:	4b19      	ldr	r3, [pc, #100]	; (8002b2c <HAL_RCC_ClockConfig+0x278>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	4a1a      	ldr	r2, [pc, #104]	; (8002b34 <HAL_RCC_ClockConfig+0x280>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	0019      	movs	r1, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	00da      	lsls	r2, r3, #3
 8002ad6:	4b15      	ldr	r3, [pc, #84]	; (8002b2c <HAL_RCC_ClockConfig+0x278>)
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002adc:	f000 f832 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 8002ae0:	0001      	movs	r1, r0
 8002ae2:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <HAL_RCC_ClockConfig+0x278>)
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	091b      	lsrs	r3, r3, #4
 8002ae8:	220f      	movs	r2, #15
 8002aea:	4013      	ands	r3, r2
 8002aec:	4a12      	ldr	r2, [pc, #72]	; (8002b38 <HAL_RCC_ClockConfig+0x284>)
 8002aee:	5cd3      	ldrb	r3, [r2, r3]
 8002af0:	000a      	movs	r2, r1
 8002af2:	40da      	lsrs	r2, r3
 8002af4:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <HAL_RCC_ClockConfig+0x288>)
 8002af6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002af8:	4b11      	ldr	r3, [pc, #68]	; (8002b40 <HAL_RCC_ClockConfig+0x28c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	250b      	movs	r5, #11
 8002afe:	197c      	adds	r4, r7, r5
 8002b00:	0018      	movs	r0, r3
 8002b02:	f7fe fb6d 	bl	80011e0 <HAL_InitTick>
 8002b06:	0003      	movs	r3, r0
 8002b08:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002b0a:	197b      	adds	r3, r7, r5
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d002      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002b12:	197b      	adds	r3, r7, r5
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	e000      	b.n	8002b1a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	b004      	add	sp, #16
 8002b20:	bdb0      	pop	{r4, r5, r7, pc}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	40022000 	.word	0x40022000
 8002b28:	00001388 	.word	0x00001388
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	fffff8ff 	.word	0xfffff8ff
 8002b34:	ffffc7ff 	.word	0xffffc7ff
 8002b38:	08004390 	.word	0x08004390
 8002b3c:	20000014 	.word	0x20000014
 8002b40:	20000018 	.word	0x20000018

08002b44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b44:	b5b0      	push	{r4, r5, r7, lr}
 8002b46:	b08e      	sub	sp, #56	; 0x38
 8002b48:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002b4a:	4b4c      	ldr	r3, [pc, #304]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x138>)
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b52:	230c      	movs	r3, #12
 8002b54:	4013      	ands	r3, r2
 8002b56:	2b0c      	cmp	r3, #12
 8002b58:	d014      	beq.n	8002b84 <HAL_RCC_GetSysClockFreq+0x40>
 8002b5a:	d900      	bls.n	8002b5e <HAL_RCC_GetSysClockFreq+0x1a>
 8002b5c:	e07b      	b.n	8002c56 <HAL_RCC_GetSysClockFreq+0x112>
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d002      	beq.n	8002b68 <HAL_RCC_GetSysClockFreq+0x24>
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d00b      	beq.n	8002b7e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b66:	e076      	b.n	8002c56 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002b68:	4b44      	ldr	r3, [pc, #272]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x138>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2210      	movs	r2, #16
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d002      	beq.n	8002b78 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002b72:	4b43      	ldr	r3, [pc, #268]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002b74:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002b76:	e07c      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002b78:	4b42      	ldr	r3, [pc, #264]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x140>)
 8002b7a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b7c:	e079      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b7e:	4b42      	ldr	r3, [pc, #264]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x144>)
 8002b80:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b82:	e076      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b86:	0c9a      	lsrs	r2, r3, #18
 8002b88:	230f      	movs	r3, #15
 8002b8a:	401a      	ands	r2, r3
 8002b8c:	4b3f      	ldr	r3, [pc, #252]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x148>)
 8002b8e:	5c9b      	ldrb	r3, [r3, r2]
 8002b90:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b94:	0d9a      	lsrs	r2, r3, #22
 8002b96:	2303      	movs	r3, #3
 8002b98:	4013      	ands	r3, r2
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b9e:	4b37      	ldr	r3, [pc, #220]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x138>)
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	2380      	movs	r3, #128	; 0x80
 8002ba4:	025b      	lsls	r3, r3, #9
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d01a      	beq.n	8002be0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bac:	61bb      	str	r3, [r7, #24]
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
 8002bb2:	4a35      	ldr	r2, [pc, #212]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x144>)
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	69b8      	ldr	r0, [r7, #24]
 8002bb8:	69f9      	ldr	r1, [r7, #28]
 8002bba:	f7fd fc45 	bl	8000448 <__aeabi_lmul>
 8002bbe:	0002      	movs	r2, r0
 8002bc0:	000b      	movs	r3, r1
 8002bc2:	0010      	movs	r0, r2
 8002bc4:	0019      	movs	r1, r3
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	613b      	str	r3, [r7, #16]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	f7fd fc19 	bl	8000408 <__aeabi_uldivmod>
 8002bd6:	0002      	movs	r2, r0
 8002bd8:	000b      	movs	r3, r1
 8002bda:	0013      	movs	r3, r2
 8002bdc:	637b      	str	r3, [r7, #52]	; 0x34
 8002bde:	e037      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002be0:	4b26      	ldr	r3, [pc, #152]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x138>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2210      	movs	r2, #16
 8002be6:	4013      	ands	r3, r2
 8002be8:	d01a      	beq.n	8002c20 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bec:	60bb      	str	r3, [r7, #8]
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	4a23      	ldr	r2, [pc, #140]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	68b8      	ldr	r0, [r7, #8]
 8002bf8:	68f9      	ldr	r1, [r7, #12]
 8002bfa:	f7fd fc25 	bl	8000448 <__aeabi_lmul>
 8002bfe:	0002      	movs	r2, r0
 8002c00:	000b      	movs	r3, r1
 8002c02:	0010      	movs	r0, r2
 8002c04:	0019      	movs	r1, r3
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	603b      	str	r3, [r7, #0]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	607b      	str	r3, [r7, #4]
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f7fd fbf9 	bl	8000408 <__aeabi_uldivmod>
 8002c16:	0002      	movs	r2, r0
 8002c18:	000b      	movs	r3, r1
 8002c1a:	0013      	movs	r3, r2
 8002c1c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c1e:	e017      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c22:	0018      	movs	r0, r3
 8002c24:	2300      	movs	r3, #0
 8002c26:	0019      	movs	r1, r3
 8002c28:	4a16      	ldr	r2, [pc, #88]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x140>)
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f7fd fc0c 	bl	8000448 <__aeabi_lmul>
 8002c30:	0002      	movs	r2, r0
 8002c32:	000b      	movs	r3, r1
 8002c34:	0010      	movs	r0, r2
 8002c36:	0019      	movs	r1, r3
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	001c      	movs	r4, r3
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	001d      	movs	r5, r3
 8002c40:	0022      	movs	r2, r4
 8002c42:	002b      	movs	r3, r5
 8002c44:	f7fd fbe0 	bl	8000408 <__aeabi_uldivmod>
 8002c48:	0002      	movs	r2, r0
 8002c4a:	000b      	movs	r3, r1
 8002c4c:	0013      	movs	r3, r2
 8002c4e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c52:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c54:	e00d      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002c56:	4b09      	ldr	r3, [pc, #36]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x138>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	0b5b      	lsrs	r3, r3, #13
 8002c5c:	2207      	movs	r2, #7
 8002c5e:	4013      	ands	r3, r2
 8002c60:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002c62:	6a3b      	ldr	r3, [r7, #32]
 8002c64:	3301      	adds	r3, #1
 8002c66:	2280      	movs	r2, #128	; 0x80
 8002c68:	0212      	lsls	r2, r2, #8
 8002c6a:	409a      	lsls	r2, r3
 8002c6c:	0013      	movs	r3, r2
 8002c6e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c70:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002c74:	0018      	movs	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b00e      	add	sp, #56	; 0x38
 8002c7a:	bdb0      	pop	{r4, r5, r7, pc}
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	003d0900 	.word	0x003d0900
 8002c84:	00f42400 	.word	0x00f42400
 8002c88:	007a1200 	.word	0x007a1200
 8002c8c:	080043a8 	.word	0x080043a8

08002c90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c94:	4b02      	ldr	r3, [pc, #8]	; (8002ca0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c96:	681b      	ldr	r3, [r3, #0]
}
 8002c98:	0018      	movs	r0, r3
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	20000014 	.word	0x20000014

08002ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ca8:	f7ff fff2 	bl	8002c90 <HAL_RCC_GetHCLKFreq>
 8002cac:	0001      	movs	r1, r0
 8002cae:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	0a1b      	lsrs	r3, r3, #8
 8002cb4:	2207      	movs	r2, #7
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	4a04      	ldr	r2, [pc, #16]	; (8002ccc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cba:	5cd3      	ldrb	r3, [r2, r3]
 8002cbc:	40d9      	lsrs	r1, r3
 8002cbe:	000b      	movs	r3, r1
}
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	080043a0 	.word	0x080043a0

08002cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cd4:	f7ff ffdc 	bl	8002c90 <HAL_RCC_GetHCLKFreq>
 8002cd8:	0001      	movs	r1, r0
 8002cda:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	0adb      	lsrs	r3, r3, #11
 8002ce0:	2207      	movs	r2, #7
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	4a04      	ldr	r2, [pc, #16]	; (8002cf8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ce6:	5cd3      	ldrb	r3, [r2, r3]
 8002ce8:	40d9      	lsrs	r1, r3
 8002cea:	000b      	movs	r3, r1
}
 8002cec:	0018      	movs	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	080043a0 	.word	0x080043a0

08002cfc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002d04:	2017      	movs	r0, #23
 8002d06:	183b      	adds	r3, r7, r0
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2220      	movs	r2, #32
 8002d12:	4013      	ands	r3, r2
 8002d14:	d100      	bne.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002d16:	e0c2      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d18:	4b81      	ldr	r3, [pc, #516]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002d1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d1c:	2380      	movs	r3, #128	; 0x80
 8002d1e:	055b      	lsls	r3, r3, #21
 8002d20:	4013      	ands	r3, r2
 8002d22:	d109      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d24:	4b7e      	ldr	r3, [pc, #504]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002d26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d28:	4b7d      	ldr	r3, [pc, #500]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002d2a:	2180      	movs	r1, #128	; 0x80
 8002d2c:	0549      	lsls	r1, r1, #21
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002d32:	183b      	adds	r3, r7, r0
 8002d34:	2201      	movs	r2, #1
 8002d36:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d38:	4b7a      	ldr	r3, [pc, #488]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	2380      	movs	r3, #128	; 0x80
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	4013      	ands	r3, r2
 8002d42:	d11a      	bne.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d44:	4b77      	ldr	r3, [pc, #476]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	4b76      	ldr	r3, [pc, #472]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002d4a:	2180      	movs	r1, #128	; 0x80
 8002d4c:	0049      	lsls	r1, r1, #1
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d52:	f7fe fa8b 	bl	800126c <HAL_GetTick>
 8002d56:	0003      	movs	r3, r0
 8002d58:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5a:	e008      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d5c:	f7fe fa86 	bl	800126c <HAL_GetTick>
 8002d60:	0002      	movs	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b64      	cmp	r3, #100	; 0x64
 8002d68:	d901      	bls.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e0d4      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6e:	4b6d      	ldr	r3, [pc, #436]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	2380      	movs	r3, #128	; 0x80
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	4013      	ands	r3, r2
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002d7a:	4b69      	ldr	r3, [pc, #420]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	23c0      	movs	r3, #192	; 0xc0
 8002d80:	039b      	lsls	r3, r3, #14
 8002d82:	4013      	ands	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	23c0      	movs	r3, #192	; 0xc0
 8002d8c:	039b      	lsls	r3, r3, #14
 8002d8e:	4013      	ands	r3, r2
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d013      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	23c0      	movs	r3, #192	; 0xc0
 8002d9c:	029b      	lsls	r3, r3, #10
 8002d9e:	401a      	ands	r2, r3
 8002da0:	23c0      	movs	r3, #192	; 0xc0
 8002da2:	029b      	lsls	r3, r3, #10
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d10a      	bne.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002da8:	4b5d      	ldr	r3, [pc, #372]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	2380      	movs	r3, #128	; 0x80
 8002dae:	029b      	lsls	r3, r3, #10
 8002db0:	401a      	ands	r2, r3
 8002db2:	2380      	movs	r3, #128	; 0x80
 8002db4:	029b      	lsls	r3, r3, #10
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d101      	bne.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e0ac      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002dbe:	4b58      	ldr	r3, [pc, #352]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002dc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002dc2:	23c0      	movs	r3, #192	; 0xc0
 8002dc4:	029b      	lsls	r3, r3, #10
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d03b      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	23c0      	movs	r3, #192	; 0xc0
 8002dd6:	029b      	lsls	r3, r3, #10
 8002dd8:	4013      	ands	r3, r2
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d033      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2220      	movs	r2, #32
 8002de6:	4013      	ands	r3, r2
 8002de8:	d02e      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002dea:	4b4d      	ldr	r3, [pc, #308]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dee:	4a4e      	ldr	r2, [pc, #312]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002df4:	4b4a      	ldr	r3, [pc, #296]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002df6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002df8:	4b49      	ldr	r3, [pc, #292]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002dfa:	2180      	movs	r1, #128	; 0x80
 8002dfc:	0309      	lsls	r1, r1, #12
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e02:	4b47      	ldr	r3, [pc, #284]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002e04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e06:	4b46      	ldr	r3, [pc, #280]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002e08:	4948      	ldr	r1, [pc, #288]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002e0a:	400a      	ands	r2, r1
 8002e0c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002e0e:	4b44      	ldr	r3, [pc, #272]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	2380      	movs	r3, #128	; 0x80
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	d014      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1e:	f7fe fa25 	bl	800126c <HAL_GetTick>
 8002e22:	0003      	movs	r3, r0
 8002e24:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e26:	e009      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e28:	f7fe fa20 	bl	800126c <HAL_GetTick>
 8002e2c:	0002      	movs	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	4a3f      	ldr	r2, [pc, #252]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e06d      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e3c:	4b38      	ldr	r3, [pc, #224]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002e3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e40:	2380      	movs	r3, #128	; 0x80
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4013      	ands	r3, r2
 8002e46:	d0ef      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	23c0      	movs	r3, #192	; 0xc0
 8002e4e:	029b      	lsls	r3, r3, #10
 8002e50:	401a      	ands	r2, r3
 8002e52:	23c0      	movs	r3, #192	; 0xc0
 8002e54:	029b      	lsls	r3, r3, #10
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d10c      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002e5a:	4b31      	ldr	r3, [pc, #196]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a35      	ldr	r2, [pc, #212]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002e60:	4013      	ands	r3, r2
 8002e62:	0019      	movs	r1, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	23c0      	movs	r3, #192	; 0xc0
 8002e6a:	039b      	lsls	r3, r3, #14
 8002e6c:	401a      	ands	r2, r3
 8002e6e:	4b2c      	ldr	r3, [pc, #176]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002e70:	430a      	orrs	r2, r1
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	4b2a      	ldr	r3, [pc, #168]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002e76:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	23c0      	movs	r3, #192	; 0xc0
 8002e7e:	029b      	lsls	r3, r3, #10
 8002e80:	401a      	ands	r2, r3
 8002e82:	4b27      	ldr	r3, [pc, #156]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002e84:	430a      	orrs	r2, r1
 8002e86:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e88:	2317      	movs	r3, #23
 8002e8a:	18fb      	adds	r3, r7, r3
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d105      	bne.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e92:	4b23      	ldr	r3, [pc, #140]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002e94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e96:	4b22      	ldr	r3, [pc, #136]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002e98:	4927      	ldr	r1, [pc, #156]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002e9a:	400a      	ands	r2, r1
 8002e9c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	d009      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ea8:	4b1d      	ldr	r3, [pc, #116]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eac:	220c      	movs	r2, #12
 8002eae:	4393      	bics	r3, r2
 8002eb0:	0019      	movs	r1, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	4b1a      	ldr	r3, [pc, #104]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2204      	movs	r2, #4
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	d009      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ec6:	4b16      	ldr	r3, [pc, #88]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eca:	4a1c      	ldr	r2, [pc, #112]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	0019      	movs	r1, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2208      	movs	r2, #8
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	d009      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ee4:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ee8:	4a15      	ldr	r2, [pc, #84]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002eea:	4013      	ands	r3, r2
 8002eec:	0019      	movs	r1, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	691a      	ldr	r2, [r3, #16]
 8002ef2:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2280      	movs	r2, #128	; 0x80
 8002efe:	4013      	ands	r3, r2
 8002f00:	d009      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002f02:	4b07      	ldr	r3, [pc, #28]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f06:	4a0f      	ldr	r2, [pc, #60]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	0019      	movs	r1, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	695a      	ldr	r2, [r3, #20]
 8002f10:	4b03      	ldr	r3, [pc, #12]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002f12:	430a      	orrs	r2, r1
 8002f14:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	0018      	movs	r0, r3
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	b006      	add	sp, #24
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40021000 	.word	0x40021000
 8002f24:	40007000 	.word	0x40007000
 8002f28:	fffcffff 	.word	0xfffcffff
 8002f2c:	fff7ffff 	.word	0xfff7ffff
 8002f30:	00001388 	.word	0x00001388
 8002f34:	ffcfffff 	.word	0xffcfffff
 8002f38:	efffffff 	.word	0xefffffff
 8002f3c:	fffff3ff 	.word	0xfffff3ff
 8002f40:	ffffcfff 	.word	0xffffcfff
 8002f44:	fff3ffff 	.word	0xfff3ffff

08002f48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e044      	b.n	8002fe4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d107      	bne.n	8002f72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2274      	movs	r2, #116	; 0x74
 8002f66:	2100      	movs	r1, #0
 8002f68:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	f7fd ff93 	bl	8000e98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2224      	movs	r2, #36	; 0x24
 8002f76:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2101      	movs	r1, #1
 8002f84:	438a      	bics	r2, r1
 8002f86:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f000 f8d8 	bl	8003140 <UART_SetConfig>
 8002f90:	0003      	movs	r3, r0
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e024      	b.n	8002fe4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f000 fb2d 	bl	8003604 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	490d      	ldr	r1, [pc, #52]	; (8002fec <HAL_UART_Init+0xa4>)
 8002fb6:	400a      	ands	r2, r1
 8002fb8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	212a      	movs	r1, #42	; 0x2a
 8002fc6:	438a      	bics	r2, r1
 8002fc8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f000 fbc5 	bl	800376c <UART_CheckIdleState>
 8002fe2:	0003      	movs	r3, r0
}
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	b002      	add	sp, #8
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	ffffb7ff 	.word	0xffffb7ff

08002ff0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b08a      	sub	sp, #40	; 0x28
 8002ff4:	af02      	add	r7, sp, #8
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	603b      	str	r3, [r7, #0]
 8002ffc:	1dbb      	adds	r3, r7, #6
 8002ffe:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003004:	2b20      	cmp	r3, #32
 8003006:	d000      	beq.n	800300a <HAL_UART_Transmit+0x1a>
 8003008:	e095      	b.n	8003136 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <HAL_UART_Transmit+0x28>
 8003010:	1dbb      	adds	r3, r7, #6
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e08d      	b.n	8003138 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	2380      	movs	r3, #128	; 0x80
 8003022:	015b      	lsls	r3, r3, #5
 8003024:	429a      	cmp	r2, r3
 8003026:	d109      	bne.n	800303c <HAL_UART_Transmit+0x4c>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d105      	bne.n	800303c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2201      	movs	r2, #1
 8003034:	4013      	ands	r3, r2
 8003036:	d001      	beq.n	800303c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e07d      	b.n	8003138 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2274      	movs	r2, #116	; 0x74
 8003040:	5c9b      	ldrb	r3, [r3, r2]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d101      	bne.n	800304a <HAL_UART_Transmit+0x5a>
 8003046:	2302      	movs	r3, #2
 8003048:	e076      	b.n	8003138 <HAL_UART_Transmit+0x148>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2274      	movs	r2, #116	; 0x74
 800304e:	2101      	movs	r1, #1
 8003050:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2280      	movs	r2, #128	; 0x80
 8003056:	2100      	movs	r1, #0
 8003058:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2221      	movs	r2, #33	; 0x21
 800305e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003060:	f7fe f904 	bl	800126c <HAL_GetTick>
 8003064:	0003      	movs	r3, r0
 8003066:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	1dba      	adds	r2, r7, #6
 800306c:	2150      	movs	r1, #80	; 0x50
 800306e:	8812      	ldrh	r2, [r2, #0]
 8003070:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	1dba      	adds	r2, r7, #6
 8003076:	2152      	movs	r1, #82	; 0x52
 8003078:	8812      	ldrh	r2, [r2, #0]
 800307a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	2380      	movs	r3, #128	; 0x80
 8003082:	015b      	lsls	r3, r3, #5
 8003084:	429a      	cmp	r2, r3
 8003086:	d108      	bne.n	800309a <HAL_UART_Transmit+0xaa>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d104      	bne.n	800309a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003090:	2300      	movs	r3, #0
 8003092:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	61bb      	str	r3, [r7, #24]
 8003098:	e003      	b.n	80030a2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2274      	movs	r2, #116	; 0x74
 80030a6:	2100      	movs	r1, #0
 80030a8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80030aa:	e02c      	b.n	8003106 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	0013      	movs	r3, r2
 80030b6:	2200      	movs	r2, #0
 80030b8:	2180      	movs	r1, #128	; 0x80
 80030ba:	f000 fb9f 	bl	80037fc <UART_WaitOnFlagUntilTimeout>
 80030be:	1e03      	subs	r3, r0, #0
 80030c0:	d001      	beq.n	80030c6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e038      	b.n	8003138 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10b      	bne.n	80030e4 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	001a      	movs	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	05d2      	lsls	r2, r2, #23
 80030d8:	0dd2      	lsrs	r2, r2, #23
 80030da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	3302      	adds	r3, #2
 80030e0:	61bb      	str	r3, [r7, #24]
 80030e2:	e007      	b.n	80030f4 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	781a      	ldrb	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	3301      	adds	r3, #1
 80030f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2252      	movs	r2, #82	; 0x52
 80030f8:	5a9b      	ldrh	r3, [r3, r2]
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b299      	uxth	r1, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2252      	movs	r2, #82	; 0x52
 8003104:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2252      	movs	r2, #82	; 0x52
 800310a:	5a9b      	ldrh	r3, [r3, r2]
 800310c:	b29b      	uxth	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1cc      	bne.n	80030ac <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	0013      	movs	r3, r2
 800311c:	2200      	movs	r2, #0
 800311e:	2140      	movs	r1, #64	; 0x40
 8003120:	f000 fb6c 	bl	80037fc <UART_WaitOnFlagUntilTimeout>
 8003124:	1e03      	subs	r3, r0, #0
 8003126:	d001      	beq.n	800312c <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e005      	b.n	8003138 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2220      	movs	r2, #32
 8003130:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003132:	2300      	movs	r3, #0
 8003134:	e000      	b.n	8003138 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8003136:	2302      	movs	r3, #2
  }
}
 8003138:	0018      	movs	r0, r3
 800313a:	46bd      	mov	sp, r7
 800313c:	b008      	add	sp, #32
 800313e:	bd80      	pop	{r7, pc}

08003140 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003140:	b5b0      	push	{r4, r5, r7, lr}
 8003142:	b08e      	sub	sp, #56	; 0x38
 8003144:	af00      	add	r7, sp, #0
 8003146:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003148:	231a      	movs	r3, #26
 800314a:	2218      	movs	r2, #24
 800314c:	4694      	mov	ip, r2
 800314e:	44bc      	add	ip, r7
 8003150:	4463      	add	r3, ip
 8003152:	2200      	movs	r2, #0
 8003154:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	431a      	orrs	r2, r3
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	431a      	orrs	r2, r3
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	4313      	orrs	r3, r2
 800316c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4abc      	ldr	r2, [pc, #752]	; (8003468 <UART_SetConfig+0x328>)
 8003176:	4013      	ands	r3, r2
 8003178:	0019      	movs	r1, r3
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003180:	430a      	orrs	r2, r1
 8003182:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	4ab8      	ldr	r2, [pc, #736]	; (800346c <UART_SetConfig+0x32c>)
 800318c:	4013      	ands	r3, r2
 800318e:	0019      	movs	r1, r3
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4ab2      	ldr	r2, [pc, #712]	; (8003470 <UART_SetConfig+0x330>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d004      	beq.n	80031b6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031b2:	4313      	orrs	r3, r2
 80031b4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	4aad      	ldr	r2, [pc, #692]	; (8003474 <UART_SetConfig+0x334>)
 80031be:	4013      	ands	r3, r2
 80031c0:	0019      	movs	r1, r3
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031c8:	430a      	orrs	r2, r1
 80031ca:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4aa9      	ldr	r2, [pc, #676]	; (8003478 <UART_SetConfig+0x338>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d136      	bne.n	8003244 <UART_SetConfig+0x104>
 80031d6:	4ba9      	ldr	r3, [pc, #676]	; (800347c <UART_SetConfig+0x33c>)
 80031d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031da:	220c      	movs	r2, #12
 80031dc:	4013      	ands	r3, r2
 80031de:	2b0c      	cmp	r3, #12
 80031e0:	d020      	beq.n	8003224 <UART_SetConfig+0xe4>
 80031e2:	d827      	bhi.n	8003234 <UART_SetConfig+0xf4>
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d00d      	beq.n	8003204 <UART_SetConfig+0xc4>
 80031e8:	d824      	bhi.n	8003234 <UART_SetConfig+0xf4>
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d002      	beq.n	80031f4 <UART_SetConfig+0xb4>
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d010      	beq.n	8003214 <UART_SetConfig+0xd4>
 80031f2:	e01f      	b.n	8003234 <UART_SetConfig+0xf4>
 80031f4:	231b      	movs	r3, #27
 80031f6:	2218      	movs	r2, #24
 80031f8:	4694      	mov	ip, r2
 80031fa:	44bc      	add	ip, r7
 80031fc:	4463      	add	r3, ip
 80031fe:	2200      	movs	r2, #0
 8003200:	701a      	strb	r2, [r3, #0]
 8003202:	e06f      	b.n	80032e4 <UART_SetConfig+0x1a4>
 8003204:	231b      	movs	r3, #27
 8003206:	2218      	movs	r2, #24
 8003208:	4694      	mov	ip, r2
 800320a:	44bc      	add	ip, r7
 800320c:	4463      	add	r3, ip
 800320e:	2202      	movs	r2, #2
 8003210:	701a      	strb	r2, [r3, #0]
 8003212:	e067      	b.n	80032e4 <UART_SetConfig+0x1a4>
 8003214:	231b      	movs	r3, #27
 8003216:	2218      	movs	r2, #24
 8003218:	4694      	mov	ip, r2
 800321a:	44bc      	add	ip, r7
 800321c:	4463      	add	r3, ip
 800321e:	2204      	movs	r2, #4
 8003220:	701a      	strb	r2, [r3, #0]
 8003222:	e05f      	b.n	80032e4 <UART_SetConfig+0x1a4>
 8003224:	231b      	movs	r3, #27
 8003226:	2218      	movs	r2, #24
 8003228:	4694      	mov	ip, r2
 800322a:	44bc      	add	ip, r7
 800322c:	4463      	add	r3, ip
 800322e:	2208      	movs	r2, #8
 8003230:	701a      	strb	r2, [r3, #0]
 8003232:	e057      	b.n	80032e4 <UART_SetConfig+0x1a4>
 8003234:	231b      	movs	r3, #27
 8003236:	2218      	movs	r2, #24
 8003238:	4694      	mov	ip, r2
 800323a:	44bc      	add	ip, r7
 800323c:	4463      	add	r3, ip
 800323e:	2210      	movs	r2, #16
 8003240:	701a      	strb	r2, [r3, #0]
 8003242:	e04f      	b.n	80032e4 <UART_SetConfig+0x1a4>
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a89      	ldr	r2, [pc, #548]	; (8003470 <UART_SetConfig+0x330>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d143      	bne.n	80032d6 <UART_SetConfig+0x196>
 800324e:	4b8b      	ldr	r3, [pc, #556]	; (800347c <UART_SetConfig+0x33c>)
 8003250:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003252:	23c0      	movs	r3, #192	; 0xc0
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	4013      	ands	r3, r2
 8003258:	22c0      	movs	r2, #192	; 0xc0
 800325a:	0112      	lsls	r2, r2, #4
 800325c:	4293      	cmp	r3, r2
 800325e:	d02a      	beq.n	80032b6 <UART_SetConfig+0x176>
 8003260:	22c0      	movs	r2, #192	; 0xc0
 8003262:	0112      	lsls	r2, r2, #4
 8003264:	4293      	cmp	r3, r2
 8003266:	d82e      	bhi.n	80032c6 <UART_SetConfig+0x186>
 8003268:	2280      	movs	r2, #128	; 0x80
 800326a:	0112      	lsls	r2, r2, #4
 800326c:	4293      	cmp	r3, r2
 800326e:	d012      	beq.n	8003296 <UART_SetConfig+0x156>
 8003270:	2280      	movs	r2, #128	; 0x80
 8003272:	0112      	lsls	r2, r2, #4
 8003274:	4293      	cmp	r3, r2
 8003276:	d826      	bhi.n	80032c6 <UART_SetConfig+0x186>
 8003278:	2b00      	cmp	r3, #0
 800327a:	d004      	beq.n	8003286 <UART_SetConfig+0x146>
 800327c:	2280      	movs	r2, #128	; 0x80
 800327e:	00d2      	lsls	r2, r2, #3
 8003280:	4293      	cmp	r3, r2
 8003282:	d010      	beq.n	80032a6 <UART_SetConfig+0x166>
 8003284:	e01f      	b.n	80032c6 <UART_SetConfig+0x186>
 8003286:	231b      	movs	r3, #27
 8003288:	2218      	movs	r2, #24
 800328a:	4694      	mov	ip, r2
 800328c:	44bc      	add	ip, r7
 800328e:	4463      	add	r3, ip
 8003290:	2200      	movs	r2, #0
 8003292:	701a      	strb	r2, [r3, #0]
 8003294:	e026      	b.n	80032e4 <UART_SetConfig+0x1a4>
 8003296:	231b      	movs	r3, #27
 8003298:	2218      	movs	r2, #24
 800329a:	4694      	mov	ip, r2
 800329c:	44bc      	add	ip, r7
 800329e:	4463      	add	r3, ip
 80032a0:	2202      	movs	r2, #2
 80032a2:	701a      	strb	r2, [r3, #0]
 80032a4:	e01e      	b.n	80032e4 <UART_SetConfig+0x1a4>
 80032a6:	231b      	movs	r3, #27
 80032a8:	2218      	movs	r2, #24
 80032aa:	4694      	mov	ip, r2
 80032ac:	44bc      	add	ip, r7
 80032ae:	4463      	add	r3, ip
 80032b0:	2204      	movs	r2, #4
 80032b2:	701a      	strb	r2, [r3, #0]
 80032b4:	e016      	b.n	80032e4 <UART_SetConfig+0x1a4>
 80032b6:	231b      	movs	r3, #27
 80032b8:	2218      	movs	r2, #24
 80032ba:	4694      	mov	ip, r2
 80032bc:	44bc      	add	ip, r7
 80032be:	4463      	add	r3, ip
 80032c0:	2208      	movs	r2, #8
 80032c2:	701a      	strb	r2, [r3, #0]
 80032c4:	e00e      	b.n	80032e4 <UART_SetConfig+0x1a4>
 80032c6:	231b      	movs	r3, #27
 80032c8:	2218      	movs	r2, #24
 80032ca:	4694      	mov	ip, r2
 80032cc:	44bc      	add	ip, r7
 80032ce:	4463      	add	r3, ip
 80032d0:	2210      	movs	r2, #16
 80032d2:	701a      	strb	r2, [r3, #0]
 80032d4:	e006      	b.n	80032e4 <UART_SetConfig+0x1a4>
 80032d6:	231b      	movs	r3, #27
 80032d8:	2218      	movs	r2, #24
 80032da:	4694      	mov	ip, r2
 80032dc:	44bc      	add	ip, r7
 80032de:	4463      	add	r3, ip
 80032e0:	2210      	movs	r2, #16
 80032e2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a61      	ldr	r2, [pc, #388]	; (8003470 <UART_SetConfig+0x330>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d000      	beq.n	80032f0 <UART_SetConfig+0x1b0>
 80032ee:	e088      	b.n	8003402 <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032f0:	231b      	movs	r3, #27
 80032f2:	2218      	movs	r2, #24
 80032f4:	4694      	mov	ip, r2
 80032f6:	44bc      	add	ip, r7
 80032f8:	4463      	add	r3, ip
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d01d      	beq.n	800333c <UART_SetConfig+0x1fc>
 8003300:	dc20      	bgt.n	8003344 <UART_SetConfig+0x204>
 8003302:	2b04      	cmp	r3, #4
 8003304:	d015      	beq.n	8003332 <UART_SetConfig+0x1f2>
 8003306:	dc1d      	bgt.n	8003344 <UART_SetConfig+0x204>
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <UART_SetConfig+0x1d2>
 800330c:	2b02      	cmp	r3, #2
 800330e:	d005      	beq.n	800331c <UART_SetConfig+0x1dc>
 8003310:	e018      	b.n	8003344 <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003312:	f7ff fcc7 	bl	8002ca4 <HAL_RCC_GetPCLK1Freq>
 8003316:	0003      	movs	r3, r0
 8003318:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800331a:	e01d      	b.n	8003358 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800331c:	4b57      	ldr	r3, [pc, #348]	; (800347c <UART_SetConfig+0x33c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2210      	movs	r2, #16
 8003322:	4013      	ands	r3, r2
 8003324:	d002      	beq.n	800332c <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003326:	4b56      	ldr	r3, [pc, #344]	; (8003480 <UART_SetConfig+0x340>)
 8003328:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800332a:	e015      	b.n	8003358 <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 800332c:	4b55      	ldr	r3, [pc, #340]	; (8003484 <UART_SetConfig+0x344>)
 800332e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003330:	e012      	b.n	8003358 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003332:	f7ff fc07 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 8003336:	0003      	movs	r3, r0
 8003338:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800333a:	e00d      	b.n	8003358 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800333c:	2380      	movs	r3, #128	; 0x80
 800333e:	021b      	lsls	r3, r3, #8
 8003340:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003342:	e009      	b.n	8003358 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003348:	231a      	movs	r3, #26
 800334a:	2218      	movs	r2, #24
 800334c:	4694      	mov	ip, r2
 800334e:	44bc      	add	ip, r7
 8003350:	4463      	add	r3, ip
 8003352:	2201      	movs	r2, #1
 8003354:	701a      	strb	r2, [r3, #0]
        break;
 8003356:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335a:	2b00      	cmp	r3, #0
 800335c:	d100      	bne.n	8003360 <UART_SetConfig+0x220>
 800335e:	e139      	b.n	80035d4 <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	0013      	movs	r3, r2
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	189b      	adds	r3, r3, r2
 800336a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800336c:	429a      	cmp	r2, r3
 800336e:	d305      	bcc.n	800337c <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003378:	429a      	cmp	r2, r3
 800337a:	d907      	bls.n	800338c <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 800337c:	231a      	movs	r3, #26
 800337e:	2218      	movs	r2, #24
 8003380:	4694      	mov	ip, r2
 8003382:	44bc      	add	ip, r7
 8003384:	4463      	add	r3, ip
 8003386:	2201      	movs	r2, #1
 8003388:	701a      	strb	r2, [r3, #0]
 800338a:	e123      	b.n	80035d4 <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800338c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338e:	613b      	str	r3, [r7, #16]
 8003390:	2300      	movs	r3, #0
 8003392:	617b      	str	r3, [r7, #20]
 8003394:	6939      	ldr	r1, [r7, #16]
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	000b      	movs	r3, r1
 800339a:	0e1b      	lsrs	r3, r3, #24
 800339c:	0010      	movs	r0, r2
 800339e:	0205      	lsls	r5, r0, #8
 80033a0:	431d      	orrs	r5, r3
 80033a2:	000b      	movs	r3, r1
 80033a4:	021c      	lsls	r4, r3, #8
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	085b      	lsrs	r3, r3, #1
 80033ac:	60bb      	str	r3, [r7, #8]
 80033ae:	2300      	movs	r3, #0
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	68b8      	ldr	r0, [r7, #8]
 80033b4:	68f9      	ldr	r1, [r7, #12]
 80033b6:	1900      	adds	r0, r0, r4
 80033b8:	4169      	adcs	r1, r5
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	603b      	str	r3, [r7, #0]
 80033c0:	2300      	movs	r3, #0
 80033c2:	607b      	str	r3, [r7, #4]
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f7fd f81e 	bl	8000408 <__aeabi_uldivmod>
 80033cc:	0002      	movs	r2, r0
 80033ce:	000b      	movs	r3, r1
 80033d0:	0013      	movs	r3, r2
 80033d2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033d6:	23c0      	movs	r3, #192	; 0xc0
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	429a      	cmp	r2, r3
 80033dc:	d309      	bcc.n	80033f2 <UART_SetConfig+0x2b2>
 80033de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033e0:	2380      	movs	r3, #128	; 0x80
 80033e2:	035b      	lsls	r3, r3, #13
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d204      	bcs.n	80033f2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033ee:	60da      	str	r2, [r3, #12]
 80033f0:	e0f0      	b.n	80035d4 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80033f2:	231a      	movs	r3, #26
 80033f4:	2218      	movs	r2, #24
 80033f6:	4694      	mov	ip, r2
 80033f8:	44bc      	add	ip, r7
 80033fa:	4463      	add	r3, ip
 80033fc:	2201      	movs	r2, #1
 80033fe:	701a      	strb	r2, [r3, #0]
 8003400:	e0e8      	b.n	80035d4 <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	69da      	ldr	r2, [r3, #28]
 8003406:	2380      	movs	r3, #128	; 0x80
 8003408:	021b      	lsls	r3, r3, #8
 800340a:	429a      	cmp	r2, r3
 800340c:	d000      	beq.n	8003410 <UART_SetConfig+0x2d0>
 800340e:	e087      	b.n	8003520 <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 8003410:	231b      	movs	r3, #27
 8003412:	2218      	movs	r2, #24
 8003414:	4694      	mov	ip, r2
 8003416:	44bc      	add	ip, r7
 8003418:	4463      	add	r3, ip
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b08      	cmp	r3, #8
 800341e:	d835      	bhi.n	800348c <UART_SetConfig+0x34c>
 8003420:	009a      	lsls	r2, r3, #2
 8003422:	4b19      	ldr	r3, [pc, #100]	; (8003488 <UART_SetConfig+0x348>)
 8003424:	18d3      	adds	r3, r2, r3
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800342a:	f7ff fc3b 	bl	8002ca4 <HAL_RCC_GetPCLK1Freq>
 800342e:	0003      	movs	r3, r0
 8003430:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003432:	e035      	b.n	80034a0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003434:	f7ff fc4c 	bl	8002cd0 <HAL_RCC_GetPCLK2Freq>
 8003438:	0003      	movs	r3, r0
 800343a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800343c:	e030      	b.n	80034a0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800343e:	4b0f      	ldr	r3, [pc, #60]	; (800347c <UART_SetConfig+0x33c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2210      	movs	r2, #16
 8003444:	4013      	ands	r3, r2
 8003446:	d002      	beq.n	800344e <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003448:	4b0d      	ldr	r3, [pc, #52]	; (8003480 <UART_SetConfig+0x340>)
 800344a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800344c:	e028      	b.n	80034a0 <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 800344e:	4b0d      	ldr	r3, [pc, #52]	; (8003484 <UART_SetConfig+0x344>)
 8003450:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003452:	e025      	b.n	80034a0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003454:	f7ff fb76 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 8003458:	0003      	movs	r3, r0
 800345a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800345c:	e020      	b.n	80034a0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800345e:	2380      	movs	r3, #128	; 0x80
 8003460:	021b      	lsls	r3, r3, #8
 8003462:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003464:	e01c      	b.n	80034a0 <UART_SetConfig+0x360>
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	efff69f3 	.word	0xefff69f3
 800346c:	ffffcfff 	.word	0xffffcfff
 8003470:	40004800 	.word	0x40004800
 8003474:	fffff4ff 	.word	0xfffff4ff
 8003478:	40004400 	.word	0x40004400
 800347c:	40021000 	.word	0x40021000
 8003480:	003d0900 	.word	0x003d0900
 8003484:	00f42400 	.word	0x00f42400
 8003488:	080043b4 	.word	0x080043b4
      default:
        pclk = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003490:	231a      	movs	r3, #26
 8003492:	2218      	movs	r2, #24
 8003494:	4694      	mov	ip, r2
 8003496:	44bc      	add	ip, r7
 8003498:	4463      	add	r3, ip
 800349a:	2201      	movs	r2, #1
 800349c:	701a      	strb	r2, [r3, #0]
        break;
 800349e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d100      	bne.n	80034a8 <UART_SetConfig+0x368>
 80034a6:	e095      	b.n	80035d4 <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034aa:	005a      	lsls	r2, r3, #1
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	085b      	lsrs	r3, r3, #1
 80034b2:	18d2      	adds	r2, r2, r3
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	0019      	movs	r1, r3
 80034ba:	0010      	movs	r0, r2
 80034bc:	f7fc fe2e 	bl	800011c <__udivsi3>
 80034c0:	0003      	movs	r3, r0
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c8:	2b0f      	cmp	r3, #15
 80034ca:	d921      	bls.n	8003510 <UART_SetConfig+0x3d0>
 80034cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034ce:	2380      	movs	r3, #128	; 0x80
 80034d0:	025b      	lsls	r3, r3, #9
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d21c      	bcs.n	8003510 <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d8:	b29a      	uxth	r2, r3
 80034da:	200e      	movs	r0, #14
 80034dc:	2418      	movs	r4, #24
 80034de:	193b      	adds	r3, r7, r4
 80034e0:	181b      	adds	r3, r3, r0
 80034e2:	210f      	movs	r1, #15
 80034e4:	438a      	bics	r2, r1
 80034e6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ea:	085b      	lsrs	r3, r3, #1
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	2207      	movs	r2, #7
 80034f0:	4013      	ands	r3, r2
 80034f2:	b299      	uxth	r1, r3
 80034f4:	193b      	adds	r3, r7, r4
 80034f6:	181b      	adds	r3, r3, r0
 80034f8:	193a      	adds	r2, r7, r4
 80034fa:	1812      	adds	r2, r2, r0
 80034fc:	8812      	ldrh	r2, [r2, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	193a      	adds	r2, r7, r4
 8003508:	1812      	adds	r2, r2, r0
 800350a:	8812      	ldrh	r2, [r2, #0]
 800350c:	60da      	str	r2, [r3, #12]
 800350e:	e061      	b.n	80035d4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003510:	231a      	movs	r3, #26
 8003512:	2218      	movs	r2, #24
 8003514:	4694      	mov	ip, r2
 8003516:	44bc      	add	ip, r7
 8003518:	4463      	add	r3, ip
 800351a:	2201      	movs	r2, #1
 800351c:	701a      	strb	r2, [r3, #0]
 800351e:	e059      	b.n	80035d4 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003520:	231b      	movs	r3, #27
 8003522:	2218      	movs	r2, #24
 8003524:	4694      	mov	ip, r2
 8003526:	44bc      	add	ip, r7
 8003528:	4463      	add	r3, ip
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	2b08      	cmp	r3, #8
 800352e:	d822      	bhi.n	8003576 <UART_SetConfig+0x436>
 8003530:	009a      	lsls	r2, r3, #2
 8003532:	4b30      	ldr	r3, [pc, #192]	; (80035f4 <UART_SetConfig+0x4b4>)
 8003534:	18d3      	adds	r3, r2, r3
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800353a:	f7ff fbb3 	bl	8002ca4 <HAL_RCC_GetPCLK1Freq>
 800353e:	0003      	movs	r3, r0
 8003540:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003542:	e022      	b.n	800358a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003544:	f7ff fbc4 	bl	8002cd0 <HAL_RCC_GetPCLK2Freq>
 8003548:	0003      	movs	r3, r0
 800354a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800354c:	e01d      	b.n	800358a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800354e:	4b2a      	ldr	r3, [pc, #168]	; (80035f8 <UART_SetConfig+0x4b8>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2210      	movs	r2, #16
 8003554:	4013      	ands	r3, r2
 8003556:	d002      	beq.n	800355e <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003558:	4b28      	ldr	r3, [pc, #160]	; (80035fc <UART_SetConfig+0x4bc>)
 800355a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800355c:	e015      	b.n	800358a <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 800355e:	4b28      	ldr	r3, [pc, #160]	; (8003600 <UART_SetConfig+0x4c0>)
 8003560:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003562:	e012      	b.n	800358a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003564:	f7ff faee 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 8003568:	0003      	movs	r3, r0
 800356a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800356c:	e00d      	b.n	800358a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800356e:	2380      	movs	r3, #128	; 0x80
 8003570:	021b      	lsls	r3, r3, #8
 8003572:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003574:	e009      	b.n	800358a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003576:	2300      	movs	r3, #0
 8003578:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800357a:	231a      	movs	r3, #26
 800357c:	2218      	movs	r2, #24
 800357e:	4694      	mov	ip, r2
 8003580:	44bc      	add	ip, r7
 8003582:	4463      	add	r3, ip
 8003584:	2201      	movs	r2, #1
 8003586:	701a      	strb	r2, [r3, #0]
        break;
 8003588:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800358a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358c:	2b00      	cmp	r3, #0
 800358e:	d021      	beq.n	80035d4 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	085a      	lsrs	r2, r3, #1
 8003596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003598:	18d2      	adds	r2, r2, r3
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	0019      	movs	r1, r3
 80035a0:	0010      	movs	r0, r2
 80035a2:	f7fc fdbb 	bl	800011c <__udivsi3>
 80035a6:	0003      	movs	r3, r0
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ae:	2b0f      	cmp	r3, #15
 80035b0:	d909      	bls.n	80035c6 <UART_SetConfig+0x486>
 80035b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035b4:	2380      	movs	r3, #128	; 0x80
 80035b6:	025b      	lsls	r3, r3, #9
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d204      	bcs.n	80035c6 <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035c2:	60da      	str	r2, [r3, #12]
 80035c4:	e006      	b.n	80035d4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80035c6:	231a      	movs	r3, #26
 80035c8:	2218      	movs	r2, #24
 80035ca:	4694      	mov	ip, r2
 80035cc:	44bc      	add	ip, r7
 80035ce:	4463      	add	r3, ip
 80035d0:	2201      	movs	r2, #1
 80035d2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	2200      	movs	r2, #0
 80035d8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	2200      	movs	r2, #0
 80035de:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80035e0:	231a      	movs	r3, #26
 80035e2:	2218      	movs	r2, #24
 80035e4:	4694      	mov	ip, r2
 80035e6:	44bc      	add	ip, r7
 80035e8:	4463      	add	r3, ip
 80035ea:	781b      	ldrb	r3, [r3, #0]
}
 80035ec:	0018      	movs	r0, r3
 80035ee:	46bd      	mov	sp, r7
 80035f0:	b00e      	add	sp, #56	; 0x38
 80035f2:	bdb0      	pop	{r4, r5, r7, pc}
 80035f4:	080043d8 	.word	0x080043d8
 80035f8:	40021000 	.word	0x40021000
 80035fc:	003d0900 	.word	0x003d0900
 8003600:	00f42400 	.word	0x00f42400

08003604 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	2201      	movs	r2, #1
 8003612:	4013      	ands	r3, r2
 8003614:	d00b      	beq.n	800362e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	4a4a      	ldr	r2, [pc, #296]	; (8003748 <UART_AdvFeatureConfig+0x144>)
 800361e:	4013      	ands	r3, r2
 8003620:	0019      	movs	r1, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	2202      	movs	r2, #2
 8003634:	4013      	ands	r3, r2
 8003636:	d00b      	beq.n	8003650 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	4a43      	ldr	r2, [pc, #268]	; (800374c <UART_AdvFeatureConfig+0x148>)
 8003640:	4013      	ands	r3, r2
 8003642:	0019      	movs	r1, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	2204      	movs	r2, #4
 8003656:	4013      	ands	r3, r2
 8003658:	d00b      	beq.n	8003672 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	4a3b      	ldr	r2, [pc, #236]	; (8003750 <UART_AdvFeatureConfig+0x14c>)
 8003662:	4013      	ands	r3, r2
 8003664:	0019      	movs	r1, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	2208      	movs	r2, #8
 8003678:	4013      	ands	r3, r2
 800367a:	d00b      	beq.n	8003694 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	4a34      	ldr	r2, [pc, #208]	; (8003754 <UART_AdvFeatureConfig+0x150>)
 8003684:	4013      	ands	r3, r2
 8003686:	0019      	movs	r1, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	2210      	movs	r2, #16
 800369a:	4013      	ands	r3, r2
 800369c:	d00b      	beq.n	80036b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	4a2c      	ldr	r2, [pc, #176]	; (8003758 <UART_AdvFeatureConfig+0x154>)
 80036a6:	4013      	ands	r3, r2
 80036a8:	0019      	movs	r1, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	2220      	movs	r2, #32
 80036bc:	4013      	ands	r3, r2
 80036be:	d00b      	beq.n	80036d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	4a25      	ldr	r2, [pc, #148]	; (800375c <UART_AdvFeatureConfig+0x158>)
 80036c8:	4013      	ands	r3, r2
 80036ca:	0019      	movs	r1, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	2240      	movs	r2, #64	; 0x40
 80036de:	4013      	ands	r3, r2
 80036e0:	d01d      	beq.n	800371e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	4a1d      	ldr	r2, [pc, #116]	; (8003760 <UART_AdvFeatureConfig+0x15c>)
 80036ea:	4013      	ands	r3, r2
 80036ec:	0019      	movs	r1, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036fe:	2380      	movs	r3, #128	; 0x80
 8003700:	035b      	lsls	r3, r3, #13
 8003702:	429a      	cmp	r2, r3
 8003704:	d10b      	bne.n	800371e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	4a15      	ldr	r2, [pc, #84]	; (8003764 <UART_AdvFeatureConfig+0x160>)
 800370e:	4013      	ands	r3, r2
 8003710:	0019      	movs	r1, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003722:	2280      	movs	r2, #128	; 0x80
 8003724:	4013      	ands	r3, r2
 8003726:	d00b      	beq.n	8003740 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	4a0e      	ldr	r2, [pc, #56]	; (8003768 <UART_AdvFeatureConfig+0x164>)
 8003730:	4013      	ands	r3, r2
 8003732:	0019      	movs	r1, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	605a      	str	r2, [r3, #4]
  }
}
 8003740:	46c0      	nop			; (mov r8, r8)
 8003742:	46bd      	mov	sp, r7
 8003744:	b002      	add	sp, #8
 8003746:	bd80      	pop	{r7, pc}
 8003748:	fffdffff 	.word	0xfffdffff
 800374c:	fffeffff 	.word	0xfffeffff
 8003750:	fffbffff 	.word	0xfffbffff
 8003754:	ffff7fff 	.word	0xffff7fff
 8003758:	ffffefff 	.word	0xffffefff
 800375c:	ffffdfff 	.word	0xffffdfff
 8003760:	ffefffff 	.word	0xffefffff
 8003764:	ff9fffff 	.word	0xff9fffff
 8003768:	fff7ffff 	.word	0xfff7ffff

0800376c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af02      	add	r7, sp, #8
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2280      	movs	r2, #128	; 0x80
 8003778:	2100      	movs	r1, #0
 800377a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800377c:	f7fd fd76 	bl	800126c <HAL_GetTick>
 8003780:	0003      	movs	r3, r0
 8003782:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2208      	movs	r2, #8
 800378c:	4013      	ands	r3, r2
 800378e:	2b08      	cmp	r3, #8
 8003790:	d10c      	bne.n	80037ac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2280      	movs	r2, #128	; 0x80
 8003796:	0391      	lsls	r1, r2, #14
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	4a17      	ldr	r2, [pc, #92]	; (80037f8 <UART_CheckIdleState+0x8c>)
 800379c:	9200      	str	r2, [sp, #0]
 800379e:	2200      	movs	r2, #0
 80037a0:	f000 f82c 	bl	80037fc <UART_WaitOnFlagUntilTimeout>
 80037a4:	1e03      	subs	r3, r0, #0
 80037a6:	d001      	beq.n	80037ac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e021      	b.n	80037f0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2204      	movs	r2, #4
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d10c      	bne.n	80037d4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2280      	movs	r2, #128	; 0x80
 80037be:	03d1      	lsls	r1, r2, #15
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	4a0d      	ldr	r2, [pc, #52]	; (80037f8 <UART_CheckIdleState+0x8c>)
 80037c4:	9200      	str	r2, [sp, #0]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f000 f818 	bl	80037fc <UART_WaitOnFlagUntilTimeout>
 80037cc:	1e03      	subs	r3, r0, #0
 80037ce:	d001      	beq.n	80037d4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e00d      	b.n	80037f0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2220      	movs	r2, #32
 80037d8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2220      	movs	r2, #32
 80037de:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2274      	movs	r2, #116	; 0x74
 80037ea:	2100      	movs	r1, #0
 80037ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	0018      	movs	r0, r3
 80037f2:	46bd      	mov	sp, r7
 80037f4:	b004      	add	sp, #16
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	01ffffff 	.word	0x01ffffff

080037fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b094      	sub	sp, #80	; 0x50
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	603b      	str	r3, [r7, #0]
 8003808:	1dfb      	adds	r3, r7, #7
 800380a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800380c:	e0a3      	b.n	8003956 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800380e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003810:	3301      	adds	r3, #1
 8003812:	d100      	bne.n	8003816 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003814:	e09f      	b.n	8003956 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003816:	f7fd fd29 	bl	800126c <HAL_GetTick>
 800381a:	0002      	movs	r2, r0
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003822:	429a      	cmp	r2, r3
 8003824:	d302      	bcc.n	800382c <UART_WaitOnFlagUntilTimeout+0x30>
 8003826:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003828:	2b00      	cmp	r3, #0
 800382a:	d13d      	bne.n	80038a8 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800382c:	f3ef 8310 	mrs	r3, PRIMASK
 8003830:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003832:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003834:	647b      	str	r3, [r7, #68]	; 0x44
 8003836:	2301      	movs	r3, #1
 8003838:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800383a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800383c:	f383 8810 	msr	PRIMASK, r3
}
 8003840:	46c0      	nop			; (mov r8, r8)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	494c      	ldr	r1, [pc, #304]	; (8003980 <UART_WaitOnFlagUntilTimeout+0x184>)
 800384e:	400a      	ands	r2, r1
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003854:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003858:	f383 8810 	msr	PRIMASK, r3
}
 800385c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800385e:	f3ef 8310 	mrs	r3, PRIMASK
 8003862:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003866:	643b      	str	r3, [r7, #64]	; 0x40
 8003868:	2301      	movs	r3, #1
 800386a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800386c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386e:	f383 8810 	msr	PRIMASK, r3
}
 8003872:	46c0      	nop			; (mov r8, r8)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2101      	movs	r1, #1
 8003880:	438a      	bics	r2, r1
 8003882:	609a      	str	r2, [r3, #8]
 8003884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003886:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800388a:	f383 8810 	msr	PRIMASK, r3
}
 800388e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2220      	movs	r2, #32
 8003894:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2220      	movs	r2, #32
 800389a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2274      	movs	r2, #116	; 0x74
 80038a0:	2100      	movs	r1, #0
 80038a2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e067      	b.n	8003978 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2204      	movs	r2, #4
 80038b0:	4013      	ands	r3, r2
 80038b2:	d050      	beq.n	8003956 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	69da      	ldr	r2, [r3, #28]
 80038ba:	2380      	movs	r3, #128	; 0x80
 80038bc:	011b      	lsls	r3, r3, #4
 80038be:	401a      	ands	r2, r3
 80038c0:	2380      	movs	r3, #128	; 0x80
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d146      	bne.n	8003956 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2280      	movs	r2, #128	; 0x80
 80038ce:	0112      	lsls	r2, r2, #4
 80038d0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038d2:	f3ef 8310 	mrs	r3, PRIMASK
 80038d6:	613b      	str	r3, [r7, #16]
  return(result);
 80038d8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038dc:	2301      	movs	r3, #1
 80038de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f383 8810 	msr	PRIMASK, r3
}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4923      	ldr	r1, [pc, #140]	; (8003980 <UART_WaitOnFlagUntilTimeout+0x184>)
 80038f4:	400a      	ands	r2, r1
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	f383 8810 	msr	PRIMASK, r3
}
 8003902:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003904:	f3ef 8310 	mrs	r3, PRIMASK
 8003908:	61fb      	str	r3, [r7, #28]
  return(result);
 800390a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800390c:	64bb      	str	r3, [r7, #72]	; 0x48
 800390e:	2301      	movs	r3, #1
 8003910:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	f383 8810 	msr	PRIMASK, r3
}
 8003918:	46c0      	nop			; (mov r8, r8)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2101      	movs	r1, #1
 8003926:	438a      	bics	r2, r1
 8003928:	609a      	str	r2, [r3, #8]
 800392a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800392c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	f383 8810 	msr	PRIMASK, r3
}
 8003934:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2220      	movs	r2, #32
 800393a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2220      	movs	r2, #32
 8003940:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2280      	movs	r2, #128	; 0x80
 8003946:	2120      	movs	r1, #32
 8003948:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2274      	movs	r2, #116	; 0x74
 800394e:	2100      	movs	r1, #0
 8003950:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e010      	b.n	8003978 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	69db      	ldr	r3, [r3, #28]
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	4013      	ands	r3, r2
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	425a      	negs	r2, r3
 8003966:	4153      	adcs	r3, r2
 8003968:	b2db      	uxtb	r3, r3
 800396a:	001a      	movs	r2, r3
 800396c:	1dfb      	adds	r3, r7, #7
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	429a      	cmp	r2, r3
 8003972:	d100      	bne.n	8003976 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003974:	e74b      	b.n	800380e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	0018      	movs	r0, r3
 800397a:	46bd      	mov	sp, r7
 800397c:	b014      	add	sp, #80	; 0x50
 800397e:	bd80      	pop	{r7, pc}
 8003980:	fffffe5f 	.word	0xfffffe5f

08003984 <__errno>:
 8003984:	4b01      	ldr	r3, [pc, #4]	; (800398c <__errno+0x8>)
 8003986:	6818      	ldr	r0, [r3, #0]
 8003988:	4770      	bx	lr
 800398a:	46c0      	nop			; (mov r8, r8)
 800398c:	20000020 	.word	0x20000020

08003990 <__libc_init_array>:
 8003990:	b570      	push	{r4, r5, r6, lr}
 8003992:	2600      	movs	r6, #0
 8003994:	4d0c      	ldr	r5, [pc, #48]	; (80039c8 <__libc_init_array+0x38>)
 8003996:	4c0d      	ldr	r4, [pc, #52]	; (80039cc <__libc_init_array+0x3c>)
 8003998:	1b64      	subs	r4, r4, r5
 800399a:	10a4      	asrs	r4, r4, #2
 800399c:	42a6      	cmp	r6, r4
 800399e:	d109      	bne.n	80039b4 <__libc_init_array+0x24>
 80039a0:	2600      	movs	r6, #0
 80039a2:	f000 fc47 	bl	8004234 <_init>
 80039a6:	4d0a      	ldr	r5, [pc, #40]	; (80039d0 <__libc_init_array+0x40>)
 80039a8:	4c0a      	ldr	r4, [pc, #40]	; (80039d4 <__libc_init_array+0x44>)
 80039aa:	1b64      	subs	r4, r4, r5
 80039ac:	10a4      	asrs	r4, r4, #2
 80039ae:	42a6      	cmp	r6, r4
 80039b0:	d105      	bne.n	80039be <__libc_init_array+0x2e>
 80039b2:	bd70      	pop	{r4, r5, r6, pc}
 80039b4:	00b3      	lsls	r3, r6, #2
 80039b6:	58eb      	ldr	r3, [r5, r3]
 80039b8:	4798      	blx	r3
 80039ba:	3601      	adds	r6, #1
 80039bc:	e7ee      	b.n	800399c <__libc_init_array+0xc>
 80039be:	00b3      	lsls	r3, r6, #2
 80039c0:	58eb      	ldr	r3, [r5, r3]
 80039c2:	4798      	blx	r3
 80039c4:	3601      	adds	r6, #1
 80039c6:	e7f2      	b.n	80039ae <__libc_init_array+0x1e>
 80039c8:	08004438 	.word	0x08004438
 80039cc:	08004438 	.word	0x08004438
 80039d0:	08004438 	.word	0x08004438
 80039d4:	0800443c 	.word	0x0800443c

080039d8 <memset>:
 80039d8:	0003      	movs	r3, r0
 80039da:	1882      	adds	r2, r0, r2
 80039dc:	4293      	cmp	r3, r2
 80039de:	d100      	bne.n	80039e2 <memset+0xa>
 80039e0:	4770      	bx	lr
 80039e2:	7019      	strb	r1, [r3, #0]
 80039e4:	3301      	adds	r3, #1
 80039e6:	e7f9      	b.n	80039dc <memset+0x4>

080039e8 <siprintf>:
 80039e8:	b40e      	push	{r1, r2, r3}
 80039ea:	b500      	push	{lr}
 80039ec:	490b      	ldr	r1, [pc, #44]	; (8003a1c <siprintf+0x34>)
 80039ee:	b09c      	sub	sp, #112	; 0x70
 80039f0:	ab1d      	add	r3, sp, #116	; 0x74
 80039f2:	9002      	str	r0, [sp, #8]
 80039f4:	9006      	str	r0, [sp, #24]
 80039f6:	9107      	str	r1, [sp, #28]
 80039f8:	9104      	str	r1, [sp, #16]
 80039fa:	4809      	ldr	r0, [pc, #36]	; (8003a20 <siprintf+0x38>)
 80039fc:	4909      	ldr	r1, [pc, #36]	; (8003a24 <siprintf+0x3c>)
 80039fe:	cb04      	ldmia	r3!, {r2}
 8003a00:	9105      	str	r1, [sp, #20]
 8003a02:	6800      	ldr	r0, [r0, #0]
 8003a04:	a902      	add	r1, sp, #8
 8003a06:	9301      	str	r3, [sp, #4]
 8003a08:	f000 f870 	bl	8003aec <_svfiprintf_r>
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	9a02      	ldr	r2, [sp, #8]
 8003a10:	7013      	strb	r3, [r2, #0]
 8003a12:	b01c      	add	sp, #112	; 0x70
 8003a14:	bc08      	pop	{r3}
 8003a16:	b003      	add	sp, #12
 8003a18:	4718      	bx	r3
 8003a1a:	46c0      	nop			; (mov r8, r8)
 8003a1c:	7fffffff 	.word	0x7fffffff
 8003a20:	20000020 	.word	0x20000020
 8003a24:	ffff0208 	.word	0xffff0208

08003a28 <__ssputs_r>:
 8003a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a2a:	688e      	ldr	r6, [r1, #8]
 8003a2c:	b085      	sub	sp, #20
 8003a2e:	0007      	movs	r7, r0
 8003a30:	000c      	movs	r4, r1
 8003a32:	9203      	str	r2, [sp, #12]
 8003a34:	9301      	str	r3, [sp, #4]
 8003a36:	429e      	cmp	r6, r3
 8003a38:	d83c      	bhi.n	8003ab4 <__ssputs_r+0x8c>
 8003a3a:	2390      	movs	r3, #144	; 0x90
 8003a3c:	898a      	ldrh	r2, [r1, #12]
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	421a      	tst	r2, r3
 8003a42:	d034      	beq.n	8003aae <__ssputs_r+0x86>
 8003a44:	2503      	movs	r5, #3
 8003a46:	6909      	ldr	r1, [r1, #16]
 8003a48:	6823      	ldr	r3, [r4, #0]
 8003a4a:	1a5b      	subs	r3, r3, r1
 8003a4c:	9302      	str	r3, [sp, #8]
 8003a4e:	6963      	ldr	r3, [r4, #20]
 8003a50:	9802      	ldr	r0, [sp, #8]
 8003a52:	435d      	muls	r5, r3
 8003a54:	0feb      	lsrs	r3, r5, #31
 8003a56:	195d      	adds	r5, r3, r5
 8003a58:	9b01      	ldr	r3, [sp, #4]
 8003a5a:	106d      	asrs	r5, r5, #1
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	181b      	adds	r3, r3, r0
 8003a60:	42ab      	cmp	r3, r5
 8003a62:	d900      	bls.n	8003a66 <__ssputs_r+0x3e>
 8003a64:	001d      	movs	r5, r3
 8003a66:	0553      	lsls	r3, r2, #21
 8003a68:	d532      	bpl.n	8003ad0 <__ssputs_r+0xa8>
 8003a6a:	0029      	movs	r1, r5
 8003a6c:	0038      	movs	r0, r7
 8003a6e:	f000 fb31 	bl	80040d4 <_malloc_r>
 8003a72:	1e06      	subs	r6, r0, #0
 8003a74:	d109      	bne.n	8003a8a <__ssputs_r+0x62>
 8003a76:	230c      	movs	r3, #12
 8003a78:	603b      	str	r3, [r7, #0]
 8003a7a:	2340      	movs	r3, #64	; 0x40
 8003a7c:	2001      	movs	r0, #1
 8003a7e:	89a2      	ldrh	r2, [r4, #12]
 8003a80:	4240      	negs	r0, r0
 8003a82:	4313      	orrs	r3, r2
 8003a84:	81a3      	strh	r3, [r4, #12]
 8003a86:	b005      	add	sp, #20
 8003a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a8a:	9a02      	ldr	r2, [sp, #8]
 8003a8c:	6921      	ldr	r1, [r4, #16]
 8003a8e:	f000 faba 	bl	8004006 <memcpy>
 8003a92:	89a3      	ldrh	r3, [r4, #12]
 8003a94:	4a14      	ldr	r2, [pc, #80]	; (8003ae8 <__ssputs_r+0xc0>)
 8003a96:	401a      	ands	r2, r3
 8003a98:	2380      	movs	r3, #128	; 0x80
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	81a3      	strh	r3, [r4, #12]
 8003a9e:	9b02      	ldr	r3, [sp, #8]
 8003aa0:	6126      	str	r6, [r4, #16]
 8003aa2:	18f6      	adds	r6, r6, r3
 8003aa4:	6026      	str	r6, [r4, #0]
 8003aa6:	6165      	str	r5, [r4, #20]
 8003aa8:	9e01      	ldr	r6, [sp, #4]
 8003aaa:	1aed      	subs	r5, r5, r3
 8003aac:	60a5      	str	r5, [r4, #8]
 8003aae:	9b01      	ldr	r3, [sp, #4]
 8003ab0:	429e      	cmp	r6, r3
 8003ab2:	d900      	bls.n	8003ab6 <__ssputs_r+0x8e>
 8003ab4:	9e01      	ldr	r6, [sp, #4]
 8003ab6:	0032      	movs	r2, r6
 8003ab8:	9903      	ldr	r1, [sp, #12]
 8003aba:	6820      	ldr	r0, [r4, #0]
 8003abc:	f000 faac 	bl	8004018 <memmove>
 8003ac0:	68a3      	ldr	r3, [r4, #8]
 8003ac2:	2000      	movs	r0, #0
 8003ac4:	1b9b      	subs	r3, r3, r6
 8003ac6:	60a3      	str	r3, [r4, #8]
 8003ac8:	6823      	ldr	r3, [r4, #0]
 8003aca:	199e      	adds	r6, r3, r6
 8003acc:	6026      	str	r6, [r4, #0]
 8003ace:	e7da      	b.n	8003a86 <__ssputs_r+0x5e>
 8003ad0:	002a      	movs	r2, r5
 8003ad2:	0038      	movs	r0, r7
 8003ad4:	f000 fb5c 	bl	8004190 <_realloc_r>
 8003ad8:	1e06      	subs	r6, r0, #0
 8003ada:	d1e0      	bne.n	8003a9e <__ssputs_r+0x76>
 8003adc:	0038      	movs	r0, r7
 8003ade:	6921      	ldr	r1, [r4, #16]
 8003ae0:	f000 faae 	bl	8004040 <_free_r>
 8003ae4:	e7c7      	b.n	8003a76 <__ssputs_r+0x4e>
 8003ae6:	46c0      	nop			; (mov r8, r8)
 8003ae8:	fffffb7f 	.word	0xfffffb7f

08003aec <_svfiprintf_r>:
 8003aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aee:	b0a1      	sub	sp, #132	; 0x84
 8003af0:	9003      	str	r0, [sp, #12]
 8003af2:	001d      	movs	r5, r3
 8003af4:	898b      	ldrh	r3, [r1, #12]
 8003af6:	000f      	movs	r7, r1
 8003af8:	0016      	movs	r6, r2
 8003afa:	061b      	lsls	r3, r3, #24
 8003afc:	d511      	bpl.n	8003b22 <_svfiprintf_r+0x36>
 8003afe:	690b      	ldr	r3, [r1, #16]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10e      	bne.n	8003b22 <_svfiprintf_r+0x36>
 8003b04:	2140      	movs	r1, #64	; 0x40
 8003b06:	f000 fae5 	bl	80040d4 <_malloc_r>
 8003b0a:	6038      	str	r0, [r7, #0]
 8003b0c:	6138      	str	r0, [r7, #16]
 8003b0e:	2800      	cmp	r0, #0
 8003b10:	d105      	bne.n	8003b1e <_svfiprintf_r+0x32>
 8003b12:	230c      	movs	r3, #12
 8003b14:	9a03      	ldr	r2, [sp, #12]
 8003b16:	3801      	subs	r0, #1
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	b021      	add	sp, #132	; 0x84
 8003b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b1e:	2340      	movs	r3, #64	; 0x40
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	2300      	movs	r3, #0
 8003b24:	ac08      	add	r4, sp, #32
 8003b26:	6163      	str	r3, [r4, #20]
 8003b28:	3320      	adds	r3, #32
 8003b2a:	7663      	strb	r3, [r4, #25]
 8003b2c:	3310      	adds	r3, #16
 8003b2e:	76a3      	strb	r3, [r4, #26]
 8003b30:	9507      	str	r5, [sp, #28]
 8003b32:	0035      	movs	r5, r6
 8003b34:	782b      	ldrb	r3, [r5, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <_svfiprintf_r+0x52>
 8003b3a:	2b25      	cmp	r3, #37	; 0x25
 8003b3c:	d147      	bne.n	8003bce <_svfiprintf_r+0xe2>
 8003b3e:	1bab      	subs	r3, r5, r6
 8003b40:	9305      	str	r3, [sp, #20]
 8003b42:	42b5      	cmp	r5, r6
 8003b44:	d00c      	beq.n	8003b60 <_svfiprintf_r+0x74>
 8003b46:	0032      	movs	r2, r6
 8003b48:	0039      	movs	r1, r7
 8003b4a:	9803      	ldr	r0, [sp, #12]
 8003b4c:	f7ff ff6c 	bl	8003a28 <__ssputs_r>
 8003b50:	1c43      	adds	r3, r0, #1
 8003b52:	d100      	bne.n	8003b56 <_svfiprintf_r+0x6a>
 8003b54:	e0ae      	b.n	8003cb4 <_svfiprintf_r+0x1c8>
 8003b56:	6962      	ldr	r2, [r4, #20]
 8003b58:	9b05      	ldr	r3, [sp, #20]
 8003b5a:	4694      	mov	ip, r2
 8003b5c:	4463      	add	r3, ip
 8003b5e:	6163      	str	r3, [r4, #20]
 8003b60:	782b      	ldrb	r3, [r5, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d100      	bne.n	8003b68 <_svfiprintf_r+0x7c>
 8003b66:	e0a5      	b.n	8003cb4 <_svfiprintf_r+0x1c8>
 8003b68:	2201      	movs	r2, #1
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	4252      	negs	r2, r2
 8003b6e:	6062      	str	r2, [r4, #4]
 8003b70:	a904      	add	r1, sp, #16
 8003b72:	3254      	adds	r2, #84	; 0x54
 8003b74:	1852      	adds	r2, r2, r1
 8003b76:	1c6e      	adds	r6, r5, #1
 8003b78:	6023      	str	r3, [r4, #0]
 8003b7a:	60e3      	str	r3, [r4, #12]
 8003b7c:	60a3      	str	r3, [r4, #8]
 8003b7e:	7013      	strb	r3, [r2, #0]
 8003b80:	65a3      	str	r3, [r4, #88]	; 0x58
 8003b82:	2205      	movs	r2, #5
 8003b84:	7831      	ldrb	r1, [r6, #0]
 8003b86:	4854      	ldr	r0, [pc, #336]	; (8003cd8 <_svfiprintf_r+0x1ec>)
 8003b88:	f000 fa32 	bl	8003ff0 <memchr>
 8003b8c:	1c75      	adds	r5, r6, #1
 8003b8e:	2800      	cmp	r0, #0
 8003b90:	d11f      	bne.n	8003bd2 <_svfiprintf_r+0xe6>
 8003b92:	6822      	ldr	r2, [r4, #0]
 8003b94:	06d3      	lsls	r3, r2, #27
 8003b96:	d504      	bpl.n	8003ba2 <_svfiprintf_r+0xb6>
 8003b98:	2353      	movs	r3, #83	; 0x53
 8003b9a:	a904      	add	r1, sp, #16
 8003b9c:	185b      	adds	r3, r3, r1
 8003b9e:	2120      	movs	r1, #32
 8003ba0:	7019      	strb	r1, [r3, #0]
 8003ba2:	0713      	lsls	r3, r2, #28
 8003ba4:	d504      	bpl.n	8003bb0 <_svfiprintf_r+0xc4>
 8003ba6:	2353      	movs	r3, #83	; 0x53
 8003ba8:	a904      	add	r1, sp, #16
 8003baa:	185b      	adds	r3, r3, r1
 8003bac:	212b      	movs	r1, #43	; 0x2b
 8003bae:	7019      	strb	r1, [r3, #0]
 8003bb0:	7833      	ldrb	r3, [r6, #0]
 8003bb2:	2b2a      	cmp	r3, #42	; 0x2a
 8003bb4:	d016      	beq.n	8003be4 <_svfiprintf_r+0xf8>
 8003bb6:	0035      	movs	r5, r6
 8003bb8:	2100      	movs	r1, #0
 8003bba:	200a      	movs	r0, #10
 8003bbc:	68e3      	ldr	r3, [r4, #12]
 8003bbe:	782a      	ldrb	r2, [r5, #0]
 8003bc0:	1c6e      	adds	r6, r5, #1
 8003bc2:	3a30      	subs	r2, #48	; 0x30
 8003bc4:	2a09      	cmp	r2, #9
 8003bc6:	d94e      	bls.n	8003c66 <_svfiprintf_r+0x17a>
 8003bc8:	2900      	cmp	r1, #0
 8003bca:	d111      	bne.n	8003bf0 <_svfiprintf_r+0x104>
 8003bcc:	e017      	b.n	8003bfe <_svfiprintf_r+0x112>
 8003bce:	3501      	adds	r5, #1
 8003bd0:	e7b0      	b.n	8003b34 <_svfiprintf_r+0x48>
 8003bd2:	4b41      	ldr	r3, [pc, #260]	; (8003cd8 <_svfiprintf_r+0x1ec>)
 8003bd4:	6822      	ldr	r2, [r4, #0]
 8003bd6:	1ac0      	subs	r0, r0, r3
 8003bd8:	2301      	movs	r3, #1
 8003bda:	4083      	lsls	r3, r0
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	002e      	movs	r6, r5
 8003be0:	6023      	str	r3, [r4, #0]
 8003be2:	e7ce      	b.n	8003b82 <_svfiprintf_r+0x96>
 8003be4:	9b07      	ldr	r3, [sp, #28]
 8003be6:	1d19      	adds	r1, r3, #4
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	9107      	str	r1, [sp, #28]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	db01      	blt.n	8003bf4 <_svfiprintf_r+0x108>
 8003bf0:	930b      	str	r3, [sp, #44]	; 0x2c
 8003bf2:	e004      	b.n	8003bfe <_svfiprintf_r+0x112>
 8003bf4:	425b      	negs	r3, r3
 8003bf6:	60e3      	str	r3, [r4, #12]
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	6023      	str	r3, [r4, #0]
 8003bfe:	782b      	ldrb	r3, [r5, #0]
 8003c00:	2b2e      	cmp	r3, #46	; 0x2e
 8003c02:	d10a      	bne.n	8003c1a <_svfiprintf_r+0x12e>
 8003c04:	786b      	ldrb	r3, [r5, #1]
 8003c06:	2b2a      	cmp	r3, #42	; 0x2a
 8003c08:	d135      	bne.n	8003c76 <_svfiprintf_r+0x18a>
 8003c0a:	9b07      	ldr	r3, [sp, #28]
 8003c0c:	3502      	adds	r5, #2
 8003c0e:	1d1a      	adds	r2, r3, #4
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	9207      	str	r2, [sp, #28]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	db2b      	blt.n	8003c70 <_svfiprintf_r+0x184>
 8003c18:	9309      	str	r3, [sp, #36]	; 0x24
 8003c1a:	4e30      	ldr	r6, [pc, #192]	; (8003cdc <_svfiprintf_r+0x1f0>)
 8003c1c:	2203      	movs	r2, #3
 8003c1e:	0030      	movs	r0, r6
 8003c20:	7829      	ldrb	r1, [r5, #0]
 8003c22:	f000 f9e5 	bl	8003ff0 <memchr>
 8003c26:	2800      	cmp	r0, #0
 8003c28:	d006      	beq.n	8003c38 <_svfiprintf_r+0x14c>
 8003c2a:	2340      	movs	r3, #64	; 0x40
 8003c2c:	1b80      	subs	r0, r0, r6
 8003c2e:	4083      	lsls	r3, r0
 8003c30:	6822      	ldr	r2, [r4, #0]
 8003c32:	3501      	adds	r5, #1
 8003c34:	4313      	orrs	r3, r2
 8003c36:	6023      	str	r3, [r4, #0]
 8003c38:	7829      	ldrb	r1, [r5, #0]
 8003c3a:	2206      	movs	r2, #6
 8003c3c:	4828      	ldr	r0, [pc, #160]	; (8003ce0 <_svfiprintf_r+0x1f4>)
 8003c3e:	1c6e      	adds	r6, r5, #1
 8003c40:	7621      	strb	r1, [r4, #24]
 8003c42:	f000 f9d5 	bl	8003ff0 <memchr>
 8003c46:	2800      	cmp	r0, #0
 8003c48:	d03c      	beq.n	8003cc4 <_svfiprintf_r+0x1d8>
 8003c4a:	4b26      	ldr	r3, [pc, #152]	; (8003ce4 <_svfiprintf_r+0x1f8>)
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d125      	bne.n	8003c9c <_svfiprintf_r+0x1b0>
 8003c50:	2207      	movs	r2, #7
 8003c52:	9b07      	ldr	r3, [sp, #28]
 8003c54:	3307      	adds	r3, #7
 8003c56:	4393      	bics	r3, r2
 8003c58:	3308      	adds	r3, #8
 8003c5a:	9307      	str	r3, [sp, #28]
 8003c5c:	6963      	ldr	r3, [r4, #20]
 8003c5e:	9a04      	ldr	r2, [sp, #16]
 8003c60:	189b      	adds	r3, r3, r2
 8003c62:	6163      	str	r3, [r4, #20]
 8003c64:	e765      	b.n	8003b32 <_svfiprintf_r+0x46>
 8003c66:	4343      	muls	r3, r0
 8003c68:	0035      	movs	r5, r6
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	189b      	adds	r3, r3, r2
 8003c6e:	e7a6      	b.n	8003bbe <_svfiprintf_r+0xd2>
 8003c70:	2301      	movs	r3, #1
 8003c72:	425b      	negs	r3, r3
 8003c74:	e7d0      	b.n	8003c18 <_svfiprintf_r+0x12c>
 8003c76:	2300      	movs	r3, #0
 8003c78:	200a      	movs	r0, #10
 8003c7a:	001a      	movs	r2, r3
 8003c7c:	3501      	adds	r5, #1
 8003c7e:	6063      	str	r3, [r4, #4]
 8003c80:	7829      	ldrb	r1, [r5, #0]
 8003c82:	1c6e      	adds	r6, r5, #1
 8003c84:	3930      	subs	r1, #48	; 0x30
 8003c86:	2909      	cmp	r1, #9
 8003c88:	d903      	bls.n	8003c92 <_svfiprintf_r+0x1a6>
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0c5      	beq.n	8003c1a <_svfiprintf_r+0x12e>
 8003c8e:	9209      	str	r2, [sp, #36]	; 0x24
 8003c90:	e7c3      	b.n	8003c1a <_svfiprintf_r+0x12e>
 8003c92:	4342      	muls	r2, r0
 8003c94:	0035      	movs	r5, r6
 8003c96:	2301      	movs	r3, #1
 8003c98:	1852      	adds	r2, r2, r1
 8003c9a:	e7f1      	b.n	8003c80 <_svfiprintf_r+0x194>
 8003c9c:	ab07      	add	r3, sp, #28
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	003a      	movs	r2, r7
 8003ca2:	0021      	movs	r1, r4
 8003ca4:	4b10      	ldr	r3, [pc, #64]	; (8003ce8 <_svfiprintf_r+0x1fc>)
 8003ca6:	9803      	ldr	r0, [sp, #12]
 8003ca8:	e000      	b.n	8003cac <_svfiprintf_r+0x1c0>
 8003caa:	bf00      	nop
 8003cac:	9004      	str	r0, [sp, #16]
 8003cae:	9b04      	ldr	r3, [sp, #16]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	d1d3      	bne.n	8003c5c <_svfiprintf_r+0x170>
 8003cb4:	89bb      	ldrh	r3, [r7, #12]
 8003cb6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003cb8:	065b      	lsls	r3, r3, #25
 8003cba:	d400      	bmi.n	8003cbe <_svfiprintf_r+0x1d2>
 8003cbc:	e72d      	b.n	8003b1a <_svfiprintf_r+0x2e>
 8003cbe:	2001      	movs	r0, #1
 8003cc0:	4240      	negs	r0, r0
 8003cc2:	e72a      	b.n	8003b1a <_svfiprintf_r+0x2e>
 8003cc4:	ab07      	add	r3, sp, #28
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	003a      	movs	r2, r7
 8003cca:	0021      	movs	r1, r4
 8003ccc:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <_svfiprintf_r+0x1fc>)
 8003cce:	9803      	ldr	r0, [sp, #12]
 8003cd0:	f000 f87c 	bl	8003dcc <_printf_i>
 8003cd4:	e7ea      	b.n	8003cac <_svfiprintf_r+0x1c0>
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	080043fc 	.word	0x080043fc
 8003cdc:	08004402 	.word	0x08004402
 8003ce0:	08004406 	.word	0x08004406
 8003ce4:	00000000 	.word	0x00000000
 8003ce8:	08003a29 	.word	0x08003a29

08003cec <_printf_common>:
 8003cec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003cee:	0015      	movs	r5, r2
 8003cf0:	9301      	str	r3, [sp, #4]
 8003cf2:	688a      	ldr	r2, [r1, #8]
 8003cf4:	690b      	ldr	r3, [r1, #16]
 8003cf6:	000c      	movs	r4, r1
 8003cf8:	9000      	str	r0, [sp, #0]
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	da00      	bge.n	8003d00 <_printf_common+0x14>
 8003cfe:	0013      	movs	r3, r2
 8003d00:	0022      	movs	r2, r4
 8003d02:	602b      	str	r3, [r5, #0]
 8003d04:	3243      	adds	r2, #67	; 0x43
 8003d06:	7812      	ldrb	r2, [r2, #0]
 8003d08:	2a00      	cmp	r2, #0
 8003d0a:	d001      	beq.n	8003d10 <_printf_common+0x24>
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	602b      	str	r3, [r5, #0]
 8003d10:	6823      	ldr	r3, [r4, #0]
 8003d12:	069b      	lsls	r3, r3, #26
 8003d14:	d502      	bpl.n	8003d1c <_printf_common+0x30>
 8003d16:	682b      	ldr	r3, [r5, #0]
 8003d18:	3302      	adds	r3, #2
 8003d1a:	602b      	str	r3, [r5, #0]
 8003d1c:	6822      	ldr	r2, [r4, #0]
 8003d1e:	2306      	movs	r3, #6
 8003d20:	0017      	movs	r7, r2
 8003d22:	401f      	ands	r7, r3
 8003d24:	421a      	tst	r2, r3
 8003d26:	d027      	beq.n	8003d78 <_printf_common+0x8c>
 8003d28:	0023      	movs	r3, r4
 8003d2a:	3343      	adds	r3, #67	; 0x43
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	1e5a      	subs	r2, r3, #1
 8003d30:	4193      	sbcs	r3, r2
 8003d32:	6822      	ldr	r2, [r4, #0]
 8003d34:	0692      	lsls	r2, r2, #26
 8003d36:	d430      	bmi.n	8003d9a <_printf_common+0xae>
 8003d38:	0022      	movs	r2, r4
 8003d3a:	9901      	ldr	r1, [sp, #4]
 8003d3c:	9800      	ldr	r0, [sp, #0]
 8003d3e:	9e08      	ldr	r6, [sp, #32]
 8003d40:	3243      	adds	r2, #67	; 0x43
 8003d42:	47b0      	blx	r6
 8003d44:	1c43      	adds	r3, r0, #1
 8003d46:	d025      	beq.n	8003d94 <_printf_common+0xa8>
 8003d48:	2306      	movs	r3, #6
 8003d4a:	6820      	ldr	r0, [r4, #0]
 8003d4c:	682a      	ldr	r2, [r5, #0]
 8003d4e:	68e1      	ldr	r1, [r4, #12]
 8003d50:	2500      	movs	r5, #0
 8003d52:	4003      	ands	r3, r0
 8003d54:	2b04      	cmp	r3, #4
 8003d56:	d103      	bne.n	8003d60 <_printf_common+0x74>
 8003d58:	1a8d      	subs	r5, r1, r2
 8003d5a:	43eb      	mvns	r3, r5
 8003d5c:	17db      	asrs	r3, r3, #31
 8003d5e:	401d      	ands	r5, r3
 8003d60:	68a3      	ldr	r3, [r4, #8]
 8003d62:	6922      	ldr	r2, [r4, #16]
 8003d64:	4293      	cmp	r3, r2
 8003d66:	dd01      	ble.n	8003d6c <_printf_common+0x80>
 8003d68:	1a9b      	subs	r3, r3, r2
 8003d6a:	18ed      	adds	r5, r5, r3
 8003d6c:	2700      	movs	r7, #0
 8003d6e:	42bd      	cmp	r5, r7
 8003d70:	d120      	bne.n	8003db4 <_printf_common+0xc8>
 8003d72:	2000      	movs	r0, #0
 8003d74:	e010      	b.n	8003d98 <_printf_common+0xac>
 8003d76:	3701      	adds	r7, #1
 8003d78:	68e3      	ldr	r3, [r4, #12]
 8003d7a:	682a      	ldr	r2, [r5, #0]
 8003d7c:	1a9b      	subs	r3, r3, r2
 8003d7e:	42bb      	cmp	r3, r7
 8003d80:	ddd2      	ble.n	8003d28 <_printf_common+0x3c>
 8003d82:	0022      	movs	r2, r4
 8003d84:	2301      	movs	r3, #1
 8003d86:	9901      	ldr	r1, [sp, #4]
 8003d88:	9800      	ldr	r0, [sp, #0]
 8003d8a:	9e08      	ldr	r6, [sp, #32]
 8003d8c:	3219      	adds	r2, #25
 8003d8e:	47b0      	blx	r6
 8003d90:	1c43      	adds	r3, r0, #1
 8003d92:	d1f0      	bne.n	8003d76 <_printf_common+0x8a>
 8003d94:	2001      	movs	r0, #1
 8003d96:	4240      	negs	r0, r0
 8003d98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003d9a:	2030      	movs	r0, #48	; 0x30
 8003d9c:	18e1      	adds	r1, r4, r3
 8003d9e:	3143      	adds	r1, #67	; 0x43
 8003da0:	7008      	strb	r0, [r1, #0]
 8003da2:	0021      	movs	r1, r4
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	3145      	adds	r1, #69	; 0x45
 8003da8:	7809      	ldrb	r1, [r1, #0]
 8003daa:	18a2      	adds	r2, r4, r2
 8003dac:	3243      	adds	r2, #67	; 0x43
 8003dae:	3302      	adds	r3, #2
 8003db0:	7011      	strb	r1, [r2, #0]
 8003db2:	e7c1      	b.n	8003d38 <_printf_common+0x4c>
 8003db4:	0022      	movs	r2, r4
 8003db6:	2301      	movs	r3, #1
 8003db8:	9901      	ldr	r1, [sp, #4]
 8003dba:	9800      	ldr	r0, [sp, #0]
 8003dbc:	9e08      	ldr	r6, [sp, #32]
 8003dbe:	321a      	adds	r2, #26
 8003dc0:	47b0      	blx	r6
 8003dc2:	1c43      	adds	r3, r0, #1
 8003dc4:	d0e6      	beq.n	8003d94 <_printf_common+0xa8>
 8003dc6:	3701      	adds	r7, #1
 8003dc8:	e7d1      	b.n	8003d6e <_printf_common+0x82>
	...

08003dcc <_printf_i>:
 8003dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dce:	b08b      	sub	sp, #44	; 0x2c
 8003dd0:	9206      	str	r2, [sp, #24]
 8003dd2:	000a      	movs	r2, r1
 8003dd4:	3243      	adds	r2, #67	; 0x43
 8003dd6:	9307      	str	r3, [sp, #28]
 8003dd8:	9005      	str	r0, [sp, #20]
 8003dda:	9204      	str	r2, [sp, #16]
 8003ddc:	7e0a      	ldrb	r2, [r1, #24]
 8003dde:	000c      	movs	r4, r1
 8003de0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003de2:	2a78      	cmp	r2, #120	; 0x78
 8003de4:	d806      	bhi.n	8003df4 <_printf_i+0x28>
 8003de6:	2a62      	cmp	r2, #98	; 0x62
 8003de8:	d808      	bhi.n	8003dfc <_printf_i+0x30>
 8003dea:	2a00      	cmp	r2, #0
 8003dec:	d100      	bne.n	8003df0 <_printf_i+0x24>
 8003dee:	e0c0      	b.n	8003f72 <_printf_i+0x1a6>
 8003df0:	2a58      	cmp	r2, #88	; 0x58
 8003df2:	d052      	beq.n	8003e9a <_printf_i+0xce>
 8003df4:	0026      	movs	r6, r4
 8003df6:	3642      	adds	r6, #66	; 0x42
 8003df8:	7032      	strb	r2, [r6, #0]
 8003dfa:	e022      	b.n	8003e42 <_printf_i+0x76>
 8003dfc:	0010      	movs	r0, r2
 8003dfe:	3863      	subs	r0, #99	; 0x63
 8003e00:	2815      	cmp	r0, #21
 8003e02:	d8f7      	bhi.n	8003df4 <_printf_i+0x28>
 8003e04:	f7fc f980 	bl	8000108 <__gnu_thumb1_case_shi>
 8003e08:	001f0016 	.word	0x001f0016
 8003e0c:	fff6fff6 	.word	0xfff6fff6
 8003e10:	fff6fff6 	.word	0xfff6fff6
 8003e14:	fff6001f 	.word	0xfff6001f
 8003e18:	fff6fff6 	.word	0xfff6fff6
 8003e1c:	00a8fff6 	.word	0x00a8fff6
 8003e20:	009a0036 	.word	0x009a0036
 8003e24:	fff6fff6 	.word	0xfff6fff6
 8003e28:	fff600b9 	.word	0xfff600b9
 8003e2c:	fff60036 	.word	0xfff60036
 8003e30:	009efff6 	.word	0x009efff6
 8003e34:	0026      	movs	r6, r4
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	3642      	adds	r6, #66	; 0x42
 8003e3a:	1d11      	adds	r1, r2, #4
 8003e3c:	6019      	str	r1, [r3, #0]
 8003e3e:	6813      	ldr	r3, [r2, #0]
 8003e40:	7033      	strb	r3, [r6, #0]
 8003e42:	2301      	movs	r3, #1
 8003e44:	e0a7      	b.n	8003f96 <_printf_i+0x1ca>
 8003e46:	6808      	ldr	r0, [r1, #0]
 8003e48:	6819      	ldr	r1, [r3, #0]
 8003e4a:	1d0a      	adds	r2, r1, #4
 8003e4c:	0605      	lsls	r5, r0, #24
 8003e4e:	d50b      	bpl.n	8003e68 <_printf_i+0x9c>
 8003e50:	680d      	ldr	r5, [r1, #0]
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	2d00      	cmp	r5, #0
 8003e56:	da03      	bge.n	8003e60 <_printf_i+0x94>
 8003e58:	232d      	movs	r3, #45	; 0x2d
 8003e5a:	9a04      	ldr	r2, [sp, #16]
 8003e5c:	426d      	negs	r5, r5
 8003e5e:	7013      	strb	r3, [r2, #0]
 8003e60:	4b61      	ldr	r3, [pc, #388]	; (8003fe8 <_printf_i+0x21c>)
 8003e62:	270a      	movs	r7, #10
 8003e64:	9303      	str	r3, [sp, #12]
 8003e66:	e032      	b.n	8003ece <_printf_i+0x102>
 8003e68:	680d      	ldr	r5, [r1, #0]
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	0641      	lsls	r1, r0, #25
 8003e6e:	d5f1      	bpl.n	8003e54 <_printf_i+0x88>
 8003e70:	b22d      	sxth	r5, r5
 8003e72:	e7ef      	b.n	8003e54 <_printf_i+0x88>
 8003e74:	680d      	ldr	r5, [r1, #0]
 8003e76:	6819      	ldr	r1, [r3, #0]
 8003e78:	1d08      	adds	r0, r1, #4
 8003e7a:	6018      	str	r0, [r3, #0]
 8003e7c:	062e      	lsls	r6, r5, #24
 8003e7e:	d501      	bpl.n	8003e84 <_printf_i+0xb8>
 8003e80:	680d      	ldr	r5, [r1, #0]
 8003e82:	e003      	b.n	8003e8c <_printf_i+0xc0>
 8003e84:	066d      	lsls	r5, r5, #25
 8003e86:	d5fb      	bpl.n	8003e80 <_printf_i+0xb4>
 8003e88:	680d      	ldr	r5, [r1, #0]
 8003e8a:	b2ad      	uxth	r5, r5
 8003e8c:	4b56      	ldr	r3, [pc, #344]	; (8003fe8 <_printf_i+0x21c>)
 8003e8e:	270a      	movs	r7, #10
 8003e90:	9303      	str	r3, [sp, #12]
 8003e92:	2a6f      	cmp	r2, #111	; 0x6f
 8003e94:	d117      	bne.n	8003ec6 <_printf_i+0xfa>
 8003e96:	2708      	movs	r7, #8
 8003e98:	e015      	b.n	8003ec6 <_printf_i+0xfa>
 8003e9a:	3145      	adds	r1, #69	; 0x45
 8003e9c:	700a      	strb	r2, [r1, #0]
 8003e9e:	4a52      	ldr	r2, [pc, #328]	; (8003fe8 <_printf_i+0x21c>)
 8003ea0:	9203      	str	r2, [sp, #12]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	6821      	ldr	r1, [r4, #0]
 8003ea6:	ca20      	ldmia	r2!, {r5}
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	0608      	lsls	r0, r1, #24
 8003eac:	d550      	bpl.n	8003f50 <_printf_i+0x184>
 8003eae:	07cb      	lsls	r3, r1, #31
 8003eb0:	d502      	bpl.n	8003eb8 <_printf_i+0xec>
 8003eb2:	2320      	movs	r3, #32
 8003eb4:	4319      	orrs	r1, r3
 8003eb6:	6021      	str	r1, [r4, #0]
 8003eb8:	2710      	movs	r7, #16
 8003eba:	2d00      	cmp	r5, #0
 8003ebc:	d103      	bne.n	8003ec6 <_printf_i+0xfa>
 8003ebe:	2320      	movs	r3, #32
 8003ec0:	6822      	ldr	r2, [r4, #0]
 8003ec2:	439a      	bics	r2, r3
 8003ec4:	6022      	str	r2, [r4, #0]
 8003ec6:	0023      	movs	r3, r4
 8003ec8:	2200      	movs	r2, #0
 8003eca:	3343      	adds	r3, #67	; 0x43
 8003ecc:	701a      	strb	r2, [r3, #0]
 8003ece:	6863      	ldr	r3, [r4, #4]
 8003ed0:	60a3      	str	r3, [r4, #8]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	db03      	blt.n	8003ede <_printf_i+0x112>
 8003ed6:	2204      	movs	r2, #4
 8003ed8:	6821      	ldr	r1, [r4, #0]
 8003eda:	4391      	bics	r1, r2
 8003edc:	6021      	str	r1, [r4, #0]
 8003ede:	2d00      	cmp	r5, #0
 8003ee0:	d102      	bne.n	8003ee8 <_printf_i+0x11c>
 8003ee2:	9e04      	ldr	r6, [sp, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00c      	beq.n	8003f02 <_printf_i+0x136>
 8003ee8:	9e04      	ldr	r6, [sp, #16]
 8003eea:	0028      	movs	r0, r5
 8003eec:	0039      	movs	r1, r7
 8003eee:	f7fc f99b 	bl	8000228 <__aeabi_uidivmod>
 8003ef2:	9b03      	ldr	r3, [sp, #12]
 8003ef4:	3e01      	subs	r6, #1
 8003ef6:	5c5b      	ldrb	r3, [r3, r1]
 8003ef8:	7033      	strb	r3, [r6, #0]
 8003efa:	002b      	movs	r3, r5
 8003efc:	0005      	movs	r5, r0
 8003efe:	429f      	cmp	r7, r3
 8003f00:	d9f3      	bls.n	8003eea <_printf_i+0x11e>
 8003f02:	2f08      	cmp	r7, #8
 8003f04:	d109      	bne.n	8003f1a <_printf_i+0x14e>
 8003f06:	6823      	ldr	r3, [r4, #0]
 8003f08:	07db      	lsls	r3, r3, #31
 8003f0a:	d506      	bpl.n	8003f1a <_printf_i+0x14e>
 8003f0c:	6863      	ldr	r3, [r4, #4]
 8003f0e:	6922      	ldr	r2, [r4, #16]
 8003f10:	4293      	cmp	r3, r2
 8003f12:	dc02      	bgt.n	8003f1a <_printf_i+0x14e>
 8003f14:	2330      	movs	r3, #48	; 0x30
 8003f16:	3e01      	subs	r6, #1
 8003f18:	7033      	strb	r3, [r6, #0]
 8003f1a:	9b04      	ldr	r3, [sp, #16]
 8003f1c:	1b9b      	subs	r3, r3, r6
 8003f1e:	6123      	str	r3, [r4, #16]
 8003f20:	9b07      	ldr	r3, [sp, #28]
 8003f22:	0021      	movs	r1, r4
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	9805      	ldr	r0, [sp, #20]
 8003f28:	9b06      	ldr	r3, [sp, #24]
 8003f2a:	aa09      	add	r2, sp, #36	; 0x24
 8003f2c:	f7ff fede 	bl	8003cec <_printf_common>
 8003f30:	1c43      	adds	r3, r0, #1
 8003f32:	d135      	bne.n	8003fa0 <_printf_i+0x1d4>
 8003f34:	2001      	movs	r0, #1
 8003f36:	4240      	negs	r0, r0
 8003f38:	b00b      	add	sp, #44	; 0x2c
 8003f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	6809      	ldr	r1, [r1, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	6022      	str	r2, [r4, #0]
 8003f44:	0022      	movs	r2, r4
 8003f46:	2178      	movs	r1, #120	; 0x78
 8003f48:	3245      	adds	r2, #69	; 0x45
 8003f4a:	7011      	strb	r1, [r2, #0]
 8003f4c:	4a27      	ldr	r2, [pc, #156]	; (8003fec <_printf_i+0x220>)
 8003f4e:	e7a7      	b.n	8003ea0 <_printf_i+0xd4>
 8003f50:	0648      	lsls	r0, r1, #25
 8003f52:	d5ac      	bpl.n	8003eae <_printf_i+0xe2>
 8003f54:	b2ad      	uxth	r5, r5
 8003f56:	e7aa      	b.n	8003eae <_printf_i+0xe2>
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	680d      	ldr	r5, [r1, #0]
 8003f5c:	1d10      	adds	r0, r2, #4
 8003f5e:	6949      	ldr	r1, [r1, #20]
 8003f60:	6018      	str	r0, [r3, #0]
 8003f62:	6813      	ldr	r3, [r2, #0]
 8003f64:	062e      	lsls	r6, r5, #24
 8003f66:	d501      	bpl.n	8003f6c <_printf_i+0x1a0>
 8003f68:	6019      	str	r1, [r3, #0]
 8003f6a:	e002      	b.n	8003f72 <_printf_i+0x1a6>
 8003f6c:	066d      	lsls	r5, r5, #25
 8003f6e:	d5fb      	bpl.n	8003f68 <_printf_i+0x19c>
 8003f70:	8019      	strh	r1, [r3, #0]
 8003f72:	2300      	movs	r3, #0
 8003f74:	9e04      	ldr	r6, [sp, #16]
 8003f76:	6123      	str	r3, [r4, #16]
 8003f78:	e7d2      	b.n	8003f20 <_printf_i+0x154>
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	1d11      	adds	r1, r2, #4
 8003f7e:	6019      	str	r1, [r3, #0]
 8003f80:	6816      	ldr	r6, [r2, #0]
 8003f82:	2100      	movs	r1, #0
 8003f84:	0030      	movs	r0, r6
 8003f86:	6862      	ldr	r2, [r4, #4]
 8003f88:	f000 f832 	bl	8003ff0 <memchr>
 8003f8c:	2800      	cmp	r0, #0
 8003f8e:	d001      	beq.n	8003f94 <_printf_i+0x1c8>
 8003f90:	1b80      	subs	r0, r0, r6
 8003f92:	6060      	str	r0, [r4, #4]
 8003f94:	6863      	ldr	r3, [r4, #4]
 8003f96:	6123      	str	r3, [r4, #16]
 8003f98:	2300      	movs	r3, #0
 8003f9a:	9a04      	ldr	r2, [sp, #16]
 8003f9c:	7013      	strb	r3, [r2, #0]
 8003f9e:	e7bf      	b.n	8003f20 <_printf_i+0x154>
 8003fa0:	6923      	ldr	r3, [r4, #16]
 8003fa2:	0032      	movs	r2, r6
 8003fa4:	9906      	ldr	r1, [sp, #24]
 8003fa6:	9805      	ldr	r0, [sp, #20]
 8003fa8:	9d07      	ldr	r5, [sp, #28]
 8003faa:	47a8      	blx	r5
 8003fac:	1c43      	adds	r3, r0, #1
 8003fae:	d0c1      	beq.n	8003f34 <_printf_i+0x168>
 8003fb0:	6823      	ldr	r3, [r4, #0]
 8003fb2:	079b      	lsls	r3, r3, #30
 8003fb4:	d415      	bmi.n	8003fe2 <_printf_i+0x216>
 8003fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fb8:	68e0      	ldr	r0, [r4, #12]
 8003fba:	4298      	cmp	r0, r3
 8003fbc:	dabc      	bge.n	8003f38 <_printf_i+0x16c>
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	e7ba      	b.n	8003f38 <_printf_i+0x16c>
 8003fc2:	0022      	movs	r2, r4
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	9906      	ldr	r1, [sp, #24]
 8003fc8:	9805      	ldr	r0, [sp, #20]
 8003fca:	9e07      	ldr	r6, [sp, #28]
 8003fcc:	3219      	adds	r2, #25
 8003fce:	47b0      	blx	r6
 8003fd0:	1c43      	adds	r3, r0, #1
 8003fd2:	d0af      	beq.n	8003f34 <_printf_i+0x168>
 8003fd4:	3501      	adds	r5, #1
 8003fd6:	68e3      	ldr	r3, [r4, #12]
 8003fd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fda:	1a9b      	subs	r3, r3, r2
 8003fdc:	42ab      	cmp	r3, r5
 8003fde:	dcf0      	bgt.n	8003fc2 <_printf_i+0x1f6>
 8003fe0:	e7e9      	b.n	8003fb6 <_printf_i+0x1ea>
 8003fe2:	2500      	movs	r5, #0
 8003fe4:	e7f7      	b.n	8003fd6 <_printf_i+0x20a>
 8003fe6:	46c0      	nop			; (mov r8, r8)
 8003fe8:	0800440d 	.word	0x0800440d
 8003fec:	0800441e 	.word	0x0800441e

08003ff0 <memchr>:
 8003ff0:	b2c9      	uxtb	r1, r1
 8003ff2:	1882      	adds	r2, r0, r2
 8003ff4:	4290      	cmp	r0, r2
 8003ff6:	d101      	bne.n	8003ffc <memchr+0xc>
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	4770      	bx	lr
 8003ffc:	7803      	ldrb	r3, [r0, #0]
 8003ffe:	428b      	cmp	r3, r1
 8004000:	d0fb      	beq.n	8003ffa <memchr+0xa>
 8004002:	3001      	adds	r0, #1
 8004004:	e7f6      	b.n	8003ff4 <memchr+0x4>

08004006 <memcpy>:
 8004006:	2300      	movs	r3, #0
 8004008:	b510      	push	{r4, lr}
 800400a:	429a      	cmp	r2, r3
 800400c:	d100      	bne.n	8004010 <memcpy+0xa>
 800400e:	bd10      	pop	{r4, pc}
 8004010:	5ccc      	ldrb	r4, [r1, r3]
 8004012:	54c4      	strb	r4, [r0, r3]
 8004014:	3301      	adds	r3, #1
 8004016:	e7f8      	b.n	800400a <memcpy+0x4>

08004018 <memmove>:
 8004018:	b510      	push	{r4, lr}
 800401a:	4288      	cmp	r0, r1
 800401c:	d902      	bls.n	8004024 <memmove+0xc>
 800401e:	188b      	adds	r3, r1, r2
 8004020:	4298      	cmp	r0, r3
 8004022:	d303      	bcc.n	800402c <memmove+0x14>
 8004024:	2300      	movs	r3, #0
 8004026:	e007      	b.n	8004038 <memmove+0x20>
 8004028:	5c8b      	ldrb	r3, [r1, r2]
 800402a:	5483      	strb	r3, [r0, r2]
 800402c:	3a01      	subs	r2, #1
 800402e:	d2fb      	bcs.n	8004028 <memmove+0x10>
 8004030:	bd10      	pop	{r4, pc}
 8004032:	5ccc      	ldrb	r4, [r1, r3]
 8004034:	54c4      	strb	r4, [r0, r3]
 8004036:	3301      	adds	r3, #1
 8004038:	429a      	cmp	r2, r3
 800403a:	d1fa      	bne.n	8004032 <memmove+0x1a>
 800403c:	e7f8      	b.n	8004030 <memmove+0x18>
	...

08004040 <_free_r>:
 8004040:	b570      	push	{r4, r5, r6, lr}
 8004042:	0005      	movs	r5, r0
 8004044:	2900      	cmp	r1, #0
 8004046:	d010      	beq.n	800406a <_free_r+0x2a>
 8004048:	1f0c      	subs	r4, r1, #4
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	da00      	bge.n	8004052 <_free_r+0x12>
 8004050:	18e4      	adds	r4, r4, r3
 8004052:	0028      	movs	r0, r5
 8004054:	f000 f8d4 	bl	8004200 <__malloc_lock>
 8004058:	4a1d      	ldr	r2, [pc, #116]	; (80040d0 <_free_r+0x90>)
 800405a:	6813      	ldr	r3, [r2, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d105      	bne.n	800406c <_free_r+0x2c>
 8004060:	6063      	str	r3, [r4, #4]
 8004062:	6014      	str	r4, [r2, #0]
 8004064:	0028      	movs	r0, r5
 8004066:	f000 f8d3 	bl	8004210 <__malloc_unlock>
 800406a:	bd70      	pop	{r4, r5, r6, pc}
 800406c:	42a3      	cmp	r3, r4
 800406e:	d908      	bls.n	8004082 <_free_r+0x42>
 8004070:	6821      	ldr	r1, [r4, #0]
 8004072:	1860      	adds	r0, r4, r1
 8004074:	4283      	cmp	r3, r0
 8004076:	d1f3      	bne.n	8004060 <_free_r+0x20>
 8004078:	6818      	ldr	r0, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	1841      	adds	r1, r0, r1
 800407e:	6021      	str	r1, [r4, #0]
 8004080:	e7ee      	b.n	8004060 <_free_r+0x20>
 8004082:	001a      	movs	r2, r3
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <_free_r+0x4e>
 800408a:	42a3      	cmp	r3, r4
 800408c:	d9f9      	bls.n	8004082 <_free_r+0x42>
 800408e:	6811      	ldr	r1, [r2, #0]
 8004090:	1850      	adds	r0, r2, r1
 8004092:	42a0      	cmp	r0, r4
 8004094:	d10b      	bne.n	80040ae <_free_r+0x6e>
 8004096:	6820      	ldr	r0, [r4, #0]
 8004098:	1809      	adds	r1, r1, r0
 800409a:	1850      	adds	r0, r2, r1
 800409c:	6011      	str	r1, [r2, #0]
 800409e:	4283      	cmp	r3, r0
 80040a0:	d1e0      	bne.n	8004064 <_free_r+0x24>
 80040a2:	6818      	ldr	r0, [r3, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	1841      	adds	r1, r0, r1
 80040a8:	6011      	str	r1, [r2, #0]
 80040aa:	6053      	str	r3, [r2, #4]
 80040ac:	e7da      	b.n	8004064 <_free_r+0x24>
 80040ae:	42a0      	cmp	r0, r4
 80040b0:	d902      	bls.n	80040b8 <_free_r+0x78>
 80040b2:	230c      	movs	r3, #12
 80040b4:	602b      	str	r3, [r5, #0]
 80040b6:	e7d5      	b.n	8004064 <_free_r+0x24>
 80040b8:	6821      	ldr	r1, [r4, #0]
 80040ba:	1860      	adds	r0, r4, r1
 80040bc:	4283      	cmp	r3, r0
 80040be:	d103      	bne.n	80040c8 <_free_r+0x88>
 80040c0:	6818      	ldr	r0, [r3, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	1841      	adds	r1, r0, r1
 80040c6:	6021      	str	r1, [r4, #0]
 80040c8:	6063      	str	r3, [r4, #4]
 80040ca:	6054      	str	r4, [r2, #4]
 80040cc:	e7ca      	b.n	8004064 <_free_r+0x24>
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	200000c8 	.word	0x200000c8

080040d4 <_malloc_r>:
 80040d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040d6:	2303      	movs	r3, #3
 80040d8:	1ccd      	adds	r5, r1, #3
 80040da:	439d      	bics	r5, r3
 80040dc:	3508      	adds	r5, #8
 80040de:	0006      	movs	r6, r0
 80040e0:	2d0c      	cmp	r5, #12
 80040e2:	d21f      	bcs.n	8004124 <_malloc_r+0x50>
 80040e4:	250c      	movs	r5, #12
 80040e6:	42a9      	cmp	r1, r5
 80040e8:	d81e      	bhi.n	8004128 <_malloc_r+0x54>
 80040ea:	0030      	movs	r0, r6
 80040ec:	f000 f888 	bl	8004200 <__malloc_lock>
 80040f0:	4925      	ldr	r1, [pc, #148]	; (8004188 <_malloc_r+0xb4>)
 80040f2:	680a      	ldr	r2, [r1, #0]
 80040f4:	0014      	movs	r4, r2
 80040f6:	2c00      	cmp	r4, #0
 80040f8:	d11a      	bne.n	8004130 <_malloc_r+0x5c>
 80040fa:	4f24      	ldr	r7, [pc, #144]	; (800418c <_malloc_r+0xb8>)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d104      	bne.n	800410c <_malloc_r+0x38>
 8004102:	0021      	movs	r1, r4
 8004104:	0030      	movs	r0, r6
 8004106:	f000 f869 	bl	80041dc <_sbrk_r>
 800410a:	6038      	str	r0, [r7, #0]
 800410c:	0029      	movs	r1, r5
 800410e:	0030      	movs	r0, r6
 8004110:	f000 f864 	bl	80041dc <_sbrk_r>
 8004114:	1c43      	adds	r3, r0, #1
 8004116:	d12b      	bne.n	8004170 <_malloc_r+0x9c>
 8004118:	230c      	movs	r3, #12
 800411a:	0030      	movs	r0, r6
 800411c:	6033      	str	r3, [r6, #0]
 800411e:	f000 f877 	bl	8004210 <__malloc_unlock>
 8004122:	e003      	b.n	800412c <_malloc_r+0x58>
 8004124:	2d00      	cmp	r5, #0
 8004126:	dade      	bge.n	80040e6 <_malloc_r+0x12>
 8004128:	230c      	movs	r3, #12
 800412a:	6033      	str	r3, [r6, #0]
 800412c:	2000      	movs	r0, #0
 800412e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004130:	6823      	ldr	r3, [r4, #0]
 8004132:	1b5b      	subs	r3, r3, r5
 8004134:	d419      	bmi.n	800416a <_malloc_r+0x96>
 8004136:	2b0b      	cmp	r3, #11
 8004138:	d903      	bls.n	8004142 <_malloc_r+0x6e>
 800413a:	6023      	str	r3, [r4, #0]
 800413c:	18e4      	adds	r4, r4, r3
 800413e:	6025      	str	r5, [r4, #0]
 8004140:	e003      	b.n	800414a <_malloc_r+0x76>
 8004142:	6863      	ldr	r3, [r4, #4]
 8004144:	42a2      	cmp	r2, r4
 8004146:	d10e      	bne.n	8004166 <_malloc_r+0x92>
 8004148:	600b      	str	r3, [r1, #0]
 800414a:	0030      	movs	r0, r6
 800414c:	f000 f860 	bl	8004210 <__malloc_unlock>
 8004150:	0020      	movs	r0, r4
 8004152:	2207      	movs	r2, #7
 8004154:	300b      	adds	r0, #11
 8004156:	1d23      	adds	r3, r4, #4
 8004158:	4390      	bics	r0, r2
 800415a:	1ac2      	subs	r2, r0, r3
 800415c:	4298      	cmp	r0, r3
 800415e:	d0e6      	beq.n	800412e <_malloc_r+0x5a>
 8004160:	1a1b      	subs	r3, r3, r0
 8004162:	50a3      	str	r3, [r4, r2]
 8004164:	e7e3      	b.n	800412e <_malloc_r+0x5a>
 8004166:	6053      	str	r3, [r2, #4]
 8004168:	e7ef      	b.n	800414a <_malloc_r+0x76>
 800416a:	0022      	movs	r2, r4
 800416c:	6864      	ldr	r4, [r4, #4]
 800416e:	e7c2      	b.n	80040f6 <_malloc_r+0x22>
 8004170:	2303      	movs	r3, #3
 8004172:	1cc4      	adds	r4, r0, #3
 8004174:	439c      	bics	r4, r3
 8004176:	42a0      	cmp	r0, r4
 8004178:	d0e1      	beq.n	800413e <_malloc_r+0x6a>
 800417a:	1a21      	subs	r1, r4, r0
 800417c:	0030      	movs	r0, r6
 800417e:	f000 f82d 	bl	80041dc <_sbrk_r>
 8004182:	1c43      	adds	r3, r0, #1
 8004184:	d1db      	bne.n	800413e <_malloc_r+0x6a>
 8004186:	e7c7      	b.n	8004118 <_malloc_r+0x44>
 8004188:	200000c8 	.word	0x200000c8
 800418c:	200000cc 	.word	0x200000cc

08004190 <_realloc_r>:
 8004190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004192:	0007      	movs	r7, r0
 8004194:	000d      	movs	r5, r1
 8004196:	0016      	movs	r6, r2
 8004198:	2900      	cmp	r1, #0
 800419a:	d105      	bne.n	80041a8 <_realloc_r+0x18>
 800419c:	0011      	movs	r1, r2
 800419e:	f7ff ff99 	bl	80040d4 <_malloc_r>
 80041a2:	0004      	movs	r4, r0
 80041a4:	0020      	movs	r0, r4
 80041a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041a8:	2a00      	cmp	r2, #0
 80041aa:	d103      	bne.n	80041b4 <_realloc_r+0x24>
 80041ac:	f7ff ff48 	bl	8004040 <_free_r>
 80041b0:	0034      	movs	r4, r6
 80041b2:	e7f7      	b.n	80041a4 <_realloc_r+0x14>
 80041b4:	f000 f834 	bl	8004220 <_malloc_usable_size_r>
 80041b8:	002c      	movs	r4, r5
 80041ba:	42b0      	cmp	r0, r6
 80041bc:	d2f2      	bcs.n	80041a4 <_realloc_r+0x14>
 80041be:	0031      	movs	r1, r6
 80041c0:	0038      	movs	r0, r7
 80041c2:	f7ff ff87 	bl	80040d4 <_malloc_r>
 80041c6:	1e04      	subs	r4, r0, #0
 80041c8:	d0ec      	beq.n	80041a4 <_realloc_r+0x14>
 80041ca:	0029      	movs	r1, r5
 80041cc:	0032      	movs	r2, r6
 80041ce:	f7ff ff1a 	bl	8004006 <memcpy>
 80041d2:	0029      	movs	r1, r5
 80041d4:	0038      	movs	r0, r7
 80041d6:	f7ff ff33 	bl	8004040 <_free_r>
 80041da:	e7e3      	b.n	80041a4 <_realloc_r+0x14>

080041dc <_sbrk_r>:
 80041dc:	2300      	movs	r3, #0
 80041de:	b570      	push	{r4, r5, r6, lr}
 80041e0:	4d06      	ldr	r5, [pc, #24]	; (80041fc <_sbrk_r+0x20>)
 80041e2:	0004      	movs	r4, r0
 80041e4:	0008      	movs	r0, r1
 80041e6:	602b      	str	r3, [r5, #0]
 80041e8:	f7fc febe 	bl	8000f68 <_sbrk>
 80041ec:	1c43      	adds	r3, r0, #1
 80041ee:	d103      	bne.n	80041f8 <_sbrk_r+0x1c>
 80041f0:	682b      	ldr	r3, [r5, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d000      	beq.n	80041f8 <_sbrk_r+0x1c>
 80041f6:	6023      	str	r3, [r4, #0]
 80041f8:	bd70      	pop	{r4, r5, r6, pc}
 80041fa:	46c0      	nop			; (mov r8, r8)
 80041fc:	20000268 	.word	0x20000268

08004200 <__malloc_lock>:
 8004200:	b510      	push	{r4, lr}
 8004202:	4802      	ldr	r0, [pc, #8]	; (800420c <__malloc_lock+0xc>)
 8004204:	f000 f814 	bl	8004230 <__retarget_lock_acquire_recursive>
 8004208:	bd10      	pop	{r4, pc}
 800420a:	46c0      	nop			; (mov r8, r8)
 800420c:	20000270 	.word	0x20000270

08004210 <__malloc_unlock>:
 8004210:	b510      	push	{r4, lr}
 8004212:	4802      	ldr	r0, [pc, #8]	; (800421c <__malloc_unlock+0xc>)
 8004214:	f000 f80d 	bl	8004232 <__retarget_lock_release_recursive>
 8004218:	bd10      	pop	{r4, pc}
 800421a:	46c0      	nop			; (mov r8, r8)
 800421c:	20000270 	.word	0x20000270

08004220 <_malloc_usable_size_r>:
 8004220:	1f0b      	subs	r3, r1, #4
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	1f18      	subs	r0, r3, #4
 8004226:	2b00      	cmp	r3, #0
 8004228:	da01      	bge.n	800422e <_malloc_usable_size_r+0xe>
 800422a:	580b      	ldr	r3, [r1, r0]
 800422c:	18c0      	adds	r0, r0, r3
 800422e:	4770      	bx	lr

08004230 <__retarget_lock_acquire_recursive>:
 8004230:	4770      	bx	lr

08004232 <__retarget_lock_release_recursive>:
 8004232:	4770      	bx	lr

08004234 <_init>:
 8004234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004236:	46c0      	nop			; (mov r8, r8)
 8004238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800423a:	bc08      	pop	{r3}
 800423c:	469e      	mov	lr, r3
 800423e:	4770      	bx	lr

08004240 <_fini>:
 8004240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004242:	46c0      	nop			; (mov r8, r8)
 8004244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004246:	bc08      	pop	{r3}
 8004248:	469e      	mov	lr, r3
 800424a:	4770      	bx	lr
